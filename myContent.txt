reading content from C:\Users\Asus\Desktop\Bee\10005799 (1).pdf


 

 
Abstract—Music has always been an integral part of human’s 

daily lives. But, for the most people, reading musical score and turning 
it into melody is not easy. This study aims to develop an Automatic 
music score recognition system using digital image processing, which 
can be used to read and analyze musical score images automatically. 
The technical approaches included: (1) staff region segmentation; (2) 
image preprocessing; (3) note recognition; and (4) accidental and rest 
recognition. Digital image processing techniques (e.g., horizontal 
/vertical projections, connected component labeling, morphological 
processing, template matching, etc.) were applied according to 
musical notes, accidents, and rests in staff notations. Preliminary 
results showed that our system could achieve detection and 
recognition rates of 96.3% and 91.7%, respectively. In conclusion, we 
presented an effective automated musical score recognition system 
that could be integrated in a system with a media player to play 
music/songs given input images of musical score. Ultimately, this 
system could also be incorporated in applications for mobile devices as 
a learning tool, such that a music player could learn to play 
music/songs. 
 

Keywords—Connected component labeling, image processing, 
morphological processing, optical musical recognition.  

I. INTRODUCTION 

ITH the advance of image processing and computer 
vision techniques in recent years, the techniques have 

been integrated in human’s daily lives. Typical image 
processing and computer vision applications include document 
processing, smartphone applications, video surveillance 
systems, multimedia systems, and/or video games, etc.  

In image processing techniques, the Optical Character 
Recognition (OCR) is an important technique that has been 
widely used in handwriting inputs, license plate recognition, 
and augmented reality applications. The objective of the OCR 
technique is to allow the computer to analyze the text images, 
and then convert to texts (typically the ASCII codes) which 
computer can handle. For example, [1] proposed a method to 
calculate the appropriate threshold for converting gray-level 
images to binary images automatically. Casey and Lecolinet [2] 
proposed a character segmentation system based on connected 
component analysis and feature extraction, which were used to 
segment and recognize each character from document images. 

 
Yuan-Hsiang Chang, Ph.D. is with the Information and Computer 

Engineering Department, Chung-Yuan Christian University, Chung Li, Taiwan, 
R.O.C. (phone: 886-3-265-4713; fax: 886-3-265-4799; e-mail: author@ 
boulder.nist.gov).  

Zhong-Xian Peng, is a graduate student with the. Information and Computer 
Engineering Department, Chung-Yuan Christian University, Chung Li, Tawian, 
R.O.C 

Li-Der Jeng is with the Electronic Engineering Department, Chung-Yuan 
Christian University, Chung Li, Taiwan 

Liu et al. [3] proposed a handwritten character strings 
recognition system for address reading, in which characters 
were segmented using the connected component analysis. Each 
character was then recognized using a beam search algorithm 
and a character classifier. 

In addition to the OCR technique, pattern recognition 
techniques are also drawing attention of many researchers. 
Patterns (or symbols) are commonly seen in documents and/or 
other scenarios in which text information is not used for the 
representation (such as music notes, traffic signs, gestures, etc.). 
However, recognition of such patterns (or symbols) may 
require expertise to achieve effective representation and/or 
communication (e.g., music notes in a music score, etc.). 

Musical score is a form to record music by symbols which 
may include the pitch and tempo information about the music 
and/or songs. With the development of pattern recognition 
techniques, musical score recognition has also become a 
research topic lately. For example, [4] proposed a method to 
detect and remove staff lines using derivation and connected 
component analysis. Chen et al. [5] proposed a conventional 
architecture of Optical Music Recognition (OMR) using the 
staff-lines detection as the key stage. They explored two 
methods, namely the Hough transform and Mathematical 
Morphology, for detecting all staff-lines of an image. Dutta et 
al. [6] proposed a different method to detect and remove staff 
lines from musical documents. The methodology considered a 
staff line segment as a horizontal linkage of vertical black runs 
with uniform height. They also used the neighboring properties 
of a staff line segment to validate it as a true segment. Yoo et al. 
[7] proposed a system to recognize musical scores in low 
resolution images captured by the digital camera of a mobile 
phone. They presented a mask based approach to cope with 
incomplete information in the low resolution images. Toyama 
et al. [8] proposed a score recognition method which could be 
applicable to the complex music scores. Symbol candidates 
were detected by template matching, and then selected by 
considering the relative positions and mutual connections. 
Rossant and Bloch [9] proposed an optical music recognition 
system based on a fuzzy modeling of symbol classes and music 
writing rules. The objective was to disambiguate the 
recognition hypotheses output by the individual symbol 
analysis, followed by the fuzzy modeling to account for 
imprecision in symbol detection. Parker [10] implemented a 
complete optical music recognition system, called Lemon. 
Their system included the techniques, i.e., staff line detection, 
text segmentation, line detection, symbol recognition, note 
head recognition, and semantic interpretation. 

Automatic Music Score Recognition System Using 
Digital Image Processing 
Yuan-Hsiang Chang, Zhong-Xian Peng, Li-Der Jeng. 

W 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1811International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

II.  METHOD 

In this study, we present an “Automatic Music Score 
Recognition System Using Digital Image Processing”, which 
was aimed to automatically recognize musical scores.  

Several system hypotheses can be described as follows: 
 The musical score is a printed document (i.e., black 

musical notes or symbols in white background). 
 The musical score is a scanned document in an upright 

position, therefore no perspective distortions are observed. 
 The image is with sufficient resolution and in good quality. 

Fig. 1 shows the flow chart of our system. The processes 
include: Image Analysis and Segmentation, Image 
Preprocessing, Note recognition, and Accidental and Rest 
Recognition. 

 

Note Recognition

Stem Filtering

Size Filtering

Shape Filtering

Pitch And Beat Analysis

Output

Staff Region Segmentation

Binary Transform

Horizontal Projection

Region Segmentation

Image Preprocessing

Accidental and Rest Recognition

Note Removal

Template ImageTemplate Matching

Source
Image

Staff Line Filtering

Morphological Processing

Connected Component Labeling

 

Fig. 1 System flow chart of the Automatic Music Score Recognition 
System Using Digital Image Processing  

A. Staff Region Segmentation 

A page of musical score consist of number of row stave, with 
a top-down order when playing. A staff consists of five staff 
lines, while notes are recorded on staff lines with respect to the 
height of each line to determine its pitch. Therefore, the first 
step of our system was to segment sub-regions for each staff. 
The processes included: Binary Transform, Horizontal 
Projection, and Region Segmentation. 

Binary Transform was simply used to convert the input 
image to a binary image. In this study, the Otsu’s algorithm was 

used to find the optimal threshold T that minimizes the 
within-class variances. As a result, given an input image I and 
the threshold T, a binary image IB can be acquired using: 
 

   


 


otherwise

TyxIif
yxI B ,0

,,255
,

                    (1) 

 
Horizontal Projection: The image projection is a method for 

projecting source data to selected area to reduce the dimension 
of the source data, such that the data could be easily processed. 
Image projections can be implemented in either the horizontal 
or vertical directions, resulted in horizontal or vertical 
projections. Here, the horizontal projection was applied in our 
system to acquire the horizontally projection histogram as 
shown in Fig. 2. By projecting the musical score in Fig. 2 (a) 
horizontally, total number of pixels for each row could be 
determined in Fig. 2 (b). As shown, the five staff lines were 
associated with five obvious peak values in terms of number of 
pixels. 

 

 

(a) 
 

 

(b) 

Fig. 2 Binary musical score image and the corresponding horizontal 
projects 

 
Region Segmentation: The objective of the region 

segmentation was to identify and segment regions of stave from 
the original image such that each region of the staff could be 
processed independently.  

Based on the result given in Fig. 2, the staff line height HL, 
the staff line space SL, and the distribution of staff lines, could 
be obtained. An example is shown in Fig. 3. 

 

 

Fig. 3 An example of the staff line height HL and the staff line space SL. 
The height of the note head is approximately the same as the staff line 

space 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1812International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

According to the horizontal projections, the histogram 
represented the number of pixels for each row in the binary 
image. Because each staff contained exactly five horizontal 
staff lines, the peaks of the horizontal projections at the location 
of staff line represented the locations of the five staff lines. 
Therefore, the five staff lines could be obtained by 
back-projections of the five peaks in the histogram, such that 
the resulting image contains only the staff lines without any 
note heads (or other symbols). 

B. Image Preprocessing 

In image preprocessing, our objective was to extract or 
isolate the musical symbols to be independent regions from the 
staff by removing the staff lines in the image. However, during 
staff line removal processes, several musical notes (or other 
symbols) may be damaged if they are associated with weak 
structures (shapes). Therefore, our system incorporated the 
image preprocessing processes to retain the musical notes (or 
symbols), while removing the staff lines for further processes. 

Staff Line Filtering: In the musical score, musical symbols 
are recorded on the staff. As a result, musical symbols are 
connected with the staff lines in images. In this step, our 
objective was to retain the music notes (or symbols) in images, 
while removing the staff lines. After acquiring the Staff line 
space and height by horizontal projections, our system removed 
all the black pixels at each rows of staff lines. Because this 
process may damage the structure (shapes) of musical notes (or 
symbols), additional criterion was included. The staff line 
height HL was selected as the threshold and black pixels were 
removed only if the observed height was smaller than the staff 
line height. An example is shown in Fig. 4 (a). 

Morphological Processing: Although the aforementioned 
process was able to remove staff lines effectively, the structure 
(shapes) of the musical notes (or symbols) could be affected. 
The process of Morphological processing was used to retain the 
complete structure (shapes) of each musical note (or symbol). 

 

 

(a) 
 

 

(b) 

Fig. 4 An example of the image preprocessing: (a) result of staff line 
filtering; (b) result of morphological processing 

 
Closing processing is a technology of morphological 

processing that can be used to link the small gaps of structure 
and to improve the connectivity for regions in images. The 
morphological closing is defined by: 

 

EEIEI Θ)(                                 (2) 
 
where I is the input image and is E the structuring element. The 
image is first dilated (  is the dilation operation) and then 

eroded (Θ  is the erosion operation) with the structuring 
element. In our system, the morphological closing was applied, 
an example is shown in Fig. 4 (b). 

Connected Component Labeling: A region of connected 
pixels with an identical label was referred as a connected 
component. The objective of the connected component labeling 
was to assign a unique label to each connected component. An 
example is shown in Fig. 5. 

 

 

Fig. 5 An example of the connected component labeling is shown. 
After labeling, each connected component (region) is assigned a 

unique label 
 

Given a binary images with binary-1s (black pixels) and 
binary-0s (white pixels), we applied the connected component 
labeling to extract each connected component. Therefore, each 
musical notes (or symbols) could be identified and labeled. The 
seed filling algorithm for the connected component labeling is 
given by: 
1) Search each pixel in the image until the value of the current 

pixel P with the binary-1 value and has not been labeled 
yet; 

2) Select P as the seed pixel and assign a label L to P, then 
check each pixel that is adjacent to the seed pixel; 

3) If there is a pixel Q with the binary-1 value that is adjacent 
to the seed pixel, return to step 2 until there is no pixels 
with the binary-1 is found; 

4) Update the label and return to step 1 until all pixels in the 
image have been checked. 

C. Note Recognition 

Once the connected regions for the musical notes (or 
symbols) were identified and labeled, the final step was to 
recognize them. In our system, the processes were divided into 
two major recognition phases: (1) Note recognition; and (2) 
Accidental and rest recognition. 

In staff notations, a musical note can be split into three parts 
according to its structure: head, stem and tail, as shown in Fig. 6. 
The head (e.g., solid or not) is mainly used to determine the 
pitch by its position with respect to the staff lines; the tails is 
mainly used to determine the beat; the stem is used to connect 
both the head and the tail. Our system was designed to detect 
the note heads first, followed by the detection of stems and tails.  

Stem Filtering: A stem is used to connect the head and the 
tail in a musical note. With the different position of a musical 
note, the stem is either extended upward or downward form the 
head. In addition, a whole note has no stems. Because of the 
variety in structures (shapes), recognition of musical note could 
be difficult. To simplify the task, the Stem filtering was 
designed to remove stems for the musical notes, while retaining 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1813International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

the structure of the note heads. 
 

 

Fig. 6 An example of a typical musical note (i.e., eighth note): The 
structure consists of head, stem and tail 

 
In this step, vertical projections were applied and the 

histogram was acquired to determine the approximated location 
of each musical note. During vertical projections, peaks in the 
histogram were related to the location of the stems, despite 
there are different types of musical notes (e.g., 4th or 8th notes, 
etc.). Therefore, stems of each musical notes could be filtered 
(removed). 

Size Filtering: Although there are differences in 
representing musical notes by different publishers, the height of 
the note heads is generally the same as the staff line space. 
Therefore, the staff line space SL was used as the threshold to 
determine if a connected region actually represents the head of 
a musical note. 

Shape Filtering: The head of a musical note is generally an 
oval shape which is symmetrical with respect to its center. Here, 
we detected note heads by calculating the rate of symmetric for 
each connected component. 

In a symmetric connected component L, for any point P∈L, 
there exists a point PS ∈	L	such	that	P - PC = PC - PS, where PC 

is the center of the connected component L, as defined by: 
 

SCCS PPPPPLP  :!,                   (3) 

 
According to the equation, the rate of symmetry R can be 

obtained for each connected component, as given by (4) 
 

A

S

Sum

Sum
R                                       (4) 

 
where Sums is the total number of the symmetric pixels and 
SumA is the total number of all the pixels in the connected 
component. Using the rate of symmetry, we could therefore 
remove all the regions that were not likely to be the heads of 
musical notes. An example is shown in Fig. 7. 

 

 

Fig. 7 An example of the note recognition, in which all the heads of the 
musical notes are marked  

 
Pitch and Beat Analysis: The pitch of the musical note is 

defined by its position with respect to the staff lines. The 
difference of pitches among musical notes is based on the scale 
as a basic unit, and the distance of each scale is with half height 
of the staff line space. Hence, we defined the pitch of each note 
by calculating the distance between musical notes and the 
datum line. The datum line was defined as the position of the 
keynote, i.e., the position of middle C. 

 

Whole/Half  Note ?

Have Stem?

How Many Tails?

Yes

No

Whole Note

Half Note

Quarter Note

Eighth Note

Sixteenth Note

No

Yes

0

1

2

Input

 
Fig. 8 The classifier for the beat of a musical note: Each musical note can thus be classified based on the properties if the stem/tails exist 

 
The beat of a musical note represents the length of the note 

being played, and each note has its own beat. The beat of a 
musical note is represented by three parts: (1) The note is solid 

or not; (2) The note has a stem or not; and (3) How many tails 
do the note have. Based on these properties, our system 
incorporated a classifier for the beat of a musical note, as shown 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1814International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

in Fig. 8. Furthermore, a dot is often used to adjust the beat for 
the musical notes. The dot is meant to increase the beat of the 
musical note by half of its original beat. For example, a note 
with two beats will become three beats. The symbol of a dot in a 
music score is a round black spot, and is generally marked at 
the right side of the note head. The size of dots is smaller than 
the half size of heads and is disconnected with other symbols. 
Based on the dot property as described, our system was 
designed to incorporate additional process for the process of 
recognizing the dot associated with a note head. 

D.  Accidental and Rest Recognition 

Accidentals are the musical symbols used to modify the pitch 
of a musical note. The most common accidentals can be 
described as follow: (1) the sharp is used to raise the pitch of a 
musical note by a semitone; (2) the flat is used to reduce the 
pitch of a musical notes by a semitone; and (3) the natural is 
used to recover the pitch of a musical note to its natural key. 
The accidentals are typically recorded in two ways: (1) marked 
at the start of a staff represent a key signature; and (2) marked at 
the left of a note to adjust the pitch of the musical note.  

Rests are the musical symbols used to represent the pauses in 
music/song. Unlike musical notes, rests have no pitches so that 
the height of rests in a score is fixed. However, shapes of rests 
with different beats are relatively irregular than musical notes. 

To identify the accidentals and/or rests, the technique of 
template matching is used in our system. The technique was 
used to compare an unknown symbol with respect to known 
template images (i.e., template images for possible accidentals 
and/or rests) in the database to recognize the symbol. In our 
system, once a region (sub-image) containing a symbol was 
detected, the region (sub-image) was then normalized to the 
same size with the template image and the logical XOR 
operation was applied: 
 

     


 


otherwise

yxIyxIif
yxI CT

XOR ,255

,,,0
,           (5) 

 
where IT represent the template image, IC represent the 
sub-image containing a symbol, and IXOR represent the result 
image after the exclusive-OR operation. An example is shown 
in Fig. 9. 

 

 

(a) 

 

(b) 

 

(c) 

Fig. 9 An example of the template matching for the rest recognition: 
(a) sub-image of an unknown symbol; (b) template image of the 

crotchet rest; (c) resulting image after the exclusion-OR operation 
 
Fig. 10 shows an example for the recognition of accidentals 

and rests in a musical score. Using the template matching, our 
system was able to identify the accidentals and rests. However, 

our system failed to detect the sharp symbol which is connected 
with the tail of a musical note. 

 

 

(a) 
 

 

(b) 

Fig. 10 An example of the accidental and rest recognition: (a) input 
image; (b) result of the recognition. There is a sharp that is connected 
with the tail of a musical note, resulting in a recognition failure in our 

system  

III. RESULTS 

In this section, we present the research environment and 
recognition results using our system in several musical score 
images. 

A. Research Environment 

The system development was based on a personal computer: 
Pentium(R) Dual-Core E5200 2.5GHz with 2GB memory, and 
Microsoft Windows 7 operating system. The system software 
was developed using the Microsoft Visual Studio C/C++ 2010 
and the Intel Open Source Computer Vision Library (OpenCV) 
Version 2.4.8.  

To evaluate our system performance, a set of digital images 
with musical scores of various complexities were collected 
from the Internet.  

B. Result of Musical Score Recognition 

Table I summarizes the results of musical symbol detection 
and recognition of our system using five images of musical 
scores. The detection rate was evaluated with the probability 
when musical notes or symbols (including accidentals and rests) 
were correctly detected. Then, based on the detected notes or 
symbols, the recognition rate was evaluated with the 
probability when the musical notes or symbols were correctly 
recognized. 

 
TABLE I 

THE RESULTS OF MUSICAL SYMBOL DETECTION AND RECOGNITION 

 Detection Recognition 

 Detected / Total Rate Recognized / Detected Rate 

Image 1 42 / 42 100% 42 / 42 100(%) 

Image 2 62 / 62 100% 62 / 62 100(%) 

Image 3 74(1) / 74 97.3% 64 / 74 86.4(%) 

Image 4 85(4) / 88 87.5% 65 / 85 76.5(%) 

Image 5 89(1) / 92 96.7% 85 / 89 95.5(%) 

Total 382(6) / 388 96.3% 318 / 382 91.7(%) 

 
Recognition results of our system are shown in the following. 

Fig. 11 shows the recognition results for the musical score 
Twinkle, Twinkle, Little Star. All the musical notes, including 
the pitches and beats, were successfully detected and 
recognized. The detected musical notes are marked 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1815International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

accordingly. 
 

 

Fig. 11 Recognition results of the musical score Twinkle, Twinkle, 
Little Star 

 
Fig. 12 shows the recognition results for the musical score 

The Swallow. Although the musical score was more 
complicated, all the musical notes, including the pitches and 
beats, were successfully detected and recognized.  

 

 

Fig. 12 Recognition results of the musical score The Swallow 
 

Fig. 13 shows the recognition results for the musical score I 
Will Sing You. The original image was in JPEG compressed 
format. All the musical notes, accidentals, and rests were 
successfully detected and recognized, despite there was a few 
errors in the recognition of the pitches. 

 

 

Fig. 13 Recognition results of the musical score I Will Sing You 

Fig. 14 shows the recognition results for the musical score At 
This Moment. The quality was relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores. 

 

 

Fig. 14 Recognition results of the musical score At This Moment 
 

Fig. 15 shows the recognition results for the musical score 
My Herd. The quality was also relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores especially in beat 
recognition (most recognition failure occurred at dots).  

 

 

Fig. 15 Recognition results of the musical score My Herd 

IV. CONCLUSION 

In this study, we proposed an Automatic Music Score 
Recognition System Using Digital Image Processing. The 
technical approaches included: staff region segmentation, 
image preprocessing, note recognition and accidental and rest 
recognition. Our system was developed to automatically detect 
and recognize musical notes, accidentals and rests in printed 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1816International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

musical scores.  
The results showed that the detection and the recognition 

rates of our system were 96.3% and 91.7%, respectively. While 
the results were limited and could be affected by image quality, 
our system was shown to achieve effective detection and 
recognition for musical symbols, such as notes, accidentals, and 
rests. Ultimately, our system could be incorporated with a 
media player that could play music/songs with inputs of 
musical scores.  

While our system has been demonstrated with success for 
different types of musical scores, our system was still limited 
with respect to the complexities of some musical scores (e.g., 
chords or other complex symbols). Improvement of our 
systems is still required for such musical scores. 

At present, our system was evaluated using personal 
computers with inputs of digital images. The system could be 
further integrated in applications for smart-phones or other 
mobile devices with built-in digital cameras. In addition, this 
system could be also used as a learning tool for players (e.g., 
piano players, guitar players, etc.) to play the music/songs even 
though they may not be familiar with the music/songs. 

REFERENCES  
[1] N. Otsu, “A Threshold Selection Method form Gray-Level Histograms,” 

IEEE Transactions on Systems, pp. 62-66, 1979. 
[2] R.G. Casey and E. Lecolinet, “A Survey of Methods and Strategies in 

Character Segmentation,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 690-706, 1996. 

[3] Cheng-Lin Liu, M. Koga and H. Fujisawa, “Lexicon-Driven 
Segmentation and Recognition of Handwritten Character Strings for 
Japanese Address Reading,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 1425-1437, 2002. 

[4] M. Sotoodeh and F. Tajeripour, “Staff Detection and Removal Using 
Derivation and Connected Component Analysis,” IEEE 16th CSI 
International Symposium on Artificial Intelligence and Signal Processing 
(AISP), pp. 54-57, 2012. 

[5] Chen Genfang, Zhang Liyin, Zhang Wenjun and Wang Qiuqiu, 
“Detecting the Staff-lines of Musical Score with Hough Transform and 
Mathematical Morphology,” IEEE International Conference on 
Multimedia Technology (ICMT) , pp. 1-4, 2010. 

[6] A. Dutta, U. Pal, A. Fornes and J. Llados, “An Efficient Staff Removal 
Approach from Printed Musical Documents,” IEEE International 
Conference on Pattern Recognition (ICPR), pp.1965-1968, 2010. 

[7] JaeMyeong Yoo, GiHong Kim and Gueesang Lee, “Mask Matching for 
Low Resolution Musical Note Recognition,” IEEE International 
Symposium on Signal Processing and Information Technology, pp. 
223-226, 2008. 

[8] F.Toyama, K. Shioji and J. Miyamichi, “Symbol Recognition of Printed 
Piano Scores with Touching Symbols,” Pattern Recognition, ICPR 18th 

International Conference, pp. 480-483, 2006. 
[9] F.Rossant and I. Bloch, “Optical Music Recognition Based on a Fuzzy 

Modeling of Symbol Classes and Music Writing Rules,” Pattern 
Recognition Letters, vol.23, pp. 1129-1141, 2002. 

[10] K.T. Reed and J.R.Parker, “Automatic Computer Recognition of Printed 
Music,” in Proceedings of the ICPR, pp.803-807, 1996. 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1817International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


reading content from C:\Users\Asus\Desktop\Bee\10005799 (2).pdf


 

 
Abstract—Music has always been an integral part of human’s 

daily lives. But, for the most people, reading musical score and turning 
it into melody is not easy. This study aims to develop an Automatic 
music score recognition system using digital image processing, which 
can be used to read and analyze musical score images automatically. 
The technical approaches included: (1) staff region segmentation; (2) 
image preprocessing; (3) note recognition; and (4) accidental and rest 
recognition. Digital image processing techniques (e.g., horizontal 
/vertical projections, connected component labeling, morphological 
processing, template matching, etc.) were applied according to 
musical notes, accidents, and rests in staff notations. Preliminary 
results showed that our system could achieve detection and 
recognition rates of 96.3% and 91.7%, respectively. In conclusion, we 
presented an effective automated musical score recognition system 
that could be integrated in a system with a media player to play 
music/songs given input images of musical score. Ultimately, this 
system could also be incorporated in applications for mobile devices as 
a learning tool, such that a music player could learn to play 
music/songs. 
 

Keywords—Connected component labeling, image processing, 
morphological processing, optical musical recognition.  

I. INTRODUCTION 

ITH the advance of image processing and computer 
vision techniques in recent years, the techniques have 

been integrated in human’s daily lives. Typical image 
processing and computer vision applications include document 
processing, smartphone applications, video surveillance 
systems, multimedia systems, and/or video games, etc.  

In image processing techniques, the Optical Character 
Recognition (OCR) is an important technique that has been 
widely used in handwriting inputs, license plate recognition, 
and augmented reality applications. The objective of the OCR 
technique is to allow the computer to analyze the text images, 
and then convert to texts (typically the ASCII codes) which 
computer can handle. For example, [1] proposed a method to 
calculate the appropriate threshold for converting gray-level 
images to binary images automatically. Casey and Lecolinet [2] 
proposed a character segmentation system based on connected 
component analysis and feature extraction, which were used to 
segment and recognize each character from document images. 

 
Yuan-Hsiang Chang, Ph.D. is with the Information and Computer 

Engineering Department, Chung-Yuan Christian University, Chung Li, Taiwan, 
R.O.C. (phone: 886-3-265-4713; fax: 886-3-265-4799; e-mail: author@ 
boulder.nist.gov).  

Zhong-Xian Peng, is a graduate student with the. Information and Computer 
Engineering Department, Chung-Yuan Christian University, Chung Li, Tawian, 
R.O.C 

Li-Der Jeng is with the Electronic Engineering Department, Chung-Yuan 
Christian University, Chung Li, Taiwan 

Liu et al. [3] proposed a handwritten character strings 
recognition system for address reading, in which characters 
were segmented using the connected component analysis. Each 
character was then recognized using a beam search algorithm 
and a character classifier. 

In addition to the OCR technique, pattern recognition 
techniques are also drawing attention of many researchers. 
Patterns (or symbols) are commonly seen in documents and/or 
other scenarios in which text information is not used for the 
representation (such as music notes, traffic signs, gestures, etc.). 
However, recognition of such patterns (or symbols) may 
require expertise to achieve effective representation and/or 
communication (e.g., music notes in a music score, etc.). 

Musical score is a form to record music by symbols which 
may include the pitch and tempo information about the music 
and/or songs. With the development of pattern recognition 
techniques, musical score recognition has also become a 
research topic lately. For example, [4] proposed a method to 
detect and remove staff lines using derivation and connected 
component analysis. Chen et al. [5] proposed a conventional 
architecture of Optical Music Recognition (OMR) using the 
staff-lines detection as the key stage. They explored two 
methods, namely the Hough transform and Mathematical 
Morphology, for detecting all staff-lines of an image. Dutta et 
al. [6] proposed a different method to detect and remove staff 
lines from musical documents. The methodology considered a 
staff line segment as a horizontal linkage of vertical black runs 
with uniform height. They also used the neighboring properties 
of a staff line segment to validate it as a true segment. Yoo et al. 
[7] proposed a system to recognize musical scores in low 
resolution images captured by the digital camera of a mobile 
phone. They presented a mask based approach to cope with 
incomplete information in the low resolution images. Toyama 
et al. [8] proposed a score recognition method which could be 
applicable to the complex music scores. Symbol candidates 
were detected by template matching, and then selected by 
considering the relative positions and mutual connections. 
Rossant and Bloch [9] proposed an optical music recognition 
system based on a fuzzy modeling of symbol classes and music 
writing rules. The objective was to disambiguate the 
recognition hypotheses output by the individual symbol 
analysis, followed by the fuzzy modeling to account for 
imprecision in symbol detection. Parker [10] implemented a 
complete optical music recognition system, called Lemon. 
Their system included the techniques, i.e., staff line detection, 
text segmentation, line detection, symbol recognition, note 
head recognition, and semantic interpretation. 

Automatic Music Score Recognition System Using 
Digital Image Processing 
Yuan-Hsiang Chang, Zhong-Xian Peng, Li-Der Jeng. 

W 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1811International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

II.  METHOD 

In this study, we present an “Automatic Music Score 
Recognition System Using Digital Image Processing”, which 
was aimed to automatically recognize musical scores.  

Several system hypotheses can be described as follows: 
 The musical score is a printed document (i.e., black 

musical notes or symbols in white background). 
 The musical score is a scanned document in an upright 

position, therefore no perspective distortions are observed. 
 The image is with sufficient resolution and in good quality. 

Fig. 1 shows the flow chart of our system. The processes 
include: Image Analysis and Segmentation, Image 
Preprocessing, Note recognition, and Accidental and Rest 
Recognition. 

 

Note Recognition

Stem Filtering

Size Filtering

Shape Filtering

Pitch And Beat Analysis

Output

Staff Region Segmentation

Binary Transform

Horizontal Projection

Region Segmentation

Image Preprocessing

Accidental and Rest Recognition

Note Removal

Template ImageTemplate Matching

Source
Image

Staff Line Filtering

Morphological Processing

Connected Component Labeling

 

Fig. 1 System flow chart of the Automatic Music Score Recognition 
System Using Digital Image Processing  

A. Staff Region Segmentation 

A page of musical score consist of number of row stave, with 
a top-down order when playing. A staff consists of five staff 
lines, while notes are recorded on staff lines with respect to the 
height of each line to determine its pitch. Therefore, the first 
step of our system was to segment sub-regions for each staff. 
The processes included: Binary Transform, Horizontal 
Projection, and Region Segmentation. 

Binary Transform was simply used to convert the input 
image to a binary image. In this study, the Otsu’s algorithm was 

used to find the optimal threshold T that minimizes the 
within-class variances. As a result, given an input image I and 
the threshold T, a binary image IB can be acquired using: 
 

   


 


otherwise

TyxIif
yxI B ,0

,,255
,

                    (1) 

 
Horizontal Projection: The image projection is a method for 

projecting source data to selected area to reduce the dimension 
of the source data, such that the data could be easily processed. 
Image projections can be implemented in either the horizontal 
or vertical directions, resulted in horizontal or vertical 
projections. Here, the horizontal projection was applied in our 
system to acquire the horizontally projection histogram as 
shown in Fig. 2. By projecting the musical score in Fig. 2 (a) 
horizontally, total number of pixels for each row could be 
determined in Fig. 2 (b). As shown, the five staff lines were 
associated with five obvious peak values in terms of number of 
pixels. 

 

 

(a) 
 

 

(b) 

Fig. 2 Binary musical score image and the corresponding horizontal 
projects 

 
Region Segmentation: The objective of the region 

segmentation was to identify and segment regions of stave from 
the original image such that each region of the staff could be 
processed independently.  

Based on the result given in Fig. 2, the staff line height HL, 
the staff line space SL, and the distribution of staff lines, could 
be obtained. An example is shown in Fig. 3. 

 

 

Fig. 3 An example of the staff line height HL and the staff line space SL. 
The height of the note head is approximately the same as the staff line 

space 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1812International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

According to the horizontal projections, the histogram 
represented the number of pixels for each row in the binary 
image. Because each staff contained exactly five horizontal 
staff lines, the peaks of the horizontal projections at the location 
of staff line represented the locations of the five staff lines. 
Therefore, the five staff lines could be obtained by 
back-projections of the five peaks in the histogram, such that 
the resulting image contains only the staff lines without any 
note heads (or other symbols). 

B. Image Preprocessing 

In image preprocessing, our objective was to extract or 
isolate the musical symbols to be independent regions from the 
staff by removing the staff lines in the image. However, during 
staff line removal processes, several musical notes (or other 
symbols) may be damaged if they are associated with weak 
structures (shapes). Therefore, our system incorporated the 
image preprocessing processes to retain the musical notes (or 
symbols), while removing the staff lines for further processes. 

Staff Line Filtering: In the musical score, musical symbols 
are recorded on the staff. As a result, musical symbols are 
connected with the staff lines in images. In this step, our 
objective was to retain the music notes (or symbols) in images, 
while removing the staff lines. After acquiring the Staff line 
space and height by horizontal projections, our system removed 
all the black pixels at each rows of staff lines. Because this 
process may damage the structure (shapes) of musical notes (or 
symbols), additional criterion was included. The staff line 
height HL was selected as the threshold and black pixels were 
removed only if the observed height was smaller than the staff 
line height. An example is shown in Fig. 4 (a). 

Morphological Processing: Although the aforementioned 
process was able to remove staff lines effectively, the structure 
(shapes) of the musical notes (or symbols) could be affected. 
The process of Morphological processing was used to retain the 
complete structure (shapes) of each musical note (or symbol). 

 

 

(a) 
 

 

(b) 

Fig. 4 An example of the image preprocessing: (a) result of staff line 
filtering; (b) result of morphological processing 

 
Closing processing is a technology of morphological 

processing that can be used to link the small gaps of structure 
and to improve the connectivity for regions in images. The 
morphological closing is defined by: 

 

EEIEI Θ)(                                 (2) 
 
where I is the input image and is E the structuring element. The 
image is first dilated (  is the dilation operation) and then 

eroded (Θ  is the erosion operation) with the structuring 
element. In our system, the morphological closing was applied, 
an example is shown in Fig. 4 (b). 

Connected Component Labeling: A region of connected 
pixels with an identical label was referred as a connected 
component. The objective of the connected component labeling 
was to assign a unique label to each connected component. An 
example is shown in Fig. 5. 

 

 

Fig. 5 An example of the connected component labeling is shown. 
After labeling, each connected component (region) is assigned a 

unique label 
 

Given a binary images with binary-1s (black pixels) and 
binary-0s (white pixels), we applied the connected component 
labeling to extract each connected component. Therefore, each 
musical notes (or symbols) could be identified and labeled. The 
seed filling algorithm for the connected component labeling is 
given by: 
1) Search each pixel in the image until the value of the current 

pixel P with the binary-1 value and has not been labeled 
yet; 

2) Select P as the seed pixel and assign a label L to P, then 
check each pixel that is adjacent to the seed pixel; 

3) If there is a pixel Q with the binary-1 value that is adjacent 
to the seed pixel, return to step 2 until there is no pixels 
with the binary-1 is found; 

4) Update the label and return to step 1 until all pixels in the 
image have been checked. 

C. Note Recognition 

Once the connected regions for the musical notes (or 
symbols) were identified and labeled, the final step was to 
recognize them. In our system, the processes were divided into 
two major recognition phases: (1) Note recognition; and (2) 
Accidental and rest recognition. 

In staff notations, a musical note can be split into three parts 
according to its structure: head, stem and tail, as shown in Fig. 6. 
The head (e.g., solid or not) is mainly used to determine the 
pitch by its position with respect to the staff lines; the tails is 
mainly used to determine the beat; the stem is used to connect 
both the head and the tail. Our system was designed to detect 
the note heads first, followed by the detection of stems and tails.  

Stem Filtering: A stem is used to connect the head and the 
tail in a musical note. With the different position of a musical 
note, the stem is either extended upward or downward form the 
head. In addition, a whole note has no stems. Because of the 
variety in structures (shapes), recognition of musical note could 
be difficult. To simplify the task, the Stem filtering was 
designed to remove stems for the musical notes, while retaining 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1813International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

the structure of the note heads. 
 

 

Fig. 6 An example of a typical musical note (i.e., eighth note): The 
structure consists of head, stem and tail 

 
In this step, vertical projections were applied and the 

histogram was acquired to determine the approximated location 
of each musical note. During vertical projections, peaks in the 
histogram were related to the location of the stems, despite 
there are different types of musical notes (e.g., 4th or 8th notes, 
etc.). Therefore, stems of each musical notes could be filtered 
(removed). 

Size Filtering: Although there are differences in 
representing musical notes by different publishers, the height of 
the note heads is generally the same as the staff line space. 
Therefore, the staff line space SL was used as the threshold to 
determine if a connected region actually represents the head of 
a musical note. 

Shape Filtering: The head of a musical note is generally an 
oval shape which is symmetrical with respect to its center. Here, 
we detected note heads by calculating the rate of symmetric for 
each connected component. 

In a symmetric connected component L, for any point P∈L, 
there exists a point PS ∈	L	such	that	P - PC = PC - PS, where PC 

is the center of the connected component L, as defined by: 
 

SCCS PPPPPLP  :!,                   (3) 

 
According to the equation, the rate of symmetry R can be 

obtained for each connected component, as given by (4) 
 

A

S

Sum

Sum
R                                       (4) 

 
where Sums is the total number of the symmetric pixels and 
SumA is the total number of all the pixels in the connected 
component. Using the rate of symmetry, we could therefore 
remove all the regions that were not likely to be the heads of 
musical notes. An example is shown in Fig. 7. 

 

 

Fig. 7 An example of the note recognition, in which all the heads of the 
musical notes are marked  

 
Pitch and Beat Analysis: The pitch of the musical note is 

defined by its position with respect to the staff lines. The 
difference of pitches among musical notes is based on the scale 
as a basic unit, and the distance of each scale is with half height 
of the staff line space. Hence, we defined the pitch of each note 
by calculating the distance between musical notes and the 
datum line. The datum line was defined as the position of the 
keynote, i.e., the position of middle C. 

 

Whole/Half  Note ?

Have Stem?

How Many Tails?

Yes

No

Whole Note

Half Note

Quarter Note

Eighth Note

Sixteenth Note

No

Yes

0

1

2

Input

 
Fig. 8 The classifier for the beat of a musical note: Each musical note can thus be classified based on the properties if the stem/tails exist 

 
The beat of a musical note represents the length of the note 

being played, and each note has its own beat. The beat of a 
musical note is represented by three parts: (1) The note is solid 

or not; (2) The note has a stem or not; and (3) How many tails 
do the note have. Based on these properties, our system 
incorporated a classifier for the beat of a musical note, as shown 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1814International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

in Fig. 8. Furthermore, a dot is often used to adjust the beat for 
the musical notes. The dot is meant to increase the beat of the 
musical note by half of its original beat. For example, a note 
with two beats will become three beats. The symbol of a dot in a 
music score is a round black spot, and is generally marked at 
the right side of the note head. The size of dots is smaller than 
the half size of heads and is disconnected with other symbols. 
Based on the dot property as described, our system was 
designed to incorporate additional process for the process of 
recognizing the dot associated with a note head. 

D.  Accidental and Rest Recognition 

Accidentals are the musical symbols used to modify the pitch 
of a musical note. The most common accidentals can be 
described as follow: (1) the sharp is used to raise the pitch of a 
musical note by a semitone; (2) the flat is used to reduce the 
pitch of a musical notes by a semitone; and (3) the natural is 
used to recover the pitch of a musical note to its natural key. 
The accidentals are typically recorded in two ways: (1) marked 
at the start of a staff represent a key signature; and (2) marked at 
the left of a note to adjust the pitch of the musical note.  

Rests are the musical symbols used to represent the pauses in 
music/song. Unlike musical notes, rests have no pitches so that 
the height of rests in a score is fixed. However, shapes of rests 
with different beats are relatively irregular than musical notes. 

To identify the accidentals and/or rests, the technique of 
template matching is used in our system. The technique was 
used to compare an unknown symbol with respect to known 
template images (i.e., template images for possible accidentals 
and/or rests) in the database to recognize the symbol. In our 
system, once a region (sub-image) containing a symbol was 
detected, the region (sub-image) was then normalized to the 
same size with the template image and the logical XOR 
operation was applied: 
 

     


 


otherwise

yxIyxIif
yxI CT

XOR ,255

,,,0
,           (5) 

 
where IT represent the template image, IC represent the 
sub-image containing a symbol, and IXOR represent the result 
image after the exclusive-OR operation. An example is shown 
in Fig. 9. 

 

 

(a) 

 

(b) 

 

(c) 

Fig. 9 An example of the template matching for the rest recognition: 
(a) sub-image of an unknown symbol; (b) template image of the 

crotchet rest; (c) resulting image after the exclusion-OR operation 
 
Fig. 10 shows an example for the recognition of accidentals 

and rests in a musical score. Using the template matching, our 
system was able to identify the accidentals and rests. However, 

our system failed to detect the sharp symbol which is connected 
with the tail of a musical note. 

 

 

(a) 
 

 

(b) 

Fig. 10 An example of the accidental and rest recognition: (a) input 
image; (b) result of the recognition. There is a sharp that is connected 
with the tail of a musical note, resulting in a recognition failure in our 

system  

III. RESULTS 

In this section, we present the research environment and 
recognition results using our system in several musical score 
images. 

A. Research Environment 

The system development was based on a personal computer: 
Pentium(R) Dual-Core E5200 2.5GHz with 2GB memory, and 
Microsoft Windows 7 operating system. The system software 
was developed using the Microsoft Visual Studio C/C++ 2010 
and the Intel Open Source Computer Vision Library (OpenCV) 
Version 2.4.8.  

To evaluate our system performance, a set of digital images 
with musical scores of various complexities were collected 
from the Internet.  

B. Result of Musical Score Recognition 

Table I summarizes the results of musical symbol detection 
and recognition of our system using five images of musical 
scores. The detection rate was evaluated with the probability 
when musical notes or symbols (including accidentals and rests) 
were correctly detected. Then, based on the detected notes or 
symbols, the recognition rate was evaluated with the 
probability when the musical notes or symbols were correctly 
recognized. 

 
TABLE I 

THE RESULTS OF MUSICAL SYMBOL DETECTION AND RECOGNITION 

 Detection Recognition 

 Detected / Total Rate Recognized / Detected Rate 

Image 1 42 / 42 100% 42 / 42 100(%) 

Image 2 62 / 62 100% 62 / 62 100(%) 

Image 3 74(1) / 74 97.3% 64 / 74 86.4(%) 

Image 4 85(4) / 88 87.5% 65 / 85 76.5(%) 

Image 5 89(1) / 92 96.7% 85 / 89 95.5(%) 

Total 382(6) / 388 96.3% 318 / 382 91.7(%) 

 
Recognition results of our system are shown in the following. 

Fig. 11 shows the recognition results for the musical score 
Twinkle, Twinkle, Little Star. All the musical notes, including 
the pitches and beats, were successfully detected and 
recognized. The detected musical notes are marked 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1815International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

accordingly. 
 

 

Fig. 11 Recognition results of the musical score Twinkle, Twinkle, 
Little Star 

 
Fig. 12 shows the recognition results for the musical score 

The Swallow. Although the musical score was more 
complicated, all the musical notes, including the pitches and 
beats, were successfully detected and recognized.  

 

 

Fig. 12 Recognition results of the musical score The Swallow 
 

Fig. 13 shows the recognition results for the musical score I 
Will Sing You. The original image was in JPEG compressed 
format. All the musical notes, accidentals, and rests were 
successfully detected and recognized, despite there was a few 
errors in the recognition of the pitches. 

 

 

Fig. 13 Recognition results of the musical score I Will Sing You 

Fig. 14 shows the recognition results for the musical score At 
This Moment. The quality was relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores. 

 

 

Fig. 14 Recognition results of the musical score At This Moment 
 

Fig. 15 shows the recognition results for the musical score 
My Herd. The quality was also relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores especially in beat 
recognition (most recognition failure occurred at dots).  

 

 

Fig. 15 Recognition results of the musical score My Herd 

IV. CONCLUSION 

In this study, we proposed an Automatic Music Score 
Recognition System Using Digital Image Processing. The 
technical approaches included: staff region segmentation, 
image preprocessing, note recognition and accidental and rest 
recognition. Our system was developed to automatically detect 
and recognize musical notes, accidentals and rests in printed 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1816International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

musical scores.  
The results showed that the detection and the recognition 

rates of our system were 96.3% and 91.7%, respectively. While 
the results were limited and could be affected by image quality, 
our system was shown to achieve effective detection and 
recognition for musical symbols, such as notes, accidentals, and 
rests. Ultimately, our system could be incorporated with a 
media player that could play music/songs with inputs of 
musical scores.  

While our system has been demonstrated with success for 
different types of musical scores, our system was still limited 
with respect to the complexities of some musical scores (e.g., 
chords or other complex symbols). Improvement of our 
systems is still required for such musical scores. 

At present, our system was evaluated using personal 
computers with inputs of digital images. The system could be 
further integrated in applications for smart-phones or other 
mobile devices with built-in digital cameras. In addition, this 
system could be also used as a learning tool for players (e.g., 
piano players, guitar players, etc.) to play the music/songs even 
though they may not be familiar with the music/songs. 

REFERENCES  
[1] N. Otsu, “A Threshold Selection Method form Gray-Level Histograms,” 

IEEE Transactions on Systems, pp. 62-66, 1979. 
[2] R.G. Casey and E. Lecolinet, “A Survey of Methods and Strategies in 

Character Segmentation,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 690-706, 1996. 

[3] Cheng-Lin Liu, M. Koga and H. Fujisawa, “Lexicon-Driven 
Segmentation and Recognition of Handwritten Character Strings for 
Japanese Address Reading,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 1425-1437, 2002. 

[4] M. Sotoodeh and F. Tajeripour, “Staff Detection and Removal Using 
Derivation and Connected Component Analysis,” IEEE 16th CSI 
International Symposium on Artificial Intelligence and Signal Processing 
(AISP), pp. 54-57, 2012. 

[5] Chen Genfang, Zhang Liyin, Zhang Wenjun and Wang Qiuqiu, 
“Detecting the Staff-lines of Musical Score with Hough Transform and 
Mathematical Morphology,” IEEE International Conference on 
Multimedia Technology (ICMT) , pp. 1-4, 2010. 

[6] A. Dutta, U. Pal, A. Fornes and J. Llados, “An Efficient Staff Removal 
Approach from Printed Musical Documents,” IEEE International 
Conference on Pattern Recognition (ICPR), pp.1965-1968, 2010. 

[7] JaeMyeong Yoo, GiHong Kim and Gueesang Lee, “Mask Matching for 
Low Resolution Musical Note Recognition,” IEEE International 
Symposium on Signal Processing and Information Technology, pp. 
223-226, 2008. 

[8] F.Toyama, K. Shioji and J. Miyamichi, “Symbol Recognition of Printed 
Piano Scores with Touching Symbols,” Pattern Recognition, ICPR 18th 

International Conference, pp. 480-483, 2006. 
[9] F.Rossant and I. Bloch, “Optical Music Recognition Based on a Fuzzy 

Modeling of Symbol Classes and Music Writing Rules,” Pattern 
Recognition Letters, vol.23, pp. 1129-1141, 2002. 

[10] K.T. Reed and J.R.Parker, “Automatic Computer Recognition of Printed 
Music,” in Proceedings of the ICPR, pp.803-807, 1996. 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1817International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


reading content from C:\Users\Asus\Desktop\Bee\10005799 (3).pdf


 

 
Abstract—Music has always been an integral part of human’s 

daily lives. But, for the most people, reading musical score and turning 
it into melody is not easy. This study aims to develop an Automatic 
music score recognition system using digital image processing, which 
can be used to read and analyze musical score images automatically. 
The technical approaches included: (1) staff region segmentation; (2) 
image preprocessing; (3) note recognition; and (4) accidental and rest 
recognition. Digital image processing techniques (e.g., horizontal 
/vertical projections, connected component labeling, morphological 
processing, template matching, etc.) were applied according to 
musical notes, accidents, and rests in staff notations. Preliminary 
results showed that our system could achieve detection and 
recognition rates of 96.3% and 91.7%, respectively. In conclusion, we 
presented an effective automated musical score recognition system 
that could be integrated in a system with a media player to play 
music/songs given input images of musical score. Ultimately, this 
system could also be incorporated in applications for mobile devices as 
a learning tool, such that a music player could learn to play 
music/songs. 
 

Keywords—Connected component labeling, image processing, 
morphological processing, optical musical recognition.  

I. INTRODUCTION 

ITH the advance of image processing and computer 
vision techniques in recent years, the techniques have 

been integrated in human’s daily lives. Typical image 
processing and computer vision applications include document 
processing, smartphone applications, video surveillance 
systems, multimedia systems, and/or video games, etc.  

In image processing techniques, the Optical Character 
Recognition (OCR) is an important technique that has been 
widely used in handwriting inputs, license plate recognition, 
and augmented reality applications. The objective of the OCR 
technique is to allow the computer to analyze the text images, 
and then convert to texts (typically the ASCII codes) which 
computer can handle. For example, [1] proposed a method to 
calculate the appropriate threshold for converting gray-level 
images to binary images automatically. Casey and Lecolinet [2] 
proposed a character segmentation system based on connected 
component analysis and feature extraction, which were used to 
segment and recognize each character from document images. 

 
Yuan-Hsiang Chang, Ph.D. is with the Information and Computer 

Engineering Department, Chung-Yuan Christian University, Chung Li, Taiwan, 
R.O.C. (phone: 886-3-265-4713; fax: 886-3-265-4799; e-mail: author@ 
boulder.nist.gov).  

Zhong-Xian Peng, is a graduate student with the. Information and Computer 
Engineering Department, Chung-Yuan Christian University, Chung Li, Tawian, 
R.O.C 

Li-Der Jeng is with the Electronic Engineering Department, Chung-Yuan 
Christian University, Chung Li, Taiwan 

Liu et al. [3] proposed a handwritten character strings 
recognition system for address reading, in which characters 
were segmented using the connected component analysis. Each 
character was then recognized using a beam search algorithm 
and a character classifier. 

In addition to the OCR technique, pattern recognition 
techniques are also drawing attention of many researchers. 
Patterns (or symbols) are commonly seen in documents and/or 
other scenarios in which text information is not used for the 
representation (such as music notes, traffic signs, gestures, etc.). 
However, recognition of such patterns (or symbols) may 
require expertise to achieve effective representation and/or 
communication (e.g., music notes in a music score, etc.). 

Musical score is a form to record music by symbols which 
may include the pitch and tempo information about the music 
and/or songs. With the development of pattern recognition 
techniques, musical score recognition has also become a 
research topic lately. For example, [4] proposed a method to 
detect and remove staff lines using derivation and connected 
component analysis. Chen et al. [5] proposed a conventional 
architecture of Optical Music Recognition (OMR) using the 
staff-lines detection as the key stage. They explored two 
methods, namely the Hough transform and Mathematical 
Morphology, for detecting all staff-lines of an image. Dutta et 
al. [6] proposed a different method to detect and remove staff 
lines from musical documents. The methodology considered a 
staff line segment as a horizontal linkage of vertical black runs 
with uniform height. They also used the neighboring properties 
of a staff line segment to validate it as a true segment. Yoo et al. 
[7] proposed a system to recognize musical scores in low 
resolution images captured by the digital camera of a mobile 
phone. They presented a mask based approach to cope with 
incomplete information in the low resolution images. Toyama 
et al. [8] proposed a score recognition method which could be 
applicable to the complex music scores. Symbol candidates 
were detected by template matching, and then selected by 
considering the relative positions and mutual connections. 
Rossant and Bloch [9] proposed an optical music recognition 
system based on a fuzzy modeling of symbol classes and music 
writing rules. The objective was to disambiguate the 
recognition hypotheses output by the individual symbol 
analysis, followed by the fuzzy modeling to account for 
imprecision in symbol detection. Parker [10] implemented a 
complete optical music recognition system, called Lemon. 
Their system included the techniques, i.e., staff line detection, 
text segmentation, line detection, symbol recognition, note 
head recognition, and semantic interpretation. 

Automatic Music Score Recognition System Using 
Digital Image Processing 
Yuan-Hsiang Chang, Zhong-Xian Peng, Li-Der Jeng. 

W 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1811International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

II.  METHOD 

In this study, we present an “Automatic Music Score 
Recognition System Using Digital Image Processing”, which 
was aimed to automatically recognize musical scores.  

Several system hypotheses can be described as follows: 
 The musical score is a printed document (i.e., black 

musical notes or symbols in white background). 
 The musical score is a scanned document in an upright 

position, therefore no perspective distortions are observed. 
 The image is with sufficient resolution and in good quality. 

Fig. 1 shows the flow chart of our system. The processes 
include: Image Analysis and Segmentation, Image 
Preprocessing, Note recognition, and Accidental and Rest 
Recognition. 

 

Note Recognition

Stem Filtering

Size Filtering

Shape Filtering

Pitch And Beat Analysis

Output

Staff Region Segmentation

Binary Transform

Horizontal Projection

Region Segmentation

Image Preprocessing

Accidental and Rest Recognition

Note Removal

Template ImageTemplate Matching

Source
Image

Staff Line Filtering

Morphological Processing

Connected Component Labeling

 

Fig. 1 System flow chart of the Automatic Music Score Recognition 
System Using Digital Image Processing  

A. Staff Region Segmentation 

A page of musical score consist of number of row stave, with 
a top-down order when playing. A staff consists of five staff 
lines, while notes are recorded on staff lines with respect to the 
height of each line to determine its pitch. Therefore, the first 
step of our system was to segment sub-regions for each staff. 
The processes included: Binary Transform, Horizontal 
Projection, and Region Segmentation. 

Binary Transform was simply used to convert the input 
image to a binary image. In this study, the Otsu’s algorithm was 

used to find the optimal threshold T that minimizes the 
within-class variances. As a result, given an input image I and 
the threshold T, a binary image IB can be acquired using: 
 

   


 


otherwise

TyxIif
yxI B ,0

,,255
,

                    (1) 

 
Horizontal Projection: The image projection is a method for 

projecting source data to selected area to reduce the dimension 
of the source data, such that the data could be easily processed. 
Image projections can be implemented in either the horizontal 
or vertical directions, resulted in horizontal or vertical 
projections. Here, the horizontal projection was applied in our 
system to acquire the horizontally projection histogram as 
shown in Fig. 2. By projecting the musical score in Fig. 2 (a) 
horizontally, total number of pixels for each row could be 
determined in Fig. 2 (b). As shown, the five staff lines were 
associated with five obvious peak values in terms of number of 
pixels. 

 

 

(a) 
 

 

(b) 

Fig. 2 Binary musical score image and the corresponding horizontal 
projects 

 
Region Segmentation: The objective of the region 

segmentation was to identify and segment regions of stave from 
the original image such that each region of the staff could be 
processed independently.  

Based on the result given in Fig. 2, the staff line height HL, 
the staff line space SL, and the distribution of staff lines, could 
be obtained. An example is shown in Fig. 3. 

 

 

Fig. 3 An example of the staff line height HL and the staff line space SL. 
The height of the note head is approximately the same as the staff line 

space 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1812International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

According to the horizontal projections, the histogram 
represented the number of pixels for each row in the binary 
image. Because each staff contained exactly five horizontal 
staff lines, the peaks of the horizontal projections at the location 
of staff line represented the locations of the five staff lines. 
Therefore, the five staff lines could be obtained by 
back-projections of the five peaks in the histogram, such that 
the resulting image contains only the staff lines without any 
note heads (or other symbols). 

B. Image Preprocessing 

In image preprocessing, our objective was to extract or 
isolate the musical symbols to be independent regions from the 
staff by removing the staff lines in the image. However, during 
staff line removal processes, several musical notes (or other 
symbols) may be damaged if they are associated with weak 
structures (shapes). Therefore, our system incorporated the 
image preprocessing processes to retain the musical notes (or 
symbols), while removing the staff lines for further processes. 

Staff Line Filtering: In the musical score, musical symbols 
are recorded on the staff. As a result, musical symbols are 
connected with the staff lines in images. In this step, our 
objective was to retain the music notes (or symbols) in images, 
while removing the staff lines. After acquiring the Staff line 
space and height by horizontal projections, our system removed 
all the black pixels at each rows of staff lines. Because this 
process may damage the structure (shapes) of musical notes (or 
symbols), additional criterion was included. The staff line 
height HL was selected as the threshold and black pixels were 
removed only if the observed height was smaller than the staff 
line height. An example is shown in Fig. 4 (a). 

Morphological Processing: Although the aforementioned 
process was able to remove staff lines effectively, the structure 
(shapes) of the musical notes (or symbols) could be affected. 
The process of Morphological processing was used to retain the 
complete structure (shapes) of each musical note (or symbol). 

 

 

(a) 
 

 

(b) 

Fig. 4 An example of the image preprocessing: (a) result of staff line 
filtering; (b) result of morphological processing 

 
Closing processing is a technology of morphological 

processing that can be used to link the small gaps of structure 
and to improve the connectivity for regions in images. The 
morphological closing is defined by: 

 

EEIEI Θ)(                                 (2) 
 
where I is the input image and is E the structuring element. The 
image is first dilated (  is the dilation operation) and then 

eroded (Θ  is the erosion operation) with the structuring 
element. In our system, the morphological closing was applied, 
an example is shown in Fig. 4 (b). 

Connected Component Labeling: A region of connected 
pixels with an identical label was referred as a connected 
component. The objective of the connected component labeling 
was to assign a unique label to each connected component. An 
example is shown in Fig. 5. 

 

 

Fig. 5 An example of the connected component labeling is shown. 
After labeling, each connected component (region) is assigned a 

unique label 
 

Given a binary images with binary-1s (black pixels) and 
binary-0s (white pixels), we applied the connected component 
labeling to extract each connected component. Therefore, each 
musical notes (or symbols) could be identified and labeled. The 
seed filling algorithm for the connected component labeling is 
given by: 
1) Search each pixel in the image until the value of the current 

pixel P with the binary-1 value and has not been labeled 
yet; 

2) Select P as the seed pixel and assign a label L to P, then 
check each pixel that is adjacent to the seed pixel; 

3) If there is a pixel Q with the binary-1 value that is adjacent 
to the seed pixel, return to step 2 until there is no pixels 
with the binary-1 is found; 

4) Update the label and return to step 1 until all pixels in the 
image have been checked. 

C. Note Recognition 

Once the connected regions for the musical notes (or 
symbols) were identified and labeled, the final step was to 
recognize them. In our system, the processes were divided into 
two major recognition phases: (1) Note recognition; and (2) 
Accidental and rest recognition. 

In staff notations, a musical note can be split into three parts 
according to its structure: head, stem and tail, as shown in Fig. 6. 
The head (e.g., solid or not) is mainly used to determine the 
pitch by its position with respect to the staff lines; the tails is 
mainly used to determine the beat; the stem is used to connect 
both the head and the tail. Our system was designed to detect 
the note heads first, followed by the detection of stems and tails.  

Stem Filtering: A stem is used to connect the head and the 
tail in a musical note. With the different position of a musical 
note, the stem is either extended upward or downward form the 
head. In addition, a whole note has no stems. Because of the 
variety in structures (shapes), recognition of musical note could 
be difficult. To simplify the task, the Stem filtering was 
designed to remove stems for the musical notes, while retaining 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1813International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

the structure of the note heads. 
 

 

Fig. 6 An example of a typical musical note (i.e., eighth note): The 
structure consists of head, stem and tail 

 
In this step, vertical projections were applied and the 

histogram was acquired to determine the approximated location 
of each musical note. During vertical projections, peaks in the 
histogram were related to the location of the stems, despite 
there are different types of musical notes (e.g., 4th or 8th notes, 
etc.). Therefore, stems of each musical notes could be filtered 
(removed). 

Size Filtering: Although there are differences in 
representing musical notes by different publishers, the height of 
the note heads is generally the same as the staff line space. 
Therefore, the staff line space SL was used as the threshold to 
determine if a connected region actually represents the head of 
a musical note. 

Shape Filtering: The head of a musical note is generally an 
oval shape which is symmetrical with respect to its center. Here, 
we detected note heads by calculating the rate of symmetric for 
each connected component. 

In a symmetric connected component L, for any point P∈L, 
there exists a point PS ∈	L	such	that	P - PC = PC - PS, where PC 

is the center of the connected component L, as defined by: 
 

SCCS PPPPPLP  :!,                   (3) 

 
According to the equation, the rate of symmetry R can be 

obtained for each connected component, as given by (4) 
 

A

S

Sum

Sum
R                                       (4) 

 
where Sums is the total number of the symmetric pixels and 
SumA is the total number of all the pixels in the connected 
component. Using the rate of symmetry, we could therefore 
remove all the regions that were not likely to be the heads of 
musical notes. An example is shown in Fig. 7. 

 

 

Fig. 7 An example of the note recognition, in which all the heads of the 
musical notes are marked  

 
Pitch and Beat Analysis: The pitch of the musical note is 

defined by its position with respect to the staff lines. The 
difference of pitches among musical notes is based on the scale 
as a basic unit, and the distance of each scale is with half height 
of the staff line space. Hence, we defined the pitch of each note 
by calculating the distance between musical notes and the 
datum line. The datum line was defined as the position of the 
keynote, i.e., the position of middle C. 

 

Whole/Half  Note ?

Have Stem?

How Many Tails?

Yes

No

Whole Note

Half Note

Quarter Note

Eighth Note

Sixteenth Note

No

Yes

0

1

2

Input

 
Fig. 8 The classifier for the beat of a musical note: Each musical note can thus be classified based on the properties if the stem/tails exist 

 
The beat of a musical note represents the length of the note 

being played, and each note has its own beat. The beat of a 
musical note is represented by three parts: (1) The note is solid 

or not; (2) The note has a stem or not; and (3) How many tails 
do the note have. Based on these properties, our system 
incorporated a classifier for the beat of a musical note, as shown 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1814International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

in Fig. 8. Furthermore, a dot is often used to adjust the beat for 
the musical notes. The dot is meant to increase the beat of the 
musical note by half of its original beat. For example, a note 
with two beats will become three beats. The symbol of a dot in a 
music score is a round black spot, and is generally marked at 
the right side of the note head. The size of dots is smaller than 
the half size of heads and is disconnected with other symbols. 
Based on the dot property as described, our system was 
designed to incorporate additional process for the process of 
recognizing the dot associated with a note head. 

D.  Accidental and Rest Recognition 

Accidentals are the musical symbols used to modify the pitch 
of a musical note. The most common accidentals can be 
described as follow: (1) the sharp is used to raise the pitch of a 
musical note by a semitone; (2) the flat is used to reduce the 
pitch of a musical notes by a semitone; and (3) the natural is 
used to recover the pitch of a musical note to its natural key. 
The accidentals are typically recorded in two ways: (1) marked 
at the start of a staff represent a key signature; and (2) marked at 
the left of a note to adjust the pitch of the musical note.  

Rests are the musical symbols used to represent the pauses in 
music/song. Unlike musical notes, rests have no pitches so that 
the height of rests in a score is fixed. However, shapes of rests 
with different beats are relatively irregular than musical notes. 

To identify the accidentals and/or rests, the technique of 
template matching is used in our system. The technique was 
used to compare an unknown symbol with respect to known 
template images (i.e., template images for possible accidentals 
and/or rests) in the database to recognize the symbol. In our 
system, once a region (sub-image) containing a symbol was 
detected, the region (sub-image) was then normalized to the 
same size with the template image and the logical XOR 
operation was applied: 
 

     


 


otherwise

yxIyxIif
yxI CT

XOR ,255

,,,0
,           (5) 

 
where IT represent the template image, IC represent the 
sub-image containing a symbol, and IXOR represent the result 
image after the exclusive-OR operation. An example is shown 
in Fig. 9. 

 

 

(a) 

 

(b) 

 

(c) 

Fig. 9 An example of the template matching for the rest recognition: 
(a) sub-image of an unknown symbol; (b) template image of the 

crotchet rest; (c) resulting image after the exclusion-OR operation 
 
Fig. 10 shows an example for the recognition of accidentals 

and rests in a musical score. Using the template matching, our 
system was able to identify the accidentals and rests. However, 

our system failed to detect the sharp symbol which is connected 
with the tail of a musical note. 

 

 

(a) 
 

 

(b) 

Fig. 10 An example of the accidental and rest recognition: (a) input 
image; (b) result of the recognition. There is a sharp that is connected 
with the tail of a musical note, resulting in a recognition failure in our 

system  

III. RESULTS 

In this section, we present the research environment and 
recognition results using our system in several musical score 
images. 

A. Research Environment 

The system development was based on a personal computer: 
Pentium(R) Dual-Core E5200 2.5GHz with 2GB memory, and 
Microsoft Windows 7 operating system. The system software 
was developed using the Microsoft Visual Studio C/C++ 2010 
and the Intel Open Source Computer Vision Library (OpenCV) 
Version 2.4.8.  

To evaluate our system performance, a set of digital images 
with musical scores of various complexities were collected 
from the Internet.  

B. Result of Musical Score Recognition 

Table I summarizes the results of musical symbol detection 
and recognition of our system using five images of musical 
scores. The detection rate was evaluated with the probability 
when musical notes or symbols (including accidentals and rests) 
were correctly detected. Then, based on the detected notes or 
symbols, the recognition rate was evaluated with the 
probability when the musical notes or symbols were correctly 
recognized. 

 
TABLE I 

THE RESULTS OF MUSICAL SYMBOL DETECTION AND RECOGNITION 

 Detection Recognition 

 Detected / Total Rate Recognized / Detected Rate 

Image 1 42 / 42 100% 42 / 42 100(%) 

Image 2 62 / 62 100% 62 / 62 100(%) 

Image 3 74(1) / 74 97.3% 64 / 74 86.4(%) 

Image 4 85(4) / 88 87.5% 65 / 85 76.5(%) 

Image 5 89(1) / 92 96.7% 85 / 89 95.5(%) 

Total 382(6) / 388 96.3% 318 / 382 91.7(%) 

 
Recognition results of our system are shown in the following. 

Fig. 11 shows the recognition results for the musical score 
Twinkle, Twinkle, Little Star. All the musical notes, including 
the pitches and beats, were successfully detected and 
recognized. The detected musical notes are marked 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1815International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

accordingly. 
 

 

Fig. 11 Recognition results of the musical score Twinkle, Twinkle, 
Little Star 

 
Fig. 12 shows the recognition results for the musical score 

The Swallow. Although the musical score was more 
complicated, all the musical notes, including the pitches and 
beats, were successfully detected and recognized.  

 

 

Fig. 12 Recognition results of the musical score The Swallow 
 

Fig. 13 shows the recognition results for the musical score I 
Will Sing You. The original image was in JPEG compressed 
format. All the musical notes, accidentals, and rests were 
successfully detected and recognized, despite there was a few 
errors in the recognition of the pitches. 

 

 

Fig. 13 Recognition results of the musical score I Will Sing You 

Fig. 14 shows the recognition results for the musical score At 
This Moment. The quality was relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores. 

 

 

Fig. 14 Recognition results of the musical score At This Moment 
 

Fig. 15 shows the recognition results for the musical score 
My Herd. The quality was also relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores especially in beat 
recognition (most recognition failure occurred at dots).  

 

 

Fig. 15 Recognition results of the musical score My Herd 

IV. CONCLUSION 

In this study, we proposed an Automatic Music Score 
Recognition System Using Digital Image Processing. The 
technical approaches included: staff region segmentation, 
image preprocessing, note recognition and accidental and rest 
recognition. Our system was developed to automatically detect 
and recognize musical notes, accidentals and rests in printed 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1816International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

musical scores.  
The results showed that the detection and the recognition 

rates of our system were 96.3% and 91.7%, respectively. While 
the results were limited and could be affected by image quality, 
our system was shown to achieve effective detection and 
recognition for musical symbols, such as notes, accidentals, and 
rests. Ultimately, our system could be incorporated with a 
media player that could play music/songs with inputs of 
musical scores.  

While our system has been demonstrated with success for 
different types of musical scores, our system was still limited 
with respect to the complexities of some musical scores (e.g., 
chords or other complex symbols). Improvement of our 
systems is still required for such musical scores. 

At present, our system was evaluated using personal 
computers with inputs of digital images. The system could be 
further integrated in applications for smart-phones or other 
mobile devices with built-in digital cameras. In addition, this 
system could be also used as a learning tool for players (e.g., 
piano players, guitar players, etc.) to play the music/songs even 
though they may not be familiar with the music/songs. 

REFERENCES  
[1] N. Otsu, “A Threshold Selection Method form Gray-Level Histograms,” 

IEEE Transactions on Systems, pp. 62-66, 1979. 
[2] R.G. Casey and E. Lecolinet, “A Survey of Methods and Strategies in 

Character Segmentation,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 690-706, 1996. 

[3] Cheng-Lin Liu, M. Koga and H. Fujisawa, “Lexicon-Driven 
Segmentation and Recognition of Handwritten Character Strings for 
Japanese Address Reading,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 1425-1437, 2002. 

[4] M. Sotoodeh and F. Tajeripour, “Staff Detection and Removal Using 
Derivation and Connected Component Analysis,” IEEE 16th CSI 
International Symposium on Artificial Intelligence and Signal Processing 
(AISP), pp. 54-57, 2012. 

[5] Chen Genfang, Zhang Liyin, Zhang Wenjun and Wang Qiuqiu, 
“Detecting the Staff-lines of Musical Score with Hough Transform and 
Mathematical Morphology,” IEEE International Conference on 
Multimedia Technology (ICMT) , pp. 1-4, 2010. 

[6] A. Dutta, U. Pal, A. Fornes and J. Llados, “An Efficient Staff Removal 
Approach from Printed Musical Documents,” IEEE International 
Conference on Pattern Recognition (ICPR), pp.1965-1968, 2010. 

[7] JaeMyeong Yoo, GiHong Kim and Gueesang Lee, “Mask Matching for 
Low Resolution Musical Note Recognition,” IEEE International 
Symposium on Signal Processing and Information Technology, pp. 
223-226, 2008. 

[8] F.Toyama, K. Shioji and J. Miyamichi, “Symbol Recognition of Printed 
Piano Scores with Touching Symbols,” Pattern Recognition, ICPR 18th 

International Conference, pp. 480-483, 2006. 
[9] F.Rossant and I. Bloch, “Optical Music Recognition Based on a Fuzzy 

Modeling of Symbol Classes and Music Writing Rules,” Pattern 
Recognition Letters, vol.23, pp. 1129-1141, 2002. 

[10] K.T. Reed and J.R.Parker, “Automatic Computer Recognition of Printed 
Music,” in Proceedings of the ICPR, pp.803-807, 1996. 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1817International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


reading content from C:\Users\Asus\Desktop\Bee\10005799.pdf


 

 
Abstract—Music has always been an integral part of human’s 

daily lives. But, for the most people, reading musical score and turning 
it into melody is not easy. This study aims to develop an Automatic 
music score recognition system using digital image processing, which 
can be used to read and analyze musical score images automatically. 
The technical approaches included: (1) staff region segmentation; (2) 
image preprocessing; (3) note recognition; and (4) accidental and rest 
recognition. Digital image processing techniques (e.g., horizontal 
/vertical projections, connected component labeling, morphological 
processing, template matching, etc.) were applied according to 
musical notes, accidents, and rests in staff notations. Preliminary 
results showed that our system could achieve detection and 
recognition rates of 96.3% and 91.7%, respectively. In conclusion, we 
presented an effective automated musical score recognition system 
that could be integrated in a system with a media player to play 
music/songs given input images of musical score. Ultimately, this 
system could also be incorporated in applications for mobile devices as 
a learning tool, such that a music player could learn to play 
music/songs. 
 

Keywords—Connected component labeling, image processing, 
morphological processing, optical musical recognition.  

I. INTRODUCTION 

ITH the advance of image processing and computer 
vision techniques in recent years, the techniques have 

been integrated in human’s daily lives. Typical image 
processing and computer vision applications include document 
processing, smartphone applications, video surveillance 
systems, multimedia systems, and/or video games, etc.  

In image processing techniques, the Optical Character 
Recognition (OCR) is an important technique that has been 
widely used in handwriting inputs, license plate recognition, 
and augmented reality applications. The objective of the OCR 
technique is to allow the computer to analyze the text images, 
and then convert to texts (typically the ASCII codes) which 
computer can handle. For example, [1] proposed a method to 
calculate the appropriate threshold for converting gray-level 
images to binary images automatically. Casey and Lecolinet [2] 
proposed a character segmentation system based on connected 
component analysis and feature extraction, which were used to 
segment and recognize each character from document images. 

 
Yuan-Hsiang Chang, Ph.D. is with the Information and Computer 

Engineering Department, Chung-Yuan Christian University, Chung Li, Taiwan, 
R.O.C. (phone: 886-3-265-4713; fax: 886-3-265-4799; e-mail: author@ 
boulder.nist.gov).  

Zhong-Xian Peng, is a graduate student with the. Information and Computer 
Engineering Department, Chung-Yuan Christian University, Chung Li, Tawian, 
R.O.C 

Li-Der Jeng is with the Electronic Engineering Department, Chung-Yuan 
Christian University, Chung Li, Taiwan 

Liu et al. [3] proposed a handwritten character strings 
recognition system for address reading, in which characters 
were segmented using the connected component analysis. Each 
character was then recognized using a beam search algorithm 
and a character classifier. 

In addition to the OCR technique, pattern recognition 
techniques are also drawing attention of many researchers. 
Patterns (or symbols) are commonly seen in documents and/or 
other scenarios in which text information is not used for the 
representation (such as music notes, traffic signs, gestures, etc.). 
However, recognition of such patterns (or symbols) may 
require expertise to achieve effective representation and/or 
communication (e.g., music notes in a music score, etc.). 

Musical score is a form to record music by symbols which 
may include the pitch and tempo information about the music 
and/or songs. With the development of pattern recognition 
techniques, musical score recognition has also become a 
research topic lately. For example, [4] proposed a method to 
detect and remove staff lines using derivation and connected 
component analysis. Chen et al. [5] proposed a conventional 
architecture of Optical Music Recognition (OMR) using the 
staff-lines detection as the key stage. They explored two 
methods, namely the Hough transform and Mathematical 
Morphology, for detecting all staff-lines of an image. Dutta et 
al. [6] proposed a different method to detect and remove staff 
lines from musical documents. The methodology considered a 
staff line segment as a horizontal linkage of vertical black runs 
with uniform height. They also used the neighboring properties 
of a staff line segment to validate it as a true segment. Yoo et al. 
[7] proposed a system to recognize musical scores in low 
resolution images captured by the digital camera of a mobile 
phone. They presented a mask based approach to cope with 
incomplete information in the low resolution images. Toyama 
et al. [8] proposed a score recognition method which could be 
applicable to the complex music scores. Symbol candidates 
were detected by template matching, and then selected by 
considering the relative positions and mutual connections. 
Rossant and Bloch [9] proposed an optical music recognition 
system based on a fuzzy modeling of symbol classes and music 
writing rules. The objective was to disambiguate the 
recognition hypotheses output by the individual symbol 
analysis, followed by the fuzzy modeling to account for 
imprecision in symbol detection. Parker [10] implemented a 
complete optical music recognition system, called Lemon. 
Their system included the techniques, i.e., staff line detection, 
text segmentation, line detection, symbol recognition, note 
head recognition, and semantic interpretation. 

Automatic Music Score Recognition System Using 
Digital Image Processing 
Yuan-Hsiang Chang, Zhong-Xian Peng, Li-Der Jeng. 

W 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1811International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799
Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight



 

II.  METHOD 

In this study, we present an “Automatic Music Score 
Recognition System Using Digital Image Processing”, which 
was aimed to automatically recognize musical scores.  

Several system hypotheses can be described as follows: 
 The musical score is a printed document (i.e., black 

musical notes or symbols in white background). 
 The musical score is a scanned document in an upright 

position, therefore no perspective distortions are observed. 
 The image is with sufficient resolution and in good quality. 

Fig. 1 shows the flow chart of our system. The processes 
include: Image Analysis and Segmentation, Image 
Preprocessing, Note recognition, and Accidental and Rest 
Recognition. 

 

Note Recognition

Stem Filtering

Size Filtering

Shape Filtering

Pitch And Beat Analysis

Output

Staff Region Segmentation

Binary Transform

Horizontal Projection

Region Segmentation

Image Preprocessing

Accidental and Rest Recognition

Note Removal

Template ImageTemplate Matching

Source
Image

Staff Line Filtering

Morphological Processing

Connected Component Labeling

 

Fig. 1 System flow chart of the Automatic Music Score Recognition 
System Using Digital Image Processing  

A. Staff Region Segmentation 

A page of musical score consist of number of row stave, with 
a top-down order when playing. A staff consists of five staff 
lines, while notes are recorded on staff lines with respect to the 
height of each line to determine its pitch. Therefore, the first 
step of our system was to segment sub-regions for each staff. 
The processes included: Binary Transform, Horizontal 
Projection, and Region Segmentation. 

Binary Transform was simply used to convert the input 
image to a binary image. In this study, the Otsu’s algorithm was 

used to find the optimal threshold T that minimizes the 
within-class variances. As a result, given an input image I and 
the threshold T, a binary image IB can be acquired using: 
 

   


 


otherwise

TyxIif
yxI B ,0

,,255
,

                    (1) 

 
Horizontal Projection: The image projection is a method for 

projecting source data to selected area to reduce the dimension 
of the source data, such that the data could be easily processed. 
Image projections can be implemented in either the horizontal 
or vertical directions, resulted in horizontal or vertical 
projections. Here, the horizontal projection was applied in our 
system to acquire the horizontally projection histogram as 
shown in Fig. 2. By projecting the musical score in Fig. 2 (a) 
horizontally, total number of pixels for each row could be 
determined in Fig. 2 (b). As shown, the five staff lines were 
associated with five obvious peak values in terms of number of 
pixels. 

 

 

(a) 
 

 

(b) 

Fig. 2 Binary musical score image and the corresponding horizontal 
projects 

 
Region Segmentation: The objective of the region 

segmentation was to identify and segment regions of stave from 
the original image such that each region of the staff could be 
processed independently.  

Based on the result given in Fig. 2, the staff line height HL, 
the staff line space SL, and the distribution of staff lines, could 
be obtained. An example is shown in Fig. 3. 

 

 

Fig. 3 An example of the staff line height HL and the staff line space SL. 
The height of the note head is approximately the same as the staff line 

space 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1812International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799
Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight

Asus
Highlight



 

According to the horizontal projections, the histogram 
represented the number of pixels for each row in the binary 
image. Because each staff contained exactly five horizontal 
staff lines, the peaks of the horizontal projections at the location 
of staff line represented the locations of the five staff lines. 
Therefore, the five staff lines could be obtained by 
back-projections of the five peaks in the histogram, such that 
the resulting image contains only the staff lines without any 
note heads (or other symbols). 

B. Image Preprocessing 

In image preprocessing, our objective was to extract or 
isolate the musical symbols to be independent regions from the 
staff by removing the staff lines in the image. However, during 
staff line removal processes, several musical notes (or other 
symbols) may be damaged if they are associated with weak 
structures (shapes). Therefore, our system incorporated the 
image preprocessing processes to retain the musical notes (or 
symbols), while removing the staff lines for further processes. 

Staff Line Filtering: In the musical score, musical symbols 
are recorded on the staff. As a result, musical symbols are 
connected with the staff lines in images. In this step, our 
objective was to retain the music notes (or symbols) in images, 
while removing the staff lines. After acquiring the Staff line 
space and height by horizontal projections, our system removed 
all the black pixels at each rows of staff lines. Because this 
process may damage the structure (shapes) of musical notes (or 
symbols), additional criterion was included. The staff line 
height HL was selected as the threshold and black pixels were 
removed only if the observed height was smaller than the staff 
line height. An example is shown in Fig. 4 (a). 

Morphological Processing: Although the aforementioned 
process was able to remove staff lines effectively, the structure 
(shapes) of the musical notes (or symbols) could be affected. 
The process of Morphological processing was used to retain the 
complete structure (shapes) of each musical note (or symbol). 

 

 

(a) 
 

 

(b) 

Fig. 4 An example of the image preprocessing: (a) result of staff line 
filtering; (b) result of morphological processing 

 
Closing processing is a technology of morphological 

processing that can be used to link the small gaps of structure 
and to improve the connectivity for regions in images. The 
morphological closing is defined by: 

 

EEIEI Θ)(                                 (2) 
 
where I is the input image and is E the structuring element. The 
image is first dilated (  is the dilation operation) and then 

eroded (Θ  is the erosion operation) with the structuring 
element. In our system, the morphological closing was applied, 
an example is shown in Fig. 4 (b). 

Connected Component Labeling: A region of connected 
pixels with an identical label was referred as a connected 
component. The objective of the connected component labeling 
was to assign a unique label to each connected component. An 
example is shown in Fig. 5. 

 

 

Fig. 5 An example of the connected component labeling is shown. 
After labeling, each connected component (region) is assigned a 

unique label 
 

Given a binary images with binary-1s (black pixels) and 
binary-0s (white pixels), we applied the connected component 
labeling to extract each connected component. Therefore, each 
musical notes (or symbols) could be identified and labeled. The 
seed filling algorithm for the connected component labeling is 
given by: 
1) Search each pixel in the image until the value of the current 

pixel P with the binary-1 value and has not been labeled 
yet; 

2) Select P as the seed pixel and assign a label L to P, then 
check each pixel that is adjacent to the seed pixel; 

3) If there is a pixel Q with the binary-1 value that is adjacent 
to the seed pixel, return to step 2 until there is no pixels 
with the binary-1 is found; 

4) Update the label and return to step 1 until all pixels in the 
image have been checked. 

C. Note Recognition 

Once the connected regions for the musical notes (or 
symbols) were identified and labeled, the final step was to 
recognize them. In our system, the processes were divided into 
two major recognition phases: (1) Note recognition; and (2) 
Accidental and rest recognition. 

In staff notations, a musical note can be split into three parts 
according to its structure: head, stem and tail, as shown in Fig. 6. 
The head (e.g., solid or not) is mainly used to determine the 
pitch by its position with respect to the staff lines; the tails is 
mainly used to determine the beat; the stem is used to connect 
both the head and the tail. Our system was designed to detect 
the note heads first, followed by the detection of stems and tails.  

Stem Filtering: A stem is used to connect the head and the 
tail in a musical note. With the different position of a musical 
note, the stem is either extended upward or downward form the 
head. In addition, a whole note has no stems. Because of the 
variety in structures (shapes), recognition of musical note could 
be difficult. To simplify the task, the Stem filtering was 
designed to remove stems for the musical notes, while retaining 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1813International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

the structure of the note heads. 
 

 

Fig. 6 An example of a typical musical note (i.e., eighth note): The 
structure consists of head, stem and tail 

 
In this step, vertical projections were applied and the 

histogram was acquired to determine the approximated location 
of each musical note. During vertical projections, peaks in the 
histogram were related to the location of the stems, despite 
there are different types of musical notes (e.g., 4th or 8th notes, 
etc.). Therefore, stems of each musical notes could be filtered 
(removed). 

Size Filtering: Although there are differences in 
representing musical notes by different publishers, the height of 
the note heads is generally the same as the staff line space. 
Therefore, the staff line space SL was used as the threshold to 
determine if a connected region actually represents the head of 
a musical note. 

Shape Filtering: The head of a musical note is generally an 
oval shape which is symmetrical with respect to its center. Here, 
we detected note heads by calculating the rate of symmetric for 
each connected component. 

In a symmetric connected component L, for any point P∈L, 
there exists a point PS ∈	L	such	that	P - PC = PC - PS, where PC 

is the center of the connected component L, as defined by: 
 

SCCS PPPPPLP  :!,                   (3) 

 
According to the equation, the rate of symmetry R can be 

obtained for each connected component, as given by (4) 
 

A

S

Sum

Sum
R                                       (4) 

 
where Sums is the total number of the symmetric pixels and 
SumA is the total number of all the pixels in the connected 
component. Using the rate of symmetry, we could therefore 
remove all the regions that were not likely to be the heads of 
musical notes. An example is shown in Fig. 7. 

 

 

Fig. 7 An example of the note recognition, in which all the heads of the 
musical notes are marked  

 
Pitch and Beat Analysis: The pitch of the musical note is 

defined by its position with respect to the staff lines. The 
difference of pitches among musical notes is based on the scale 
as a basic unit, and the distance of each scale is with half height 
of the staff line space. Hence, we defined the pitch of each note 
by calculating the distance between musical notes and the 
datum line. The datum line was defined as the position of the 
keynote, i.e., the position of middle C. 

 

Whole/Half  Note ?

Have Stem?

How Many Tails?

Yes

No

Whole Note

Half Note

Quarter Note

Eighth Note

Sixteenth Note

No

Yes

0

1

2

Input

 
Fig. 8 The classifier for the beat of a musical note: Each musical note can thus be classified based on the properties if the stem/tails exist 

 
The beat of a musical note represents the length of the note 

being played, and each note has its own beat. The beat of a 
musical note is represented by three parts: (1) The note is solid 

or not; (2) The note has a stem or not; and (3) How many tails 
do the note have. Based on these properties, our system 
incorporated a classifier for the beat of a musical note, as shown 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1814International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

in Fig. 8. Furthermore, a dot is often used to adjust the beat for 
the musical notes. The dot is meant to increase the beat of the 
musical note by half of its original beat. For example, a note 
with two beats will become three beats. The symbol of a dot in a 
music score is a round black spot, and is generally marked at 
the right side of the note head. The size of dots is smaller than 
the half size of heads and is disconnected with other symbols. 
Based on the dot property as described, our system was 
designed to incorporate additional process for the process of 
recognizing the dot associated with a note head. 

D.  Accidental and Rest Recognition 

Accidentals are the musical symbols used to modify the pitch 
of a musical note. The most common accidentals can be 
described as follow: (1) the sharp is used to raise the pitch of a 
musical note by a semitone; (2) the flat is used to reduce the 
pitch of a musical notes by a semitone; and (3) the natural is 
used to recover the pitch of a musical note to its natural key. 
The accidentals are typically recorded in two ways: (1) marked 
at the start of a staff represent a key signature; and (2) marked at 
the left of a note to adjust the pitch of the musical note.  

Rests are the musical symbols used to represent the pauses in 
music/song. Unlike musical notes, rests have no pitches so that 
the height of rests in a score is fixed. However, shapes of rests 
with different beats are relatively irregular than musical notes. 

To identify the accidentals and/or rests, the technique of 
template matching is used in our system. The technique was 
used to compare an unknown symbol with respect to known 
template images (i.e., template images for possible accidentals 
and/or rests) in the database to recognize the symbol. In our 
system, once a region (sub-image) containing a symbol was 
detected, the region (sub-image) was then normalized to the 
same size with the template image and the logical XOR 
operation was applied: 
 

     


 


otherwise

yxIyxIif
yxI CT

XOR ,255

,,,0
,           (5) 

 
where IT represent the template image, IC represent the 
sub-image containing a symbol, and IXOR represent the result 
image after the exclusive-OR operation. An example is shown 
in Fig. 9. 

 

 

(a) 

 

(b) 

 

(c) 

Fig. 9 An example of the template matching for the rest recognition: 
(a) sub-image of an unknown symbol; (b) template image of the 

crotchet rest; (c) resulting image after the exclusion-OR operation 
 
Fig. 10 shows an example for the recognition of accidentals 

and rests in a musical score. Using the template matching, our 
system was able to identify the accidentals and rests. However, 

our system failed to detect the sharp symbol which is connected 
with the tail of a musical note. 

 

 

(a) 
 

 

(b) 

Fig. 10 An example of the accidental and rest recognition: (a) input 
image; (b) result of the recognition. There is a sharp that is connected 
with the tail of a musical note, resulting in a recognition failure in our 

system  

III. RESULTS 

In this section, we present the research environment and 
recognition results using our system in several musical score 
images. 

A. Research Environment 

The system development was based on a personal computer: 
Pentium(R) Dual-Core E5200 2.5GHz with 2GB memory, and 
Microsoft Windows 7 operating system. The system software 
was developed using the Microsoft Visual Studio C/C++ 2010 
and the Intel Open Source Computer Vision Library (OpenCV) 
Version 2.4.8.  

To evaluate our system performance, a set of digital images 
with musical scores of various complexities were collected 
from the Internet.  

B. Result of Musical Score Recognition 

Table I summarizes the results of musical symbol detection 
and recognition of our system using five images of musical 
scores. The detection rate was evaluated with the probability 
when musical notes or symbols (including accidentals and rests) 
were correctly detected. Then, based on the detected notes or 
symbols, the recognition rate was evaluated with the 
probability when the musical notes or symbols were correctly 
recognized. 

 
TABLE I 

THE RESULTS OF MUSICAL SYMBOL DETECTION AND RECOGNITION 

 Detection Recognition 

 Detected / Total Rate Recognized / Detected Rate 

Image 1 42 / 42 100% 42 / 42 100(%) 

Image 2 62 / 62 100% 62 / 62 100(%) 

Image 3 74(1) / 74 97.3% 64 / 74 86.4(%) 

Image 4 85(4) / 88 87.5% 65 / 85 76.5(%) 

Image 5 89(1) / 92 96.7% 85 / 89 95.5(%) 

Total 382(6) / 388 96.3% 318 / 382 91.7(%) 

 
Recognition results of our system are shown in the following. 

Fig. 11 shows the recognition results for the musical score 
Twinkle, Twinkle, Little Star. All the musical notes, including 
the pitches and beats, were successfully detected and 
recognized. The detected musical notes are marked 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1815International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

accordingly. 
 

 

Fig. 11 Recognition results of the musical score Twinkle, Twinkle, 
Little Star 

 
Fig. 12 shows the recognition results for the musical score 

The Swallow. Although the musical score was more 
complicated, all the musical notes, including the pitches and 
beats, were successfully detected and recognized.  

 

 

Fig. 12 Recognition results of the musical score The Swallow 
 

Fig. 13 shows the recognition results for the musical score I 
Will Sing You. The original image was in JPEG compressed 
format. All the musical notes, accidentals, and rests were 
successfully detected and recognized, despite there was a few 
errors in the recognition of the pitches. 

 

 

Fig. 13 Recognition results of the musical score I Will Sing You 

Fig. 14 shows the recognition results for the musical score At 
This Moment. The quality was relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores. 

 

 

Fig. 14 Recognition results of the musical score At This Moment 
 

Fig. 15 shows the recognition results for the musical score 
My Herd. The quality was also relatively poor mainly because 
of compression distortion. The recognition results were 
relatively worse than previous scores especially in beat 
recognition (most recognition failure occurred at dots).  

 

 

Fig. 15 Recognition results of the musical score My Herd 

IV. CONCLUSION 

In this study, we proposed an Automatic Music Score 
Recognition System Using Digital Image Processing. The 
technical approaches included: staff region segmentation, 
image preprocessing, note recognition and accidental and rest 
recognition. Our system was developed to automatically detect 
and recognize musical notes, accidentals and rests in printed 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1816International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


 

musical scores.  
The results showed that the detection and the recognition 

rates of our system were 96.3% and 91.7%, respectively. While 
the results were limited and could be affected by image quality, 
our system was shown to achieve effective detection and 
recognition for musical symbols, such as notes, accidentals, and 
rests. Ultimately, our system could be incorporated with a 
media player that could play music/songs with inputs of 
musical scores.  

While our system has been demonstrated with success for 
different types of musical scores, our system was still limited 
with respect to the complexities of some musical scores (e.g., 
chords or other complex symbols). Improvement of our 
systems is still required for such musical scores. 

At present, our system was evaluated using personal 
computers with inputs of digital images. The system could be 
further integrated in applications for smart-phones or other 
mobile devices with built-in digital cameras. In addition, this 
system could be also used as a learning tool for players (e.g., 
piano players, guitar players, etc.) to play the music/songs even 
though they may not be familiar with the music/songs. 

REFERENCES  
[1] N. Otsu, “A Threshold Selection Method form Gray-Level Histograms,” 

IEEE Transactions on Systems, pp. 62-66, 1979. 
[2] R.G. Casey and E. Lecolinet, “A Survey of Methods and Strategies in 

Character Segmentation,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 690-706, 1996. 

[3] Cheng-Lin Liu, M. Koga and H. Fujisawa, “Lexicon-Driven 
Segmentation and Recognition of Handwritten Character Strings for 
Japanese Address Reading,” IEEE Transactions on Pattern Analysis and 
Machine Intelligence, pp. 1425-1437, 2002. 

[4] M. Sotoodeh and F. Tajeripour, “Staff Detection and Removal Using 
Derivation and Connected Component Analysis,” IEEE 16th CSI 
International Symposium on Artificial Intelligence and Signal Processing 
(AISP), pp. 54-57, 2012. 

[5] Chen Genfang, Zhang Liyin, Zhang Wenjun and Wang Qiuqiu, 
“Detecting the Staff-lines of Musical Score with Hough Transform and 
Mathematical Morphology,” IEEE International Conference on 
Multimedia Technology (ICMT) , pp. 1-4, 2010. 

[6] A. Dutta, U. Pal, A. Fornes and J. Llados, “An Efficient Staff Removal 
Approach from Printed Musical Documents,” IEEE International 
Conference on Pattern Recognition (ICPR), pp.1965-1968, 2010. 

[7] JaeMyeong Yoo, GiHong Kim and Gueesang Lee, “Mask Matching for 
Low Resolution Musical Note Recognition,” IEEE International 
Symposium on Signal Processing and Information Technology, pp. 
223-226, 2008. 

[8] F.Toyama, K. Shioji and J. Miyamichi, “Symbol Recognition of Printed 
Piano Scores with Touching Symbols,” Pattern Recognition, ICPR 18th 

International Conference, pp. 480-483, 2006. 
[9] F.Rossant and I. Bloch, “Optical Music Recognition Based on a Fuzzy 

Modeling of Symbol Classes and Music Writing Rules,” Pattern 
Recognition Letters, vol.23, pp. 1129-1141, 2002. 

[10] K.T. Reed and J.R.Parker, “Automatic Computer Recognition of Printed 
Music,” in Proceedings of the ICPR, pp.803-807, 1996. 

World Academy of Science, Engineering and Technology
International Journal of Computer and Information Engineering

 Vol:9, No:7, 2015 

1817International Scholarly and Scientific Research & Innovation 9(7) 2015 scholar.waset.org/1307-6892/10005799

In
te

rn
at

io
na

l S
ci

en
ce

 I
nd

ex
, C

om
pu

te
r 

an
d 

In
fo

rm
at

io
n 

E
ng

in
ee

ri
ng

 V
ol

:9
, N

o:
7,

 2
01

5 
w

as
et

.o
rg

/P
ub

lic
at

io
n/

10
00

57
99

http://waset.org/publication/Automatic-Music-Score-Recognition-System-Using-Digital-Image-Processing/10005799
http://scholar.waset.org/1307-6892/10005799


reading content from C:\Users\Asus\Desktop\Bee\20250320_091525.jpg

No content found by apache Tika jpeg
reading content from C:\Users\Asus\Desktop\Bee\cadenCV-master.zip


cadenCV-master/.idea/cadenCV.iml
 
   
     
     
     
  
   
     
  




cadenCV-master/.idea/misc.xml
 
   




cadenCV-master/.idea/modules.xml
 
   
     
       
    
  




cadenCV-master/.idea/vcs.xml
 
   
     
  




cadenCV-master/.idea/workspace.xml
 
   
     
     
     
     
     
     
     
  
   
     
       
         
           
             
               
               
                 
              
            
          
        
      
       
         
           
             
               
               
            
          
        
      
       
         
           
             
               
               
                 
              
            
          
        
      
       
         
           
             
               
               
            
          
        
      
       
         
           
             
               
               
            
          
        
      
       
         
           
             
               
               
                 
              
            
          
        
      
    
  
   
     
       zip
       hello
       np.
       Rectangle
       rec
       found
       deepcopy
       format
       deepco
       ims
       set
       None
       /
       note_defs
       note_grou
       locate_images
       getHeight
       get_
       getBox
       frange
       sort
       print
       where
       key_signa
       self.bars
       line_width
       range
       staff_img
       dotted
       clef_info
    
  
   
     
  
   
     
       
         
         
         
         
         
         
         
         
         
         
         
         
         
         
      
    
  
   
     
     
     
     
  
   
   
     
       
       
       
       
       
       
       
       
       
       
       
    
     
       
       
         
           
             
               
               
            
             
               
               
            
          
           
        
      
       
    
  
   
     
     
     
  
   
     
       
         
           
        
         
           
        
      
    
  
   
     
       
       
       
         
      
       
       
       
       
       
       
       
       
       
       
    
     
       
       
       
         
      
       
       
       
       
       
       
       
       
       
       
    
     
       
       
    
     
       
         
         
      
    
  
   
     
  
   
     
       
       1512373149051
       
       
       1512373149051
    
     
  
   
     
       
    
     
       
       
    
  
   
     
     
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
    
  
   
     
  
   
     
       
         
           file://$PROJECT_DIR$/../../../6.806/Assignments/Assignment 3/code/maxent_model.py
           13
        
      
       
    
     
  
   
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
     
     
       
         
           
           
             
          
        
      
    
     
       
         
           
        
      
    
     
       
         
           
        
      
    
     
       
         
           
           
        
      
    
     
     
       
         
           
           
             
          
        
      
    
     
     
     
     
       
         
           
        
      
    
     
     
       
         
           
        
      
    
     
     
       
         
      
    
     
       
         
           
        
      
    
     
     
       
         
           
        
      
    
     
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
        
      
    
     
       
         
           
           
             
          
        
      
    
  




cadenCV-master/README.md
# cadenCV

cadenCV is an optical music recognition system written in the Python programming language which reads sheet music and sequences a MIDI file for user playback.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image1.jpg)

## I. Dependencies

For OMR:
- *Python 3.6*
- *python-numpy*
- *Python matplotlib*
- *python-opencv*
- *Python MIDIUtil*

## II. Usage

To run the OMR system, run the following command in the terminal:

    $ python main.py "image"

where *image* is a placeholder for the sheet music bitmap file. (Accepts *.jpg* and *.png*)

## III. Introduction

Music has long been an integral part of human culture, and today this still remains true. As a form of artistic ex- pression and emotional communication in contemporary society, it’s almost impossible to go a day without hearing a song played or a tune being whistled in your vicinity.

Over the last century, we’ve seen a significant global increase in the use of digital devices, and the production and consumption of digital information - a trend that has left no industry unaffected. The music industry in specific has experienced significant disruption due to digitization - losing control over content distribution, consumption and the sales associated with the two. Digital tools have also ushered new potential for musicians to express themselves in unique ways using synthesizers and voice-distortion technology.

While much has been explored in context of music production, and listener consumption, limited development has been made towards the digitization of pre-information age and printed music documents. To be more specific, today there exists no robust tools for computer perception of music notation, inhibiting the improvement of music storage, playback and manipulation in a digital form. For example, a musician learning a new song would greatly benefit from hearing its auditory representation prior to parsing its notated sheet music. This is the focus of Optical Music Recognition.

## IV. Approach

Music notation comprises a large finite alphabet used to express ways of interpreting and communicating musical ideas. Each character serves to create a visual manifestation of the interrelated properties of musical sound such as pitch, dynamics, time, and timbre. For background, music notes are presented on a staff, a set of five lines each possessing its own pitch. A clef serves to communicate the pitch associated with each of these five lines. In this way, the pitch of a given note is determined by its vertical placement on the staff i.e. it's pitch is consistent with the pitch of the staff line or space on which it rests. The temporal nature of music is represented by the horizontal traversal of the staff. Thus music notation presents information in two dimensions. Certain subsets of the alphabet serve to communicate note duration, relative durations of silence, temporary changes in pitch, dynamics (loudness), and note articulations (changes in musical sound). In practice, certain symbols have almost unlimited variations in representation. As a result, building a computer vision system that understands musical notation is a difficult, but achievable goal.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image2.jpg)
Typical music primitives used in sheet music.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image3.jpg)
Bi-dimensional structure of the music staff.

## V. System Scope

For the purpose of this project, I decided to restrict the scope of the alphabet space considered. Consequently, my research sought to develop a OMR system capable of recognizing and representing high resolution sheet music written for a single monophonic musical instrument using note or rest values equal to or greater than eighth notes, expressed on a staff consisting of either the treble or the bass clef and one of the common time signatures, i.e. common time, 2/4, 4/4, 3/4 or 6/8. Consequently, my recognition system cannot perform *key* or *time signature alterations*, or *detect tempo demarcations*, *harmony*, *multi-instrumentation*, *braced-joined staffs*, *tuplets*, *repeats*, *slurs* and *ties*, *articulation* and *dynamic marks*, or *dotted rhythms*.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image4.jpg)
Standard input to OMR system.


## VI. System Framework

Over time, a general framework for OMR systems has been developed. The framework breaks down the overarching recognition problem into four simpler operations that aid in the recognition, representation and storage of musical documents in a machine-readable format. The framework can be summarized as follows:

1. Image Processing
2. Music Primitive Detection
3. Music Primitive Classification
4. Semantic Reconstruction

The main goal of the preprocessing stage is to modify the original music document to improve the robustness and efficiency of the recognition process. This typically includes *enhancement*, *blurring*, *noise removal*, *morphological operations*, *deskewing* and *binarization*. The music primitive detection stage is where elementary music primitives are recognized, which is followed by the music primitive classification stage where these primitives are classified. Finally, the semantic reconstruction stage reestablishes the semantic relation between the recognized musical primitives and stores the information in a suitable data structure.

### Preprocessing

Because my OMR system was designed for input of a specified nature, namely original printed sheet music recorded in high resolution image file formats, only a few preprocessing operations were necessary. My system employs noise removal, and binarization. The first operation attempts to remove any image artifacts, while the second operation converts the input image into a matrix of binary-valued pixels. Because no information is conveyed through the use of color on common music scores, the process does not constrain subsequent phases.  On the contrary, it facilitates them by reducing the volume of information that is need to be processed. My system employs *Otsu's global thresholding method* for this purpose. A global thresholding method was chosen over an adaptive one due to the fact that the input image would have a uniform background, thus it would not need to threshold each pixel using local neighborhood information.

### Staff Detection

Owing to the importance of staff as a two dimensional coordinate system for musical notation, the first step of primitive detection requires determining *staff line thickness* and *staff spacing height*, which are further used to deduce the size of other music symbols, and to detect the location of each staff in the input image. *Staff line thickness* and *staff spacing height* are calculated using run-length encoding (RLE), by encoding the score column by column with RLE. The most common black run approximates the *staff line thickness* and the most common white run estimates the *staff space height*. Each staff is located using horizontal projection, which maps a binary image into a histogram by accumulating the number of black pixels in each row. The staff is detected as five consequent distinct peaks in the histogram.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image5.jpg)
The horizontal projection of a music score excerpt.

### Music Primitive Detection and Classification

Music primitives are both segmented and classified using a template matching approach to image classification.The classification method detects primitives by comparing an image segment to a library of labelled primitive templates, staff-by-staff, primitive by primitive, and classifies as a specific music primitive if its similarity exceeds a specified threshold. Because staff positions have been determined beforehand, along with their *staff line thickness* and *staff space height*, note pitch values can be determined by observing which row index the center of a note's bounding box lies; it's pitch is consistent with the pitch of the staff line or space sharing that particular row index.

Eighth notes, which are originally classified as quarter notes owing to the possession of an equivalent note head, are retroactively corrected by determining if an eighth flag is in the vicinity of the note head or whether it is beamed with adjacent notes. Beaming is determined by determining if the column central to adjacent notes contains more black pixels than expected, i.e. more then five times the *staff line thickness*. I had to devise a way to detect key signatures; because every staff is initiated by its key signature, it could easily be identified by counting the number of accidentals located at the beginning of the ordered list of detected music primitives on a given staff. Subsequent to this operation, accidentals resulting from the key are applied to the note primitives.

### Semantic Reconstruction

Once all primitives are located and classified, they are sorted by their horizontal position on their staff and sequenced in order into an object-oriented data structure comprising of *notes*, *rests*, and *accidentals* encapsulated by *bars*, which are further encapsulated by *staffs*. Finally, once each staff has been semantically reconstructed, they are expanded and each note is converted from its note name into a number corresponding to its associated MIDI note value and added to a MIDI track representing the image's auditory representation.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image6.jpg)
Hierarchy of OMR system's tree data structure.

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image7.jpg)
Staff Detection on 'Mary Had a Little Lamb' input example

![alt text](https://github.com/anyati/cadenCV/blob/master/resources/README/image8.jpg)
Music Primitive Detection and Classification on 'Mary Had a Little Lamb' input example

## VII. Project Paper

To learn more about the cadenCV: Optical Music Recognition system, read the accompanying paper: http://bit.ly/2lfe8Gv

## VII. Output Example

To hear an output example from cadenCV (Mary had a Little Lamb), visit: https://www.youtube.com/watch?v=amL6wHfAShw




cadenCV-master/__pycache__/bar.cpython-35.pyc


cadenCV-master/__pycache__/best_fit.cpython-35.pyc


cadenCV-master/__pycache__/best_match.cpython-35.pyc


cadenCV-master/__pycache__/box.cpython-35.pyc


cadenCV-master/__pycache__/primitive.cpython-35.pyc


cadenCV-master/__pycache__/rectangle.cpython-35.pyc


cadenCV-master/__pycache__/staff.cpython-35.pyc


cadenCV-master/bar.py
class Bar(object):
    def __init__(self, key_signature="c"):
        self.primitives = []

    def addPrimitive(self, primitive):
        self.primitives.append(primitive)

    def getPrimitives(self):
        return self.primitives



cadenCV-master/best_match.py
import cv2
import matplotlib.pyplot as plt
import numpy as np


def match(img, templates, start_percent, stop_percent, threshold):
    img_width, img_height = img.shape[::-1]
    best_location_count = -1
    best_locations = []
    best_scale = 1

    # plt.axis([0, 2, 0, 1])
    # plt.show(block=False)

    x = []
    y = []
    for scale in [i/100.0 for i in range(start_percent, stop_percent + 1, 3)]:
        locations = []
        location_count = 0

        for template in templates:
            if (scale*template.shape[0] > img.shape[0] or scale*template.shape[1] > img.shape[1]):
                continue

            template = cv2.resize(template, None,
                fx = scale, fy = scale, interpolation = cv2.INTER_CUBIC)
            result = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)
            result = np.where(result >= threshold)
            location_count += len(result[0])
            locations += [result]

        # print("scale: {0}, hits: {1}".format(scale, location_count))
        x.append(location_count)
        y.append(scale)
        # plt.plot(y, x)
        # plt.pause(0.00001)
        if (location_count > best_location_count):
            best_location_count = location_count
            best_locations = locations
            best_scale = scale
            # plt.axis([0, 2, 0, best_location_count])
        elif (location_count < best_location_count):
            pass
    # plt.close()

    return best_locations, best_scale




cadenCV-master/binarized.jpg


cadenCV-master/box.py
import cv2
import math

class BoundingBox(object):
    def __init__(self, x, y, w, h):
        self.x = x;
        self.y = y;
        self.w = w;
        self.h = h;
        self.middle = self.x + self.w/2, self.y + self.h/2
        self.area = self.w * self.h

    def overlap(self, other):
        overlap_x = max(0, min(self.x + self.w, other.x + other.w) - max(self.x, other.x));
        overlap_y = max(0, min(self.y + self.h, other.y + other.h) - max(self.y, other.y));
        overlap_area = overlap_x * overlap_y
        return overlap_area / self.area

    def distance(self, other):
        dx = self.middle[0] - other.middle[0]
        dy = self.middle[1] - other.middle[1]
        return math.sqrt(dx*dx + dy*dy)

    def merge(self, other):
        x = min(self.x, other.x)
        y = min(self.y, other.y)
        w = max(self.x + self.w, other.x + other.w) - x
        h = max(self.y + self.h, other.y + other.h) - y
        return BoundingBox(x, y, w, h)

    def draw(self, img, color, thickness):
        pos = ((int)(self.x), (int)(self.y))
        size = ((int)(self.x + self.w), (int)(self.y + self.h))
        cv2.rectangle(img, pos, size, color, thickness)

    def getCorner(self):
        return self.x, self.y

    def getWidth(self):
        return self.w

    def getHeight(self):
        return self.h

    def getCenter(self):
        return self.middle




cadenCV-master/main.py
#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
6.819 Advances in Computer Vision
Bill Freeman, Antonio Torralba

Final Project - Optical Music Recognition Program
cadenCV
"""
__author__ = "Afika Nyati"
__email__ = "anyati@mit.edu"
__status__ = "Prototype"

# cv2.imshow("Input", no_staff_img)
# cv2.waitKey(0)

#-------------------------------------------------------------------------------
# Import Statements
#-------------------------------------------------------------------------------

import sys
import cv2
import numpy as np
from matplotlib import pyplot as plt
from collections import Counter
from copy import deepcopy
from PIL import Image
from midiutil.MidiFile import MIDIFile

from best_match import match
from box import BoundingBox
from staff import Staff
from primitive import Primitive
from bar import Bar

#-------------------------------------------------------------------------------
# Template Paths
#-------------------------------------------------------------------------------


clef_paths = {
    "treble": [
        "resources/template/clef/treble_1.jpg",
        "resources/template/clef/treble_2.jpg"
    ],
    "bass": [
        "resources/template/clef/bass_1.jpg"
    ]
}

accidental_paths = {
    "sharp": [
        "resources/template/sharp-line.png",
        "resources/template/sharp-space.png"
    ],
    "flat": [
        "resources/template/flat-line.png",
        "resources/template/flat-space.png"
    ]
}

note_paths = {
    "quarter": [
        "resources/template/note/quarter.png",
        "resources/template/note/solid-note.png"
    ],
    "half": [
        "resources/template/note/half-space.png",
        "resources/template/note/half-note-line.png",
        "resources/template/note/half-line.png",
        "resources/template/note/half-note-space.png"
    ],
    "whole": [
        "resources/template/note/whole-space.png",
        "resources/template/note/whole-note-line.png",
        "resources/template/note/whole-line.png",
        "resources/template/note/whole-note-space.png"
    ]
}
rest_paths = {
    "eighth": ["resources/template/rest/eighth_rest.jpg"],
    "quarter": ["resources/template/rest/quarter_rest.jpg"],
    "half": ["resources/template/rest/half_rest_1.jpg",
            "resources/template/rest/half_rest_2.jpg"],
    "whole": ["resources/template/rest/whole_rest.jpg"]
}

flag_paths = ["resources/template/flag/eighth_flag_1.jpg",
                "resources/template/flag/eighth_flag_2.jpg",
                "resources/template/flag/eighth_flag_3.jpg",
                "resources/template/flag/eighth_flag_4.jpg",
                "resources/template/flag/eighth_flag_5.jpg",
                "resources/template/flag/eighth_flag_6.jpg"]

barline_paths = ["resources/template/barline/barline_1.jpg",
                 "resources/template/barline/barline_2.jpg",
                 "resources/template/barline/barline_3.jpg",
                 "resources/template/barline/barline_4.jpg"]

#-------------------------------------------------------------------------------
# Template Images
#-------------------------------------------------------------------------------

# Clefs
clef_imgs = {
    "treble": [cv2.imread(clef_file, 0) for clef_file in clef_paths["treble"]],
    "bass": [cv2.imread(clef_file, 0) for clef_file in clef_paths["bass"]]
}

# Time Signatures
time_imgs = {
    "common": [cv2.imread(time, 0) for time in ["resources/template/time/common.jpg"]],
    "44": [cv2.imread(time, 0) for time in ["resources/template/time/44.jpg"]],
    "34": [cv2.imread(time, 0) for time in ["resources/template/time/34.jpg"]],
    "24": [cv2.imread(time, 0) for time in ["resources/template/time/24.jpg"]],
    "68": [cv2.imread(time, 0) for time in ["resources/template/time/68.jpg"]]
}

# Accidentals
sharp_imgs = [cv2.imread(sharp_files, 0) for sharp_files in accidental_paths["sharp"]]
flat_imgs = [cv2.imread(flat_file, 0) for flat_file in accidental_paths["flat"]]

# Notes
quarter_note_imgs = [cv2.imread(quarter, 0) for quarter in note_paths["quarter"]]
half_note_imgs = [cv2.imread(half, 0) for half in note_paths["half"]]
whole_note_imgs = [cv2.imread(whole, 0) for whole in note_paths['whole']]

# Rests
eighth_rest_imgs = [cv2.imread(eighth, 0) for eighth in rest_paths["eighth"]]
quarter_rest_imgs = [cv2.imread(quarter, 0) for quarter in rest_paths["quarter"]]
half_rest_imgs = [cv2.imread(half, 0) for half in rest_paths["half"]]
whole_rest_imgs = [cv2.imread(whole, 0) for whole in rest_paths['whole']]

# Eighth Flag
eighth_flag_imgs = [cv2.imread(flag, 0) for flag in flag_paths]

# Bar line
bar_imgs = [cv2.imread(barline, 0) for barline in barline_paths]


#-------------------------------------------------------------------------------
# Template Thresholds
#-------------------------------------------------------------------------------

# Clefs
clef_lower, clef_upper, clef_thresh = 50, 150, 0.88

# Time
time_lower, time_upper, time_thresh = 50, 150, 0.85

# Accidentals
sharp_lower, sharp_upper, sharp_thresh = 50, 150, 0.70
flat_lower, flat_upper, flat_thresh = 50, 150, 0.77

# Notes
quarter_note_lower, quarter_note_upper, quarter_note_thresh = 50, 150, 0.70
half_note_lower, half_note_upper, half_note_thresh = 50, 150, 0.70
whole_note_lower, whole_note_upper, whole_note_thresh = 50, 150, 0.7011

# Rests
eighth_rest_lower, eighth_rest_upper, eighth_rest_thresh = 50, 150, 0.75 # Before was 0.7
quarter_rest_lower, quarter_rest_upper, quarter_rest_thresh = 50, 150, 0.70
half_rest_lower, half_rest_upper, half_rest_thresh = 50, 150, 0.80
whole_rest_lower, whole_rest_upper, whole_rest_thresh = 50, 150, 0.80

# Eighth Flag
eighth_flag_lower, eighth_flag_upper, eighth_flag_thresh = 50, 150, 0.8

# Bar line
bar_lower, bar_upper, bar_thresh = 50, 150, 0.85

#-------------------------------------------------------------------------------
# Mapping Functions
#-------------------------------------------------------------------------------

pitch_to_MIDI = {
    "C8": 108,
    "B7": 107,
    "Bb7": 106,
    "A#7": 106,
    "A7": 105,
    "Ab7": 104,
    "G#7": 104,
    "G7": 103,
    "Gb7": 102,
    "F#7": 102,
    "F7": 101,
    "E7": 100,
    "Eb7": 99,
    "D#7": 99,
    "D7": 98,
    "Db7": 97,
    "C#7": 97,
    "C7": 96,
    "B6": 95,
    "Bb6": 94,
    "A#6": 94,
    "A6": 93,
    "Ab6": 92,
    "G#6": 92,
    "G6": 91,
    "Gb6": 90,
    "F#6": 90,
    "F6": 89,
    "E6": 88,
    "Eb6": 87,
    "D#6": 87,
    "D6": 86,
    "Db6": 85,
    "C#6": 85,
    "C6": 84,
    "B5": 83,
    "Bb5": 82,
    "A#5": 82,
    "A5": 81,
    "Ab5": 80,
    "G#5": 80,
    "G5": 79,
    "Gb5": 78,
    "F#5": 78,
    "F5": 77,
    "E5": 76,
    "Eb5": 75,
    "D#5": 75,
    "D5": 74,
    "Db5": 73,
    "C#5": 73,
    "C5": 72,
    "B4": 71,
    "Bb4": 70,
    "A#4": 70,
    "A4": 69,
    "Ab4": 68,
    "G#4": 68,
    "G4": 67,
    "Gb4": 66,
    "F#4": 66,
    "F4": 65,
    "E4": 64,
    "Eb4": 63,
    "D#4": 63,
    "D4": 62,
    "Db4": 61,
    "C#4": 61,
    "C4": 60,
    "B3": 59,
    "Bb3": 58,
    "A#3": 58,
    "A3": 57,
    "Ab3": 56,
    "G#3": 56,
    "G3": 55,
    "Gb3": 54,
    "F#3": 54,
    "F3": 53,
    "E3": 52,
    "Eb3": 51,
    "D#3": 51,
    "D3": 50,
    "Db3": 49,
    "C#3": 49,
    "C3": 48,
    "B2": 47,
    "Bb2": 46,
    "A#2": 46,
    "A2": 45,
    "Ab2": 44,
    "G#2": 44,
    "G2": 43,
    "Gb2": 42,
    "F#2": 42,
    "F2": 41,
    "E2": 40,
    "Eb2": 39,
    "D#2": 39,
    "D2": 38,
    "Db2": 37,
    "C#2": 37,
    "C2": 36,
    "B1": 35,
    "Bb1": 34,
    "A#1": 34,
    "A1": 33,
    "Ab1": 32,
    "G#1": 32,
    "G1": 31,
    "Gb1": 30,
    "F#1": 30,
    "F1": 29,
    "E1": 28,
    "Eb1": 27,
    "D#1": 27,
    "D1": 26,
    "Db1": 25,
    "C#1": 25,
    "C1": 24,
    "B0": 23,
    "Bb0": 22,
    "A#0": 22,
    "A0": 21
}

MIDI_to_pitch = {
    108: "C8",
    107: "B7",
    106: "A#7",
    105: "A7",
    104: "G#7",
    103: "G7",
    102: "F#7",
    101: "F7",
    100: "E7",
    99: "D#7",
    98: "D7",
    97: "C#7",
    96: "C7",
    95: "B6",
    94: "A#6",
    93: "A6",
    92: "G#6",
    91: "G6",
    90: "F#6",
    89: "F6",
    88: "E6",
    87: "D#6",
    86: "D6",
    85: "C#6",
    84: "C6",
    83: "B5",
    82: "A#5",
    81: "A5",
    80: "G#5",
    79: "G5",
    78: "F#5",
    77: "F5",
    76: "E5",
    75: "D#5",
    74: "D5",
    73: "C#5",
    72: "C5",
    71: "B4",
    70: "A#4",
    69: "A4",
    68: "G#4",
    67: "G4",
    66: "F#4",
    65: "F4",
    64: "E4",
    63: "D#4",
    62: "D4",
    61: "C#4",
    60: "C4",
    59: "B3",
    58: "A#3",
    57: "A3",
    56: "G#3",
    55: "G3",
    54: "F#3",
    53: "F3",
    52: "E3",
    51: "D#3",
    50: "D3",
    49: "C#3",
    48: "C3",
    47: "B2",
    46: "A#2",
    45: "A2",
    44: "G#2",
    43: "G2",
    42: "F#2",
    41: "F2",
    40: "E2",
    39: "D#2",
    38: "D2",
    37: "C#2",
    36: "C2",
    35: "B1",
    34: "A#1",
    33: "A1",
    32: "G#1",
    31: "G1",
    30: "F#1",
    29: "F1",
    28: "E1",
    27: "D#1",
    26: "D1",
    25: "C#1",
    24: "C1",
    23: "B0",
    22: "A#0",
    21: "A0"
}

key_signature_changes = {
    "sharp": ["", "F", "FC", "FCG", "FCGD", "FCGDA", "FCGDAE", "FCGDAEB"],
    "flat": ["", "B", "BE", "BEA", "BEAD", "BEADG", "BEADGC", "BEADGCF"]
}

#-------------------------------------------------------------------------------
# General Functions
#-------------------------------------------------------------------------------

def deskew(img):
    skew_img = cv2.bitwise_not(img)  # Invert image

    # grab the (x, y) coordinates of all pixel values that
    # are greater than zero, then use these coordinates to
    # compute a rotated bounding box that contains all
    # coordinates
    coords = np.column_stack(np.where(skew_img > 0))
    angle = cv2.minAreaRect(coords)[-1]

    # the `cv2.minAreaRect` function returns values in the
    # range [-90, 0); as the rectangle rotates clockwise the
    # returned angle trends to 0 -- in this special case we
    # need to add 90 degrees to the angle
    if angle < -45:
        angle = -(90 + angle)

    # otherwise, just take the inverse of the angle to make
    # it positive
    else:
        angle = -angle

    # rotate the image to deskew it
    (h, w) = img.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(img, M, (w, h),
                             flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)

    return angle, rotated


def get_ref_lengths(img):
    num_rows = img.shape[0]  # Image Height (number of rows)
    num_cols = img.shape[1]  # Image Width (number of columns)
    rle_image_white_runs = []  # Cumulative white run list
    rle_image_black_runs = []  # Cumulative black run list
    sum_all_consec_runs = []  # Cumulative consecutive black white runs

    for i in range(num_cols):
        col = img[:, i]
        rle_col = []
        rle_white_runs = []
        rle_black_runs = []
        run_val = 0  # (The number of consecutive pixels of same value)
        run_type = col[0]  # Should be 255 (white) initially
        for j in range(num_rows):
            if (col[j] == run_type):
                # increment run length
                run_val += 1
            else:
                # add previous run length to rle encoding
                rle_col.append(run_val)
                if (run_type == 0):
                    rle_black_runs.append(run_val)
                else:
                    rle_white_runs.append(run_val)

                # alternate run type
                run_type = col[j]
                # increment run_val for new value
                run_val = 1

        # add final run length to encoding
        rle_col.append(run_val)
        if (run_type == 0):
            rle_black_runs.append(run_val)
        else:
            rle_white_runs.append(run_val)

        # Calculate sum of consecutive vertical runs
        sum_rle_col = [sum(rle_col[i: i + 2]) for i in range(len(rle_col))]

        # Add to column accumulation list
        rle_image_white_runs.extend(rle_white_runs)
        rle_image_black_runs.extend(rle_black_runs)
        sum_all_consec_runs.extend(sum_rle_col)

    white_runs = Counter(rle_image_white_runs)
    black_runs = Counter(rle_image_black_runs)
    black_white_sum = Counter(sum_all_consec_runs)

    line_spacing = white_runs.most_common(1)[0][0]
    line_width = black_runs.most_common(1)[0][0]
    width_spacing_sum = black_white_sum.most_common(1)[0][0]

    assert (line_spacing + line_width == width_spacing_sum), "Estimated Line Thickness + Spacing doesn't correspond with Most Common Sum "

    return line_width, line_spacing


def find_staffline_rows(img, line_width, line_spacing):
    num_rows = img.shape[0]  # Image Height (number of rows)
    num_cols = img.shape[1]  # Image Width (number of columns)
    row_black_pixel_histogram = []

    # Determine number of black pixels in each row
    for i in range(num_rows):
        row = img[i]
        num_black_pixels = 0
        for j in range(len(row)):
            if (row[j] == 0):
                num_black_pixels += 1

        row_black_pixel_histogram.append(num_black_pixels)

    # plt.bar(np.arange(num_rows), row_black_pixel_histogram)
    # plt.show()

    all_staff_row_indices = []
    num_stafflines = 5
    threshold = 0.4
    staff_length = num_stafflines * (line_width + line_spacing) - line_spacing
    iter_range = num_rows - staff_length + 1

    # Find stafflines by finding sum of rows that occur according to
    # staffline width and staffline space which contain as many black pixels
    # as a thresholded value (based of width of page)
    #
    # Filter out using condition that all lines in staff
    # should be above a threshold of black pixels
    current_row = 0
    while (current_row < iter_range):
        staff_lines = [row_black_pixel_histogram[j: j + line_width] for j in
                       range(current_row, current_row + (num_stafflines - 1) * (line_width + line_spacing) + 1,
                             line_width + line_spacing)]
        pixel_avg = sum(sum(staff_lines, [])) / (num_stafflines * line_width)

        for line in staff_lines:
            if (sum(line) / line_width < threshold * num_cols):
                current_row += 1
                break
        else:
            staff_row_indices = [list(range(j, j + line_width)) for j in
                                 range(current_row,
                                       current_row + (num_stafflines - 1) * (line_width + line_spacing) + 1,
                                       line_width + line_spacing)]
            all_staff_row_indices.append(staff_row_indices)
            current_row = current_row + staff_length

    return all_staff_row_indices


def find_staffline_columns(img, all_staffline_vertical_indices, line_width, line_spacing):
    num_rows = img.shape[0]  # Image Height (number of rows)
    num_cols = img.shape[1]  # Image Width (number of columns)
    # Create list of tuples of the form (column index, number of occurrences of width_spacing_sum)
    all_staff_extremes = []

    # Find start of staff for every staff in piece
    for i in range(len(all_staffline_vertical_indices)):
        begin_list = [] # Stores possible beginning column indices for staff
        end_list = []   # Stores possible end column indices for staff
        begin = 0
        end = num_cols - 1

        # Find staff beginning
        for j in range(num_cols // 2):
            first_staff_rows_isolated = img[all_staffline_vertical_indices[i][0][0]:all_staffline_vertical_indices[i][4][
                line_width - 1], j]
            num_black_pixels = len(list(filter(lambda x: x == 0, first_staff_rows_isolated)))

            if (num_black_pixels == 0):
                begin_list.append(j)

        # Find maximum column that has no black pixels in staff window
        list.sort(begin_list, reverse=True)
        begin = begin_list[0]

        # Find staff beginning
        for j in range(num_cols // 2, num_cols):
            first_staff_rows_isolated = img[all_staffline_vertical_indices[i][0][0]:all_staffline_vertical_indices[i][4][
                line_width - 1], j]
            num_black_pixels = len(list(filter(lambda x: x == 0, first_staff_rows_isolated)))

            if (num_black_pixels == 0):
                end_list.append(j)

        # Find maximum column that has no black pixels in staff window
        list.sort(end_list)
        end = end_list[0]

        staff_extremes = (begin, end)
        all_staff_extremes.append(staff_extremes)

    return all_staff_extremes


def remove_stafflines(img, all_staffline_vertical_indices):
    no_staff_img = deepcopy(img)
    for staff in all_staffline_vertical_indices:
        for line in staff:
            for row in line:
                # Remove top and bottom line to be sure
                no_staff_img[row - 1, :] = 255
                no_staff_img[row, :] = 255
                no_staff_img[row + 1, :] = 255

    return no_staff_img


def open_file(path):
    img = Image.open(path)
    img.show()


def locate_templates(img, templates, start, stop, threshold):
    locations, scale = match(img, templates, start, stop, threshold)
    img_locations = []
    for i in range(len(templates)):
        w, h = templates[i].shape[::-1]
        w *= scale
        h *= scale
        img_locations.append([BoundingBox(pt[0], pt[1], w, h) for pt in zip(*locations[i][::-1])])
    return img_locations


def merge_boxes(boxes, threshold):
    filtered_boxes = []
    while len(boxes) > 0:
        r = boxes.pop(0)
        boxes.sort(key=lambda box: box.distance(r))
        merged = True
        while (merged):
            merged = False
            i = 0
            for _ in range(len(boxes)):
                if r.overlap(boxes[i]) > threshold or boxes[i].overlap(r) > threshold:
                    r = r.merge(boxes.pop(i))
                    merged = True
                elif boxes[i].distance(r) > r.w / 2 + boxes[i].w / 2:
                    break
                else:
                    i += 1
        filtered_boxes.append(r)
    return filtered_boxes


if __name__ == "__main__":

    #-------------------------------------------------------------------------------
    # Image Preprocessing (Blurring, Noise Removal, Binarization, Deskewing)
    #-------------------------------------------------------------------------------

    # Noise Removal: https://docs.opencv.org/3.3.1/d5/d69/tutorial_py_non_local_means.html
    # Deskewing: https://www.pyimagesearch.com/2017/02/20/text-skew-correction-opencv-python/
    # Binarization + Blurring (Otsu): https://docs.opencv.org/3.3.1/d7/d4d/tutorial_py_thresholding.html

    # ============ Read Image ============
    img_file = sys.argv[1:][0]
    img = cv2.imread(img_file, 0)

    # ============ Noise Removal ============

    img = cv2.fastNlMeansDenoising(img, None, 10, 7, 21)

    # ============ Binarization ============

    # Global Thresholding
    # retval, img = cv2.threshold(img,127,255,cv2.THRESH_BINARY)

    # Otsu's Thresholding
    retval, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    cv2.imwrite('binarized.jpg', img)

    # ============ Deskewing ============

    # angle, img = deskew(img)
    # print("[INFO] Deskew Angle: {:.3f}".format(angle))
    # cv2.imshow("Input", img)
    # cv2.waitKey(0)

    # ============ Reference Lengths ============
    # Reference lengths staff line thickness (staffline_height)
    # and vertical line distance within the same staff (staffspace_height)
    # computed, providing the basic scale for relative size comparisons

    # Use run-length encoding on columns to estimate staffline height and staffspace height

    line_width, line_spacing = get_ref_lengths(img)

    print("[INFO] Staff line Width: ", line_width)
    print("[INFO] Staff line Spacing: ", line_spacing)

    #-------------------------------------------------------------------------------
    # Staff Line Detection
    #-------------------------------------------------------------------------------

    # In practice, several horizontal projections on images with slightly different
    # rotation angles are computed to deal with not completely horizontal staff lines.
    # The projection with the highest local maxima is then chosen.

    # ============ Find Staff Line Rows ============

    all_staffline_vertical_indices = find_staffline_rows(img, line_width, line_spacing)
    print("[INFO] Found ", len(all_staffline_vertical_indices), " sets of staff lines")

    # ============ Find Staff Line Columns ============

    # Find column with largest index that has no black pixels

    all_staffline_horizontal_indices = find_staffline_columns(img, all_staffline_vertical_indices, line_width, line_spacing)
    print("[INFO] Found all staff line horizontal extremes")

    # ============ Show Detected Staffs ============
    staffs = []
    half_dist_between_staffs = (all_staffline_vertical_indices[1][0][0] - all_staffline_vertical_indices[0][4][line_width - 1])//2

    for i in range(len(all_staffline_vertical_indices)):
        # Create Bounding Box
        x = all_staffline_horizontal_indices[i][0]
        y = all_staffline_vertical_indices[i][0][0]
        width = all_staffline_horizontal_indices[i][1] - x
        height = all_staffline_vertical_indices[i][4][line_width - 1] - y
        staff_box = BoundingBox(x, y, width, height)

        # Create Cropped Staff Image
        staff_img = img[max(0, y - half_dist_between_staffs): min(y+ height + half_dist_between_staffs, img.shape[0] - 1), x:x+width]

        # Normalize Staff line Numbers to Cropped Image
        pixel = half_dist_between_staffs
        normalized_staff_line_vertical_indices = []

        for j in range(5):
            line = []
            for k in range(line_width):
                line.append(pixel)
                pixel += 1
            normalized_staff_line_vertical_indices.append(line)
            pixel += line_spacing + 1

        staff = Staff(normalized_staff_line_vertical_indices, staff_box, line_width, line_spacing, staff_img)
        staffs.append(staff)

    staff_boxes_img = img.copy()
    staff_boxes_img = cv2.cvtColor(staff_boxes_img, cv2.COLOR_GRAY2RGB)
    red = (0, 0, 255)
    box_thickness = 2
    for staff in staffs:
        box = staff.getBox()
        box.draw(staff_boxes_img, red, box_thickness)
        x = int(box.getCorner()[0] + (box.getWidth() // 2))
        y = int(box.getCorner()[1] + box.getHeight() + 35)
        cv2.putText(staff_boxes_img, "Staff", (x, y), cv2.FONT_HERSHEY_DUPLEX, 0.9 , red)

    cv2.imwrite('output/detected_staffs.jpg', staff_boxes_img)
    # open_file('output/detected_staffs.jpg')
    print("[INFO] Saving detected staffs onto disk")

    #-------------------------------------------------------------------------------
    # Symbol Segmentation, Object Recognition, and Semantic Reconstruction
    #-------------------------------------------------------------------------------

    # The score is then divided into regions of interest to localize and isolate the musical primitives.
    # Music score is analyzed and split by staves
    # Primitive symbols extracted

    # Find all primitives on each stave first
    # then move from left to right and create structure

    # ============ Determine Clef, Time Signature ============

    staff_imgs_color = []

    for i in range(len(staffs)):
        red = (0, 0, 255)
        box_thickness = 2
        staff_img = staffs[i].getImage()
        staff_img_color = staff_img.copy()
        staff_img_color = cv2.cvtColor(staff_img_color, cv2.COLOR_GRAY2RGB)

        # ------- Clef -------
        for clef in clef_imgs:
            print("[INFO] Matching {} clef template on staff".format(clef), i + 1)
            clef_boxes = locate_templates(staff_img, clef_imgs[clef], clef_lower, clef_upper, clef_thresh)
            clef_boxes = merge_boxes([j for i in clef_boxes for j in i], 0.5)

            if (len(clef_boxes) == 1):
                print("[INFO] Clef Found: ", clef)
                staffs[i].setClef(clef)

                # print("[INFO] Displaying Matching Results on staff", i + 1)
                clef_boxes_img = staffs[i].getImage()
                clef_boxes_img = clef_boxes_img.copy()

                for boxes in clef_boxes:
                    boxes.draw(staff_img_color, red, box_thickness)
                    x = int(boxes.getCorner()[0] + (boxes.getWidth() // 2))
                    y = int(boxes.getCorner()[1] + boxes.getHeight() + 10)
                    cv2.putText(staff_img_color, "{} clef".format(clef), (x, y), cv2.FONT_HERSHEY_DUPLEX, 0.9, red)
                break

        else:
            # A clef should always be found
            print("[INFO] No clef found on staff", i+1)

        # # ------- Time -------
        for time in time_imgs:
            print("[INFO] Matching {} time signature template on staff".format(time), i + 1)
            time_boxes = locate_templates(staff_img, time_imgs[time], time_lower, time_upper, time_thresh)
            time_boxes = merge_boxes([j for i in time_boxes for j in i], 0.5)

            if (len(time_boxes) == 1):
                print("[INFO] Time Signature Found: ", time)
                staffs[i].setTimeSignature(time)

                # print("[INFO] Displaying Matching Results on staff", i + 1)

                for boxes in time_boxes:
                    boxes.draw(staff_img_color, red, box_thickness)
                    x = int(boxes.getCorner()[0] - (boxes.getWidth() // 2))
                    y = int(boxes.getCorner()[1] + boxes.getHeight() + 20)
                    cv2.putText(staff_img_color, "{} time".format(time), (x, y), cv2.FONT_HERSHEY_DUPLEX, 0.9, red)
                break

            elif (len(time_boxes) == 0 and i > 0):
                # Take time signature of previous staff
                previousTime = staffs[i-1].getTimeSignature()
                staffs[i].setTimeSignature(previousTime)
                print("[INFO] No time signature found on staff", i + 1, ". Using time signature from previous staff line: ", previousTime)
                break
        else:
            print("[INFO] No time signature available for staff", i + 1)

        staff_imgs_color.append(staff_img_color)

    # ============ Find Primitives ============

    # always assert that notes in a bar equal duration dictated by time signature
    for i in range(len(staffs)):
        print("[INFO] Finding Primitives on Staff ", i+1)
        staff_primitives = []
        staff_img = staffs[i].getImage()
        staff_img_color = staff_imgs_color[i]
        red = (0, 0, 255)
        box_thickness = 2

        # ------- Find primitives on staff -------
        print("[INFO] Matching sharp accidental template...")
        sharp_boxes = locate_templates(staff_img, sharp_imgs, sharp_lower, sharp_upper, sharp_thresh)
        sharp_boxes = merge_boxes([j for i in sharp_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in sharp_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "sharp"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            sharp = Primitive("sharp", 0, box)
            staff_primitives.append(sharp)

        print("[INFO] Matching flat accidental template...")
        flat_boxes = locate_templates(staff_img, flat_imgs, flat_lower, flat_upper, flat_thresh)
        flat_boxes = merge_boxes([j for i in flat_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in flat_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "flat"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            flat = Primitive("flat", 0, box)
            staff_primitives.append(flat)

        print("[INFO] Matching quarter note template...")
        quarter_boxes = locate_templates(staff_img, quarter_note_imgs, quarter_note_lower, quarter_note_upper, quarter_note_thresh)
        quarter_boxes = merge_boxes([j for i in quarter_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in quarter_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/4 note"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            pitch = staffs[i].getPitch(round(box.getCenter()[1]))
            quarter = Primitive("note", 1, box, pitch)
            staff_primitives.append(quarter)

        print("[INFO] Matching half note template...")
        half_boxes = locate_templates(staff_img, half_note_imgs, half_note_lower, half_note_upper, half_note_thresh)
        half_boxes = merge_boxes([j for i in half_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in half_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/2 note"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            pitch = staffs[i].getPitch(round(box.getCenter()[1]))
            half = Primitive("note", 2, box, pitch)
            staff_primitives.append(half)

        print("[INFO] Matching whole note template...")
        whole_boxes = locate_templates(staff_img, whole_note_imgs, whole_note_lower, whole_note_upper, whole_note_thresh)
        whole_boxes = merge_boxes([j for i in whole_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in whole_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1 note"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            pitch = staffs[i].getPitch(round(box.getCenter()[1]))
            whole = Primitive("note", 4, box, pitch)
            staff_primitives.append(whole)

        print("[INFO] Matching eighth rest template...")
        eighth_boxes = locate_templates(staff_img, eighth_rest_imgs, eighth_rest_lower, eighth_rest_upper, eighth_rest_thresh)
        eighth_boxes = merge_boxes([j for i in eighth_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in eighth_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/8 rest"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            eighth = Primitive("rest", 0.5, box)
            staff_primitives.append(eighth)

        print("[INFO] Matching quarter rest template...")
        quarter_boxes = locate_templates(staff_img, quarter_rest_imgs, quarter_rest_lower, quarter_rest_upper, quarter_rest_thresh)
        quarter_boxes = merge_boxes([j for i in quarter_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in quarter_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/4 rest"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            quarter = Primitive("rest", 1, box)
            staff_primitives.append(quarter)

        print("[INFO] Matching half rest template...")
        half_boxes = locate_templates(staff_img, half_rest_imgs, half_rest_lower, half_rest_upper, half_rest_thresh)
        half_boxes = merge_boxes([j for i in half_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in half_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/2 rest"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            half = Primitive("rest", 2, box)
            staff_primitives.append(half)

        print("[INFO] Matching whole rest template...")
        whole_boxes = locate_templates(staff_img, whole_rest_imgs, whole_rest_lower, whole_rest_upper, whole_rest_thresh)
        whole_boxes = merge_boxes([j for i in whole_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in whole_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1 rest"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            whole = Primitive("rest", 4, box)
            staff_primitives.append(whole)

        print("[INFO] Matching eighth flag template...")
        flag_boxes = locate_templates(staff_img, eighth_flag_imgs, eighth_flag_lower, eighth_flag_upper, eighth_flag_thresh)
        flag_boxes = merge_boxes([j for i in flag_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)

        for box in flag_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "1/8 flag"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            flag = Primitive("eighth_flag", 0, box)
            staff_primitives.append(flag)

        print("[INFO] Matching bar line template...")
        bar_boxes = locate_templates(staff_img, bar_imgs, bar_lower, bar_upper, bar_thresh)
        bar_boxes = merge_boxes([j for i in bar_boxes for j in i], 0.5)

        print("[INFO] Displaying Matching Results on staff", i + 1)
        for box in bar_boxes:
            box.draw(staff_img_color, red, box_thickness)
            text = "line"
            font = cv2.FONT_HERSHEY_DUPLEX
            textsize = cv2.getTextSize(text, font, fontScale=0.7, thickness=1)[0]
            x = int(box.getCorner()[0] - (textsize[0] // 2))
            y = int(box.getCorner()[1] + box.getHeight() + 20)
            cv2.putText(staff_img_color, text, (x, y), font, fontScale=0.7, color=red, thickness=1)
            line = Primitive("line", 0, box)
            staff_primitives.append(line)

        print("[INFO] Saving detected primitives in staff {} onto disk".format(i+1))
        cv2.imwrite("output/staff_{}_primitives.jpg".format(i+1), staff_img_color)
        # open_file("output/staff_{}_primitives.jpg".format(i+1))

        # ------- Sort primitives on staff from left to right -------

        staff_primitives.sort(key=lambda primitive: primitive.getBox().getCenter())

        print("[INFO] Staff primitives sorted in time")
        eighth_flag_indices = []
        for j in range(len(staff_primitives)):

            if (staff_primitives[j].getPrimitive() == "eighth_flag"):
                # Find all eighth flags
                eighth_flag_indices.append(j)

            if (staff_primitives[j].getPrimitive() == "note"):
                print(staff_primitives[j].getPitch(), end=", ")
            else:
                print(staff_primitives[j].getPrimitive(), end=", ")

        print("\n")

        # ------- Correct for eighth notes -------
        print("[INFO] Correcting for misclassified eighth notes")
        # Sort out eighth flags
        # Assign to closest note
        for j in eighth_flag_indices:

            distances = []
            distance = staff_primitives[j].getBox().distance(staff_primitives[j-1].getBox())
            distances.append(distance)
            if (j + 1 < len(staff_primitives)):
                distance = staff_primitives[j].getBox().distance(staff_primitives[j+1].getBox())
                distances.append(distance)

            if (distances[1] and distances[0] > distances[1]):
                staff_primitives[j+1].setDuration(0.5)
            else:
                staff_primitives[j-1].setDuration(0.5)

            print("[INFO] Primitive {} was a eighth note misclassified as a quarter note".format(j+1))
            del staff_primitives[j]

        # Correct for beamed eighth notes
        # If number of pixels in center row of two notes
        # greater than 5 * line_width, then notes are
        # beamed
        for j in range(len(staff_primitives)):
            if (j+1 < len(staff_primitives)
                and staff_primitives[j].getPrimitive() == "note"
                and staff_primitives[j+1].getPrimitive() == "note"
                and (staff_primitives[j].getDuration() == 1 or staff_primitives[j].getDuration() == 0.5)
                and staff_primitives[j+1].getDuration() == 1):

                # Notes of interest
                note_1_center_x = staff_primitives[j].getBox().getCenter()[0]
                note_2_center_x = staff_primitives[j+1].getBox().getCenter()[0]

                # Regular number of black pixels in staff column
                num_black_pixels = 5 * staffs[i].getLineWidth()

                # Actual number of black pixels in mid column
                center_column = (note_2_center_x - note_1_center_x) // 2
                mid_col = staff_img[:, int(note_1_center_x + center_column)]
                num_black_pixels_mid = len(np.where(mid_col == 0)[0])

                if (num_black_pixels_mid > num_black_pixels):
                    # Notes beamed
                    # Make eighth note length
                    staff_primitives[j].setDuration(0.5)
                    staff_primitives[j+1].setDuration(0.5)
                    print("[INFO] Primitive {} and {} were eighth notes misclassified as quarter notes".format(j+1, j+2))

        # ------- Account for Key Signature -------
        print("[INFO] Applying key signature note value changes")
        num_sharps = 0
        num_flats = 0
        j = 0
        while (staff_primitives[j].getDuration() == 0):
            accidental = staff_primitives[j].getPrimitive()
            if (accidental == "sharp"):
                num_sharps += 1
                j += 1

            elif (accidental == "flat"):
                num_flats += 1
                j += 1

        # Check if last accidental belongs to note

        if (j != 0):
            # Determine if accidental coupled with first note
            # Center of accidental should be within a note width from note
            max_accidental_offset_x = staff_primitives[j].getBox().getCenter()[0] - staff_primitives[j].getBox().getWidth()
            accidental_center_x = staff_primitives[j-1].getBox().getCenter()[0]
            accidental_type = staff_primitives[j-1].getPrimitive()

            if (accidental_center_x > max_accidental_offset_x):
                print("[INFO] Last accidental belongs to first note")
                num_sharps = num_sharps - 1 if accidental_type == "sharp" else num_sharps
                num_flats = num_flats - 1 if accidental_type == "flat" else num_flats

            # Modify notes in staff
            notes_to_modify = []
            if (accidental_type == "sharp"):
                print("[INFO] Key signature has {} sharp accidentals: ".format(num_sharps))
                notes_to_modify = key_signature_changes[accidental_type][num_sharps]
                # Remove accidentals from primitive list
                staff_primitives = staff_primitives[num_sharps:]
            else:
                print("[INFO] Key signature has {} flat accidentals: ".format(num_flats))
                notes_to_modify = key_signature_changes[accidental_type][num_flats]
                # Remove accidentals from primitive list
                staff_primitives = staff_primitives[num_flats:]

            print("[INFO] Corrected note values after key signature: ")
            for primitive in staff_primitives:
                type = primitive.getPrimitive()
                note = primitive.getPitch()
                if (type == "note" and note[0] in notes_to_modify):
                    new_note = MIDI_to_pitch[pitch_to_MIDI[note] + 1] if accidental_type == "sharp" else MIDI_to_pitch[pitch_to_MIDI[note] - 1]
                    primitive.setPitch(new_note)

                if (primitive.getPrimitive() == "note"):
                    print(primitive.getPitch(), end=", ")
                else:
                    print(primitive.getPrimitive(), end=", ")

            print("\n")

        # ------- Apply Sharps and Flats -------
        print("[INFO] Applying any accidental to neighboring note")
        primitive_indices_to_remove = []
        for j in range(len(staff_primitives)):
            accidental_type = staff_primitives[j].getPrimitive()

            if (accidental_type == "flat" or accidental_type == "sharp"):
                max_accidental_offset_x = staff_primitives[j+1].getBox().getCenter()[0] - staff_primitives[j+1].getBox().getWidth()
                accidental_center_x = staff_primitives[j].getBox().getCenter()[0]
                primitive_type = staff_primitives[j+1].getPrimitive()

                if (accidental_center_x > max_accidental_offset_x and primitive_type == "note"):
                    print("Primitive has accidental associated with it")
                    note = staff_primitives[j+1].getPitch()
                    new_note = MIDI_to_pitch[pitch_to_MIDI[note] + 1] if accidental_type == "sharp" else MIDI_to_pitch[pitch_to_MIDI[note] - 1]
                    staff_primitives[j+1].setPitch(new_note)
                    primitive_indices_to_remove.append(i)

        # Removed actioned accidentals
        for j in primitive_indices_to_remove:
            del staff_primitives[j]

        print("[INFO] Corrected note values after accidentals: ")
        for j in range(len(staff_primitives)):
            if (staff_primitives[j].getPrimitive() == "note"):
                print(staff_primitives[j].getPitch(), end=", ")
            else:
                print(staff_primitives[j].getPrimitive(), end=", ")

        print("\n")


        # ------- Assemble Staff -------

        print("[INFO] Assembling current staff")
        bar = Bar()
        while (len(staff_primitives) > 0):
            primitive = staff_primitives.pop(0)

            if (primitive.getPrimitive() != "line"):
                bar.addPrimitive(primitive)
            else:
                staffs[i].addBar(bar)
                bar = Bar()
        # Add final bar in staff
        staffs[i].addBar(bar)

    # -------------------------------------------------------------------------------
    # Sequence MIDI
    # -------------------------------------------------------------------------------

    print("[INFO] Sequencing MIDI")
    midi = MIDIFile(1)
    track = 0
    time = 0
    channel = 0
    volume = 100

    midi.addTrackName(track, time, "Track")
    midi.addTempo(track, time, 110)

    for i in range(len(staffs)):
        print("==== Staff {} ====".format(i+1))
        bars = staffs[i].getBars()
        for j in range(len(bars)):
            print("--- Bar {} ---".format(j + 1))
            primitives = bars[j].getPrimitives()
            for k in range(len(primitives)):
                duration = primitives[k].getDuration()
                if (primitives[k].getPrimitive() == "note"):
                    pitch = pitch_to_MIDI[primitives[k].getPitch()]
                    midi.addNote(track, channel, pitch, time, duration, volume)
                print(primitives[k].getPrimitive())
                print(primitives[k].getPitch())
                print(primitives[k].getDuration())
                print("-----")
                time += duration

    # ------- Write to disk -------
    print("[INFO] Writing MIDI to disk")
    binfile = open("output/output.mid", 'wb')
    midi.writeFile(binfile)
    binfile.close()














cadenCV-master/output/detected_staffs.jpg


cadenCV-master/output/output.mid


Track



cadenCV-master/output/staff_1_primitives.jpg


cadenCV-master/output/staff_2_primitives.jpg


cadenCV-master/output/staff_3_primitives.jpg


cadenCV-master/primitive.py
class Primitive(object):
    def __init__(self, primitive, duration, box, pitch=-1):
        self.pitch = pitch
        self.duration = duration
        self.primitive = primitive
        self.box = box

    def setPitch(self, pitch):
        self.pitch = pitch

    def setDuration(self, duration):
        self.duration = duration
    
    def getPrimitive(self):
        return self.primitive

    def getPitch(self):
        return self.pitch

    def getDuration(self):
        return self.duration

    def getBox(self):
        return self.box




cadenCV-master/resources/README/image1.jpg


cadenCV-master/resources/README/image2.jpg


cadenCV-master/resources/README/image3.jpg


cadenCV-master/resources/README/image4.jpg


cadenCV-master/resources/README/image5.jpg


cadenCV-master/resources/README/image6.jpg


cadenCV-master/resources/README/image7.jpg


cadenCV-master/resources/README/image8.jpg


cadenCV-master/resources/pitch_to_MIDI.jpg


cadenCV-master/resources/samples/drum.jpg


cadenCV-master/resources/samples/fire.jpg


cadenCV-master/resources/samples/hush.jpg


cadenCV-master/resources/samples/kookaburra.jpg


cadenCV-master/resources/samples/mary.jpg


cadenCV-master/resources/samples/races.jpg


cadenCV-master/resources/samples/teapot.jpg


cadenCV-master/resources/template/barline/barline_1.jpg


cadenCV-master/resources/template/barline/barline_2.jpg


cadenCV-master/resources/template/barline/barline_3.jpg


cadenCV-master/resources/template/barline/barline_4.jpg


cadenCV-master/resources/template/clef/bass_1.jpg


cadenCV-master/resources/template/clef/treble_1.jpg


cadenCV-master/resources/template/clef/treble_2.jpg


cadenCV-master/resources/template/flag/eighth_flag_1.jpg


cadenCV-master/resources/template/flag/eighth_flag_2.jpg


cadenCV-master/resources/template/flag/eighth_flag_3.jpg


cadenCV-master/resources/template/flag/eighth_flag_4.jpg


cadenCV-master/resources/template/flag/eighth_flag_5.jpg


cadenCV-master/resources/template/flag/eighth_flag_6.jpg


cadenCV-master/resources/template/flat-line.png


cadenCV-master/resources/template/flat-space.png


cadenCV-master/resources/template/note/half-line.png


cadenCV-master/resources/template/note/half-note-line.png


cadenCV-master/resources/template/note/half-note-space.png


cadenCV-master/resources/template/note/half-space.png


cadenCV-master/resources/template/note/quarter.png


cadenCV-master/resources/template/note/solid-note.png


cadenCV-master/resources/template/note/whole-line.png


cadenCV-master/resources/template/note/whole-note-line.png


cadenCV-master/resources/template/note/whole-note-space.png


cadenCV-master/resources/template/note/whole-space.png


cadenCV-master/resources/template/rest/eighth_rest.jpg


cadenCV-master/resources/template/rest/half_rest_1.jpg


cadenCV-master/resources/template/rest/half_rest_2.jpg


cadenCV-master/resources/template/rest/quarter_rest.jpg


cadenCV-master/resources/template/rest/whole_rest.jpg


cadenCV-master/resources/template/sharp-line.png


cadenCV-master/resources/template/sharp-space.png


cadenCV-master/resources/template/time/24.jpg


cadenCV-master/resources/template/time/34.jpg


cadenCV-master/resources/template/time/44.jpg


cadenCV-master/resources/template/time/68.jpg


cadenCV-master/resources/template/time/common.jpg


cadenCV-master/staff.py
import numpy as np

class Staff(object):
    def __init__(self, staff_matrix, staff_box, line_width, line_spacing, staff_img, clef="treble", time_signature="44", instrument=-1):
        self.clef = clef
        self.time_signature = time_signature
        self.instrument = instrument
        self.line_one = staff_matrix[0]
        self.line_two = staff_matrix[1]
        self.line_three = staff_matrix[2]
        self.line_four = staff_matrix[3]
        self.line_five = staff_matrix[4]
        self.staff_box = staff_box
        self.img = staff_img
        self.bars = []
        self.line_width = line_width
        self.line_spacing = line_spacing

    def setClef(self, clef):
        self.clef = clef

    def setTimeSignature(self, time):
        self.time_signature = time

    def setInstrument(self, instrument):
        self.instrument = instrument

    def addBar(self, bar):
        self.bars.append(bar)

    def getClef(self):
        return self.clef

    def getTimeSignature(self):
        return self.time_signature

    def getBox(self):
        return self.staff_box

    def getImage(self):
        return self.img

    def getLineWidth(self):
        return self.line_width

    def getLineSpacing(self):
        return self.line_spacing

    def getBars(self):
        return self.bars

    def getPitch(self, note_center_y):
        clef_info = {
            "treble": [("F5", "E5", "D5", "C5", "B4", "A4", "G4", "F4", "E4"), (5,3), (4,2)],
            "bass": [("A3", "G3", "F3", "E3", "D3", "C3", "B2", "A2", "G2"), (3,5), (2,4)]
        }
        note_names = ["C", "D", "E", "F", "G", "A", "B"]

        #print("[getPitch] Using {} clef".format(self.clef))

        # Check within staff first
        if (note_center_y in self.line_one):
            return clef_info[self.clef][0][0]
        elif (note_center_y in list(range(self.line_one[-1] + 1, self.line_two[0]))):
            return clef_info[self.clef][0][1]
        elif (note_center_y in self.line_two):
            return clef_info[self.clef][0][2]
        elif (note_center_y in list(range(self.line_two[-1] + 1, self.line_three[0]))):
            return clef_info[self.clef][0][3]
        elif (note_center_y in self.line_three):
            return clef_info[self.clef][0][4]
        elif (note_center_y in list(range(self.line_three[-1] + 1, self.line_four[0]))):
            return clef_info[self.clef][0][5]
        elif (note_center_y in self.line_four):
            return clef_info[self.clef][0][6]
        elif (note_center_y in list(range(self.line_four[-1] + 1, self.line_five[0]))):
            return clef_info[self.clef][0][7]
        elif (note_center_y in self.line_five):
            return clef_info[self.clef][0][8]
        else:
            # print("[getPitch] Note was not within staff")
            if (note_center_y < self.line_one[0]):
                # print("[getPitch] Note above staff ")
                # Check above staff
                line_below = self.line_one
                current_line = [pixel - self.line_spacing for pixel in self.line_one] # Go to next line above
                octave = clef_info[self.clef][1][0]  # The octave number at line one
                note_index = clef_info[self.clef][1][1]  # Line one's pitch has this index in note_names

                while (current_line[0] > 0):
                    if (note_center_y in current_line):
                        # Grab note two places above
                        octave = octave + 1 if (note_index + 2 >= 7) else octave
                        note_index = (note_index + 2) % 7
                        return note_names[note_index] + str(octave)
                    elif (note_center_y in range(current_line[-1] + 1, line_below[0])):
                        # Grab note one place above
                        octave = octave + 1 if (note_index + 1 >= 7) else octave
                        note_index = (note_index + 1) % 7
                        return note_names[note_index] + str(octave)
                    else:
                        # Check next line above
                        octave = octave + 1 if (note_index + 2 >= 7) else octave
                        note_index = (note_index + 2) % 7
                        line_below = current_line.copy()
                        current_line = [pixel - self.line_spacing for pixel in current_line]

                assert False, "[ERROR] Note was above staff, but not found"
            elif (note_center_y > self.line_five[-1]):
                # print("[getPitch] Note below staff ")
                # Check below staff
                line_above = self.line_five
                current_line = [pixel + self.line_spacing for pixel in self.line_five]  # Go to next line above
                octave = clef_info[self.clef][2][0]  # The octave number at line five
                note_index = clef_info[self.clef][2][1]  # Line five's pitch has this index in note_names

                while (current_line[-1] < self.img.shape[0]):
                    if (note_center_y in current_line):
                        # Grab note two places above
                        octave = octave - 1 if (note_index - 2 <= 7) else octave
                        note_index = (note_index - 2) % 7
                        return note_names[note_index] + str(octave)
                    elif (note_center_y in range(line_above[-1] + 1, current_line[0])):
                        # Grab note one place above
                        octave = octave - 1 if (note_index - 1 >= 7) else octave
                        note_index = (note_index - 1) % 7
                        return note_names[note_index] + str(octave)
                    else:
                        # Check next line above
                        octave = octave - 1 if (note_index - 2 <= 7) else octave
                        note_index = (note_index - 2) % 7
                        line_above = current_line.copy()
                        current_line = [pixel + self.line_spacing for pixel in current_line]
                assert False, "[ERROR] Note was below staff, but not found"
            else:
                # Should not get here
                assert False, "[ERROR] Note was neither, within, above or below staff"



reading content from C:\Users\Asus\Desktop\Bee\CN lab english (1).pdf


Adrian PECULEA     Bogdan IANCU     Sorin BUZURA     Vlad RAȚIU

Coordinators: Vasile Teodor DĂDÂRLAT, Emil CEBUC

Computer Networks
Practical activities

UTPRESS
Cluj-Napoca,2023

ISBN 978-606-737-633-3



Adrian PECULEA                                                                                 Bogdan IANCU 
Sorin BUZURA                                                                                          Vlad RAȚIU 
 

Coordinators: Vasile Teodor DĂDÂRLAT 
 Emil CEBUC 

 
 
 

 
 
 
 
 

COMPUTER NETWORKS 
Practical activities 

 
 
 
 
 
 
 

 
 
 
 
 
 

  
 

UTPRESS 
Cluj-Napoca, 2023 

ISBN  978-606-737-633-3 



Editura UTPRESS 
Str. Observatorului nr. 34 
400775 Cluj-Napoca 
Tel.: 0264-401.999 
e-mail: utpress@biblio.utcluj.ro
http://biblioteca.utcluj.ro/editura

Director: Ing. Dan Colțea 

 Recenzia: Prof.dr.ing. Gheorghe Sebestyen 
  Conf.dr.ing. Lia-Anca Hangan 

Pregătire format electronic on-line: Gabriela Groza 

Copyright © 2023 Editura UTPRESS 
Reproducerea integrală sau parţială a textului sau ilustraţiilor din această carte este posibilă numai cu 
acordul prealabil scris al editurii UTPRESS. 
Tiparul executat la Tipografia UTCN. 

ISBN 978-606-737-633-3 
Bun de tipar: 28.04.2023 

mailto:utpress@biblio.utcluj.ro
http://biblioteca.utcluj.ro/editura


 

Introduction 

 

Designed as an operational tool - support for (self) training activities, the book ,,Computer 

networks. Practical activities” aims to address a wide spectrum of problems and theoretical 

approaches, accompanied by real examples and practical applications based on the theoretical 

part. 

The book is addressed primarily to students following study programs at the Faculty of 

Automation and Computer Science, who are in their first contact with computer networks. At 

the same time, the issues addressed in the book, the theoretical content and practical exercises 

can serve as an invitation to all those interested in the study of computer networks used mainly 

in modern systems (teachers, researchers, students from other study fields, graduates, engineers 

of different specializations, etc.). The study material offers support to both students in 

individual and group study, orienting them towards efficient self-organization of their own 

activity, as well as to teachers in the optimization of the design-organization-evaluation 

processes, in order to ensure the quality of university training.  

The primary objective of the book is to provide specific information and prepare the reader for 

understanding, designing, and troubleshooting computer networks. This book uses, in an 

operational way, the contents of the "Computer networks" course, focusing mainly on creating 

learning opportunities, by providing various teaching tasks, exercises, analysis, reflections, 

questions and comments.  

The topics are designed in an active and interactive way and include essential theoretical 

elements, approaches to conceptual clarifications and classifications, completed by 

applications and tasks. The structure of the book is gradual in complexity. The practical tasks 

are not so much an end in themselves, but occasions, means of orientation towards the exercise 

of the abilities, the capacities that the students will use later, as an indicator of their 

professionalization in engineering.  

The first part presents the main cabled transmission media used in modern computer networks 

and the necessary tools and techniques used to analyzed and evaluated the correct functioning 

of computer networks. The network layer and its protocols, together with static routing 

strategies, are covered in the second part of the book. Network programming aspects are 

introduced in the third part, mainly software for socket applications and debugging network 

applications. The fourth part of the book presents aspects related to the organization of local 

and virtual networks. The final section of the book focuses on understanding and analyzing 

common security threats that occur in computer networks. 



Computer Networks. Practical activities 

2 

 

We hope that this book will help in developing the specific way of thinking in the field of 

engineering, will expand the spirit of teamwork between students and will streamline 

communication, contributing to increasing the quality of university education.  

 

The authors, 

Cluj-Napoca, 2023 



Computer Networks. Practical activities 

3 

 

Content 

 

CHAPTER 1: INTRODUCTION TO WIRESHARK AND PACKET TRACER .................... 4 

CHAPTER 2: COPPER BASED TRANSMISSION MEDIA AND UTP CABLING ........... 12 

CHAPTER 3: OPTICAL FIBERS AND COMPONENTS ..................................................... 20 

CHAPTER 4: STRUCTURED CABLING ............................................................................. 28 

CHAPTER 6: NETWORK LAYER – IPv4 ROUTING AND DHCP .................................... 46 

CHAPTER 7: NETWORK LAYER – IPv6 ............................................................................ 56 

CHAPTER 8: APPLICATION LAYER: NETWORK PROGRAMMING WITH  

SOCKETS ................................................................................................................................ 69 

CHAPTER 9: ETHERNET, ARP AND NDP ......................................................................... 78 

CHAPTER 10: VLANs, TRUNKING AND INTER-VLAN ROUTING ............................... 92 

CHAPTER 11: LAYER 2 NETWORKS, SPANNING TREE PROTOCOL, LINK 

AGGREGATION AND ETHERCHANNEL ........................................................................ 102 

CHAPTER 12: SECURITY THREATS IN COMPUTER NETWORKS ............................ 120 

 

  



Computer Networks. Practical activities 

4 

 

CHAPTER 1: INTRODUCTION TO WIRESHARK AND PACKET 

TRACER 

 

1. Objectives 

The objectives of this chapter encompass three aspects: 

● A brief continuation of the theoretical introduction to communication/networks and 

network stacks 

● Introduction to Wireshark 

● Introduction to Cisco Packet Tracer 

 

2. Theoretical considerations 

Please read the following before continuing. The notions presented in the practical activities 

are intended for use in strictly ethical and legal ways. Any other use of data derived from the 

information presented henceforth may be subject to the furthest prosecution of the law and in 

continuing these practical activities and using the information presented the students 

acknowledge that the Technical University of Cluj-Napoca and the staff involved are in no way 

liable concerning any illegal action undertaken by the entities with access to the materials 

presented in this book. Please use all the knowledge you are about to acquire in ethical and 

legal ways. 

2.1 Communication/Networking 

In order to successfully communicate, devices need rules. Generally speaking, devices fall into 

one of two categories: endpoint devices and network devices. Endpoint devices represent the 

communicating entities, whilst network devices represent the necessary infrastructure devices 

which are required for communication (e.g. houses and postal services; physical locations and 

roads, signs & regulations). 

2.2 Network Stacks 

Network stacks are an essential concept to networking. Please consider the important terms and 

differences between them. A stack model represents a separation of functions (which is subject 

to IEEE regulations and directives) when handling networking. An actual stack represents the 

exact combination of protocols implemented at each layer and their specific configuration (e.g. 

a decent analogy: a breakfast might be milk and cereal as a stack model, but as a stack it might 

be organic 3.5% fat milk and buckwheat cereal). The contents of this practical activity will 

mainly work with the TCP/IP stack model (Figure 1.1), due to the fact that the Internet was 

designed with the TCP/IP model in mind, before the more refined OSI model was adopted. 

Note: there are many efforts to migrate the Internet towards the OSI model and many more 

different networks which use the OSI model (e.g. industrial networks or IoT networks). 

 



Computer Networks. Practical activities 

5 

 

 

Important note: Messages are referred to as follows:  

● PHY – bits/symbols 

● DLL – frames  

● Internet – packets  

The practical activity contents only investigate wired media, although some wireless aspects 

will be briefly presented in the future. 

 

Figure 1.1 Network stack models 

3. Practical activity 

3.1 Install and verify Wireshark functionality 

Wireshark is a packet analyzer (sometimes called a “sniffer”). In order to capture network 

traffic, Wireshark needs a specific interface on which to capture traffic. Please note that, even 

though the exercises in this section consist of investigating local traffic, Wireshark can be used 

to identify traffic which is neither generated locally, nor destined to the local host, depending 

on the interface used or logs captured through other tools. If you are working on your own 

workstation, navigate to www.wireshark.org and install Wireshark. 

You will investigate Wireshark captured packets, especially correlating data with the 

corresponding TCP/IP stack layer. You don’t need to understand this data now, but it is 

necessary that you understand that a packet contains data which is always correlated to one of 

the stack layers – learning to identify the layers will be extremely useful in your future career 

as an engineer (and necessary for this course/practical activities). 

In order to launch your first Wireshark capture, open Wireshark and select the interface in use. 

This is probably your LAN connection or, as seen in Figure 1.2, the Wireless Network 



Computer Networks. Practical activities 

6 

 

connection (note: Wireshark can also sniff Bluetooth and USB interfaces, among others, which 

are all beyond the scope of this course/practical activity).  

 

Figure 1.2 Wireshark interfaces 

You can either double click the desired interface or navigate to Capture -> Options -> Start, as 

seen in Figure 1.3. 

 

Figure 1.3 Select Wireshark interfaces 

You should start seeing captured packets (Figure 1.4). Once you feel that you have captured 

enough packets go ahead and stop the capture from the indicated selection (or don’t, but your 

local memory won’t be happy). 

 



Computer Networks. Practical activities 

7 

 

 

Figure 1.4 Wireshark packet analysis 

You will probably see a great deal of packets, feel free to explore them, but focus on the second 

view (Figure 1.5), which associates data to each TCP/IP stack layer. It is extremely important 

to be able to associate the data in this view with each individual layer. The first four layers of 

the network stack are presented in this view as follow, from top to bottom: Physical, DLL, 

Internet, Transport. Notice that each layer presents the specific running protocol.  

 

Figure 1.5 Individual packet contents 

You can view the detailed contents of each packet by clicking the drop-down arrow next to 

each stack layer, as seen in Figure 1.6. 

 

Figure 1.6 Detailed packet contents 

You can go ahead and capture as many packets as you like. “Start capturing packets” quick 

access button is located besides the “Stop capturing packets” button. You can use this button 

to start capturing packets without changing the interface. Whenever you quit Wireshark or start 

a new capture after running a previous one, Wireshark will ask you if you want to save the 



Computer Networks. Practical activities 

8 

 

captured data somewhere. Saving data for future analysis is useful in forensically investigating 

network activities (including attacks) but, for all intents and purposes of this practical activity, 

you don’t need to save this data anywhere (unless you see something interesting and want to 

check it out later). 

Following are two challenge activities. 

● Challenge activity 1: try pinging some IP addresses, using the “ping ip_address” 

command from the console (cmd) of your workstation. Ping is a network connectivity testing 

tool. The networking equivalent to “Hello World” is pinging yourself (“ping 127.0.01” or “ping 

localhost”). Pinging yourself is used to test network interface functionality (e.g. if you don’t 

have any network hardware installed on your workstation, or if it’s malfunctioned, the pings 

will fail). Can you see the ping command on a Wireshark capture? Is it atomic or composed of 

multiple messages?  

● Challenge activity 2: with Wireshark capturing packets on the local interface, attempt 

a login connection to an HTTP website, then to an HTTPS website (they don’t need to be 

successful). Nowadays most websites offer HTTPS services and not HTTP, but you can still 

find some HTTP websites by searching the internet on a search engine of your choice.  Can 

you see the username/password in the contents of the packet on a HTTP login attempt? What 

about the HTTPS login? (hint: can you even see HTTPS packets?). Can you explain your 

findings? Which TCP/IP stack layer is responsible with handling HTTP and HTTPS? (tip: try 

to figure it out by yourself but search when necessary). To make this challenge easier, 

Wireshark provides a packet filtering mechanism which you can use either during the capture 

or afterwards. This will be further investigated in more detail in the next practical activities. 

For now, in order to filter packets either type the string filter or select more options from the 

indicated button (Figure 1.7) and select the “Apply this filter string to the display” button 

(Figure 1.8). Click the adjacent “X” in order to reset de filter. 

 

 

Figure 1.7 Wireshark filter 

 

Figure 1.8 Apply filter button 

3.2 Install and verify Cisco Packet Tracer 

Cisco Packet Tracer (PT) is a network simulation tool provided by Cisco Systems. It is 

extremely useful in designing networks without/before access to physical equipment. 



Computer Networks. Practical activities 

9 

 

Please download and open the provided Intro.pkt file. You should log into PT with your Cisco 

Netacad/Skillsforall account. If you don’t already have one from downloading PT, please 

create one. The file contains a previously configured network. During the course of the 

semester, you will learn skills that will allow you to configure and debug a similar network. 

Note: PT provides simulation functionalities for both wired and wireless networks; during the 

course of this practical activity you will focus on wired networks. 

Go ahead and take a look at PT basics. The two main categories of devices you will use are 

network devices (which provide network infrastructure) and endpoint devices (which, 

generally, are computers, servers, etc.). Try and add a PC to the network (Figure 1.9) either by 

clicking on the PC, then on the canvas or by dragging and dropping the PC. You can erase a 

device from the canvas by selecting Delete, then clicking on the device, or by dragging a 

selection of one or more devices and clicking delete.   

 

Figure 1.9 Packet Tracer section for adding network components 

Connect it to the switch, using an automatic connection (Figure 1.10).  

 

Figure 1.10 Cable button to connect PC to switch 

Select the automatic connection option, the click on the PC and finally on the switch.  Don’t 

worry too much about understanding what is going on at this point, you will go into more detail 

in future activities. 

In order to test connectivity, you can access any PC by clicking it; select Desktop -> Command 

prompt and ping an IP address on the network. You can view these IP addresses by hovering 

your cursor above any device. You should see something similar to the previous activity 

(Figure 1.11). Try pinging from your newly added PC. Do the pings work? Can you figure out 

why? (Hint: try comparing the configurations of your PC with the previously existing PCs). 

This will be further analyzed in the following practical activities.  



Computer Networks. Practical activities 

10 

 

 

Figure 1.11 Ping in Packet Tracer 

 PT can run in Realtime or Simulated mode (Figure 1.12). Try switching to simulated mode. 

Run a ping command and press the play button. You can change the simulation speed from the 

slide bar. You should be able to see packets moving through the network. The exact rules and 

nature of the message exchanging process will be presented in future activities.  

 

Figure 1.12 Real-time and simulation mode selection in Packet Tracer 

PT has many functionalities which you are welcome to explore. The more detailed 

functionalities will be presented as you move on to future activities. 

 



Computer Networks. Practical activities 

11 

 

3.3 Questions 

● What is a network stack model? What is a network stack? 

● What is Wireshark and what is it used for? 

● What is Cisco Packet Tracer and what is it used for? 

  



Computer Networks. Practical activities 

12 

 

CHAPTER 2: COPPER BASED TRANSMISSION MEDIA AND UTP 

CABLING 

 

1. Objectives 

The objective of this work is knowledge and understanding of copper-based transmission 

media, the main associated parameters, as well as the wiring and testing of UTP cabling. 

 

2. Theoretical considerations 

ISO Open Systems Interconnection (OSI) reference model (Figure 2.1) incorporates 7 layers 

(Physical, Data Link, Network, Transport, Session, Presentation and Application). The first 

layer defines the physical/hardware concepts of a communication network; the first three layers 

use physical/hardware components. The remaining four layers define the logical concepts of a 

communication network. The current practical work focuses on the Physical layer of the 

ISO/OSI stack (or the Network Access layer of the TCP/IP stack), mainly cooper-based 

transmission media. 

 

Figure 2.1 Network stack models and PDU naming in each level. The arrows indicate the addressed 

layers in the current activity 

In Europe, the ISO/IEC-11801 standards family defines general and specific cabling design 

documents. It comprises the ISO/IEC 11801-1:2017 Information technology — Generic 

cabling for customer premises — Part 1: General requirements and includes ISO/IEC 11801-

2, ISO/IEC 11801-3, ISO/IEC 11801-4, ISO/IEC 11801-5, ISO/IEC 11801-6. The ISO/IEC 

11801-1 specifies the requirements for coaxial, twisted-pair copper and optical fiber. In the 

USA and Canada, ANSI/TIA-568-C standard is used instead of ISO/IEC 11801. 



Computer Networks. Practical activities 

13 

 

 2.1 Coaxial and twisted cables 

In data transmission, transmission media represents the physical path between the transmitter 

and the receiver; it must guarantee superior performances expressed as parameters like 

communication speed, transmission error rate, cost, amplification requirements. 

Data transmission characteristics and quality are determined both by the transmission support 

media and propagated signal’s characteristics. IEC 61935-1 standard is used for “reference 

measurement procedures for cabling parameters and the requirements for field tester accuracy 

to measure cabling parameters”. 

In data transmission systems design some determinant elements for system performance are: 

● bandwidth – represents the transferred data volume on a communication channel so that 

if the other factors remain constant, the larger the bandwidth the better signal transmission rate 

will be obtained; 

● interference – is generated by signals superposition in the same frequency band, fact 

that can generate signal distortion. Correct shielding of the transmission media can determine 

the minimization of this type of effect; 

● number of receivers – assumes point to point or shared links construction. 

The main electric parameters of the copper-based transmission media are: 

● impedance – for data transmission is important not only the impedance value at a given 

frequency but also its variation function of frequency; 

● propagation speed - represents a percent from the light speed; 

● attenuation (insertion loss) – the channel behavior at frequencies depends on this 

parameter. This value increases in proportion with the cable length; 

● crosstalk – is the measure of the influence produced by a cable to another cable placed 

in its vicinity. 

Coaxial cable is a versatile transmission media, used in a large application variety, from long 

distance telephonic transmission, local area networks, to TV distribution for various devices 

connection. This is a media that allows the operation on a large frequency spectrum.  

The cable contains a copper core insulated from the second exterior conductor, made as a shield 

from a thin wire braid (Figure 2.2).  

 

Figure 2.2 Coaxial cable structure 

 

 



Computer Networks. Practical activities 

14 

 

The main characteristics of the coaxial cable are: 

● allows digital and analog signal transmission; 

● because of concentric construction type, is resistant to magnetic interference. 

 

Modern Internet topologies use optical fiber to transport data from an ISP (Internet Service 

Provider) to local communities and, from there, they use coaxial cable (available from CATV) 

to connect the subscribers. At the subscribers’ end a cable modem acts as a bridge between the 

coaxial network and the customer LAN. For achieving high-bandwidth data transfers standard 

specifications, such as Data Over Cable Service Interface Specification (DOCIS), are used for 

hybrid fiber coaxial (HFC) networks (for example, DOCSIS 3.1 specifies a downstream data 

speed of 10 Gbps and upstream speeds of up to 1 Gbps). Modern distribution systems are now 

also using Ethernet Passive Optical Networks (EPON) Protocol over coaxial media (EPoC) 

(IEEE Std 802.3bn) with a physical layer specification for up to 10 Gb/s downstream and up 

to 1.6 Gb/s upstream point-to-multipoint link. Other applications, such as 10Gb Ethernet up to 

100 Gb Ethernet for full-duplex point-to-point links between network devices, use a special 

coaxial cable with two inner connectors called Twinaxial cabling or Twinax. 

For LANs this cable type has been replaced with other high-bandwidth technologies because 

its performances were reached and exceeded for short distances by twisted cable and for long 

distances by optical fiber.  

The main constraints related to performances refer to its attenuation, inter-modular noises and 

heating. 

Coaxial cable used in local area networks had 50 Ohms impedance and were of 2 types: 

● thin coaxial cable (RG58 in 10BASE2 type IEEE 802.3 networks) is the most wide-

spread and used for interior installations because of a good price/performance ratio; 

● thick coaxial cable (RG213 in 10BASE5 type IEEE 802.3 networks) is used for exterior 

installations because of a higher mechanical resistance and a better length limit. 

Computers connection to coaxial cable was done using two methods: using T junctions or 

special connectors called vampire tap connector placed into a device called transceiver, which 

allow their thrust in cable without its cutting necessity. The connector penetrates the insulator 

layer making the contact directly with the conductor layer. The connection between transceiver 

and network interface card is done with a transceiver cable that is connected to AUI port 

(Attachment Unit Interface). For long distances analog transmission, signal amplifiers are 

required, and for digital signals, repeaters are required, the standards specifying exactly their 

placement distance. In thin coaxial cable case, the maximum distance was 185m and in thick 

coaxial cable case, the maximum distance was 500m. For Twinax, SFP+ (SFP = small form-

factor pluggable) network interface module can be used. 

Twisted cable (twisted pair - TP) or cable with twisted pairs of copper wires, having a common 

outer jacket (with or without shielding), represents the usual cable type used in local area 

networks and telephone system. The purpose of wire twisting is the reduction of magnetic 

distortion, of interferences between adjacent pairs of cable. This cable acts like a single 

communication link. For cables with several twisted wire pairs, twisting steps must be different 

for each pair so that the crosstalk between pairs to be minimum. Because of the progress 

realized in TP cable manufacturing technology, these can be used in a very large frequency 



Computer Networks. Practical activities 

15 

 

range allowing Gbps data transmissions, and in Gigabit networks offering for short distances 

performances comparable with optical fiber. TP cable represents the transmission media for 

analog and digital signals usually used in telephone system and local area networks. 

TP cables used in computer networks have four pairs of twisted wire, allow a maximum 

distance of 100m and are being used in 10, 100, 1000Mbps and 1, 2.5, 5 or 10Gbps networks. 

The standard cable impedance is 100 Ω. Furthermore, 25 and 40 Gbps networks allow a 

maximum distance of 30 m using Class I and II cables (cat. 8.1 and 8.2).Different diameter for 

the copper cables exist and are measured using AWG standard (American Wire Gauge): from 

22 AWG to 26 AWG and, for short distance also 28 AWG. 

Twisted cables categories used in data transmissions are differentiated function of supported 

utilizations. Table 2.1 presents balanced (symmetrical) Twisted-Pair class specifications. 

Table 2.1 Balanced Twisted-Pair Class Specifications 

Class Bandwidth Category 

Class A up to 100 kHz Category1 

Class B up to 1 MHz Category2 

Class C up to 16 MHz Category3 

Class D up to 100 MHz Category5e 

Class E up to 250 MHz Category6 

Class EA up to 500 MHz Category6a 

Class F up to 600 MHz Category7 

Class FA up to 1000 MHz Category7a 

Class I and Class II up to 2000 MHz Category8.1, 8.2 

All these classifications do not refer only to cables but also the entire associated connecting 

system: connectors, outlets, patch panels etc. Twisted cable allows point to point connection 

implementations, realizing different star or extended star network topologies.  

The cable naming convention (Table 2.2) from ISO/IEC 11801 presents the different types of 

cable construction, based on their screening: XX / XXX. Examples of cable naming are: 

U/UTP, U/FTP, F/UTP, S/UTP, SF/UTP, F/FTP, S/FTP, SF/FTP etc. 

Table 2.2 Cable naming 

XX / X XX 

overall screen element screen balanced element 

U = 

unscreened 

F = foil 

screened 

S = 

braid 

screen 

SF =braid 

and foil 

screen 

U = 

unscreened 

F = foil 

screened 

TP 

 

 

 

 



Computer Networks. Practical activities 

16 

 

In Figure 2.3, F/UTP and U/FTP cables are presented.  

 

Figure 2.3 F/UTP and U/FTP 

2.2 UTP cabling 

At Ethernet and Fast Ethernet networks UTP cabling 1-2 wire pair is used for transmission and 

3-6 pair for reception. This wire type arrangement is called MDI (Media Dependent Interface) 

or normal arrangement. Usually, the wires are connected according to the same rule in the 

connectors at the two ends of the cable, case in which the cable (patch cord) is called straight-

through. The straight-through cable was designed to be used when connecting two devices of 

different type (ex. computer – modem, router – switch etc.) 

In some special cases the reception must be reversed with transmission in order to enable 

communication, case in which the cable (patch cord) is called crossover. As specified by IEEE 

802.3 the crossover function connects the transmitters of one end to the receivers the other end 

of the link segment. The crossover cable was designed to be used when connecting two devices 

of the same type (ex. computer – computer, router – router etc.). In modern interfaces, the 

Automatic MDI/MDI-X function automatically detects the needed cable connection type and 

configures the correct connection, thus straight-through cable can be used throughout the 

network. 

Table 2.3 EIA/TIA-T568-A 

Pin# Pair# Function Wire color Used with 

10/100BASE-T 

Used with  

1000 BASE-TX 

1 3 BI_DA+ (Transmission+) White/Green Yes Yes 

2 3 BI_DA- (Transmission-) Green Yes Yes 

3 2 BI_DB+ (Reception+) White/Orange Yes Yes 

4 1 BI_DC+ Blue No Yes 

5 1 BI_DC- White/Blue No Yes 

6 2 BI_DB- (Reception-) Orange Yes Yes 

7 4 BI_DD+ White/Brown No Yes 

8 4 BI_DD- Brown No Yes 

At Gigabit Ethernet networks UTP cabling all four wire pairs are used both for transmission 

and reception. UTP cables contain four twisted wire pairs each pair being identified through a 

color: blue, orange, green and brown. Each pair contains a colored wire and a white combined 

with the respective color wire. The connectors used for this cable are RJ-45 type male 

connectors containing 8 pins corresponding to the 8 wires. Viewed from the front, the pins are 

numbered from 1 at right to 8 at left. The wire connection mode to the pins determines the 

cable type. There are two standards for wire connection to RJ-45 connector: EIA/TIA-T568-A 



Computer Networks. Practical activities 

17 

 

and EIA/TIA-T568-B. These connections are presented in Table 2.3 - 2.5 (BI_DX means Bi-

directional pair X). 

Table 2.4 EIA/TIA-T568-B 

Pin# Pair# Function Wire color Used with 

10/100BASE-T 

Used with  

1000 BASE-TX 

1 2 BI_DA+ (Transmission+) White/Orange Yes Yes 

2 2 BI_DA- (Transmission-) Orange Yes Yes 

3 3 BI_DB+ (Reception+) White/Green Yes Yes 

4 1 BI_DC+ Blue No Yes 

5 1 BI_DC- White/Blue No Yes 

6 3 BI_DB- (Reception-) Green Yes Yes 

7 4 BI_DD+ White/Brown No Yes 

8 4 BI_DD- Brown No Yes 

 

Thus, to obtain a straight-through cable both ends of the cable must be connected according to 

the same standard (A-A or B-B) and in order to obtain a crossover cable each end of the cable 

must be connected according to a different standard (A-B or B-A). 

Table 2.5 a. Color coding example                                              b. RJ-45 connectors 

EIA/TIA-T568-A EIA/TIA-T568-B  

1      1 

 

2    2 

3      3 

4    4 

5      5 

6    6 

7      7 

8    8 

 

At UTP cabling are used both passive and active devices. Passive devices are not supplied from 

a voltage source while active devices require power supply. The most important passive 

devices are: RJ-45 connector (8P8C connector), outlet and patch panel. At layer 1, the most 

important active device is the transceiver. An RJ-45 connector is a device with eight pins in 

which a TP cable is connected. It enters in outlets and patch-panels structure. In outlets are 

connected the computers using patch cords. The outlets are connected to the patch panel which 

is located in the distribution closet. Using a patch cord, the patch panel is connected to the 

switch which is also located in the distribution closet. The switch is a multiport bridge. The 

transceiver is a bidirectional device which receives the signals from one type of interface, 

converts them in specific signals for another type of interface and transmits them to an interface 

of that type.  

Based on IEC 61935-1 standard, tests are performed to measure the cabling parameters:  

insertion loss, propagation delay and delay skew, near-end crosstalk (NEXT) and power sum 



Computer Networks. Practical activities 

18 

 

NEXT, far-end crosstalk (FEXT) and power sum FEXT, different attenuation and crosstalk 

types. 

For cabling a TP cable and a TP outlet, several tools should be used, as shown in Table 2.6: 

cable stripping/cutting tool (a.), cable crimping tool (b.), punch down tool (c.) and cable testers 

(d., e.). 

Table 2.6 Cabling and testing tools 

 

   
  

a b. c. d. e. 

On the market, both flat or round twisted pair cables can be found (Figure 2.4).  They serve the 

same purpose, but they can be used in different scenarios. Round cables are the most often used 

cables in networking, however flat cables could be useful to run under a carpet, along a wall or 

a corner. 

 

Figure 2.4 Flat cat.6 cable (left) and round cat.6 cable (right) 

 

3. Practical activity 

3.1 UTP cable connection and testing 

● Identify the wired NIC (network interface card) on your lab computer. 

● Identify the cables used in the laboratory (PC – outlet). What standard was used for 

cabling them? 



Computer Networks. Practical activities 

19 

 

● Using the EIA/TIA-T568-A or B standard, straight-through cables will be made and 

tested.  

● Using the EIA/TIA-T568-A and B standard, crossover cables will be made and tested.  

● Using the punch down tool cable a wall outlet. 

● Research online the different types of cable discussed in the practical work. 

3.2 Network cabling and testing 

● The connectivity between two computers will be tested using crossover cables. 
● Cable and test the connectivity using the network presented in Figure 2.5 (using PCs, 

a patch panel and a switch). 

 

Figure 2.5 Cabling test network 

3.3 Questions 

● Why are screening and shielding important in choosing the appropriate network cable? 

● Why TP cables used in computer networks are limited to a maximum distance of 100m? 

● Which type/category of cable should be used for a new LAN?  



Computer Networks. Practical activities 

20 

 

CHAPTER 3: OPTICAL FIBERS AND COMPONENTS 

 

1. Objectives 

The objective of this work is to gain knowledge on optical fibers and components, link 

performance analysis and the optical power budget calculus. 

 

2. Theoretical considerations  

2.1 Optical fibers and components 

The current practical work continues the focus on the Physical layer of the ISO/OSI stack 

(Figure 3.1) by providing knowledge on optical fibers and components. 

  

Figure 3.1 Network stack models and PDU naming in each level. The arrows indicate the addressed 

layers in the current activity 

Once the drop in the price of optical fibers, and appropriate communications equipment, this 

has become the environment of choice for new high-speed connections (exterior and interior).  

To transmit data, optical fibers send light signals along glass or plastic cores (of the order tens 

of microns (μ), which constitutes a wavelength guide for light, obtained from a combination of 

silicon dioxide and other elements).  

An optical fiber strand is the basic element of an optical fiber cable (a cable contains several 

strands). A strand has three layers: core, cladding and coating. A fiber optic cable consists of 

several components: fiber strand(s), buffer, protective materials, outer jacket. 



Computer Networks. Practical activities 

21 

 

The core is wrapped by material made of silicon dioxide having a refractive index lower than 

the core called cladding. In order to protect the cladding, this is wrapped in a plastic material. 

This is called buffer and is wrapped in a material, usually Kevlar, which confers resistance of 

fiber at the time of installation. Optical fiber buffers are of two categories: tight (a protective 

covering is applied over the coating of each fiber strand) or loose-tube (several strands inside 

a tube filled with a protective gel). For outdoor, long-distance installation, loose-tube fiber is 

preferred. The last wrapper is the jacket which protects the fiber against abrasive materials, 

solvents and other factors. The color enclosure in the case of multimode optical fiber is usually 

orange and in the case of single-mode optical fiber is usually yellow. Each fiber optics cable is 

composed of two fibers wrapped separately, a fiber being used for transmission and another 

for the reception, ensuring in this way a full-duplex connection. A cable of optical fiber may 

contain from two up to hundred separate fiber strands (usually in LANs, up to 24). Figure 3.2 

presents the layer of an optical fiber and an optical fiber transversal section. 

         
Figure 3.2 a. Optical fiber layers                   b. Optical fiber transversal section 

 

For the signal to be reflected without loss, the following two conditions need to be met: 

• Optical-fiber must have a refractive index higher than the material surrounding it; 

• The angle of incidence of light signal must be greater than the critical angle of fiber and 

of the material surrounding it. The angle of incidence of light signal can be controlled 

by using the next two factors: 

o Numerical aperture of the fiber is the range of angles of the light signal for 

which the reflection is complete; 

o The modes are the ways that the signal light can follow. 

Unlike copper-based transmission media, optical fiber is not susceptible to, and it does not 

generate electromagnetic or crosstalk interference. 

Two main optical fibers are commonly used in LANs and WANs: single-mode and multimode. 

Single-mode optical fiber is used for long distance links and for vertical cabling in buildings 

(building’s backbone). Multimode optical fiber is commonly used in horizontal and vertical 

cabling. Multimode fiber has a larger core diameter compared to single-mode. Thus, multimode 

does not require the same precision as single-mode, resulting in less expensive connectors, 

transmitters etc. 

For the single-mode fiber the core diameter is small enough as to permit only one mode (one 

way) light signal, being sent in a straight line through the middle of the core. Single-mode 

optical fiber cables use cores with diameter between 8μ and 10μ. The most used single-mode 

optical fibers have 9μ diameter and cladding with a diameter of 125μ. They are usually referred 

as 9/125μ optical fibers. Light source used is the infrared laser. It is recommended caution 

when using lasers as source of light since it may affect the eyes. Single-mode fibers may 

transmit data at distances over 100km. The loss on km of single-mode optical fiber is specified 



Computer Networks. Practical activities 

22 

 

by the manufacturer. In the case of single-mode fiber, the refractive index of glass stays 

constant. This type of glass is called step index glass.  

The core of multimode fiber has a sufficiently large diameter as to permit several modes 

(several ways) for light signal. Standard multimode optical fiber cables have a core diameter 

of 62, 5μ or 50μ and cladding with a diameter of 125μ. They are usually referred as optical 

fibers of 62.5/125μ or 50/125μ. Usually, the light sources used with multimode fibers are 

Infrared Light Emitting Diode (LED) or Vertical Cavity Surface Emitting Lasers (VCSEL). 

LED-s are cheaper and require less safety measures than lasers. The disadvantage of LED is 

that may not transmit light signals at distances as large as lasers. Multimode fibers of 62.5/125 

may transmit data at distances of up to 2000m. The loss of multimode optical fiber is specified 

by the manufacturer. In the case of multimode fiber, the refractive index of glass may be 

constant (multimode step index glass) or may also decreases from the center to the exterior  

(variable or graded-index glass and allows various illuminating modes to reach the receiver at 

the same time).  

In optical fiber, beside propagation, the light is subjected to two main phenomena: attenuation 

and dispersion. Attenuation or absorption is essentially due to the presence of hydroxyl ions -

OH and of the various metal ions. Light may also be spread by micro crystals, lower than the 

wavelength, which form at the cooling of the glass. Attenuation limits the length of optical 

fiber to be used. The dispersion or impulse width widening is mainly due in multimode fibers 

to the different length of the modes. The chromatic dispersion appears due to the variation of 

the refraction index function of the light color or wavelength. The dispersion limits the use of 

optical fiber in the frequency or in bandwidth. The two limitations multiplied characterize most 

accurate an optical fiber. 20MHz-km values are obtained for fiber with step index, 1GHz-km 

for the variable index and 1000GHz-km for the single-mode in which there is no modal 

dispersion.  

Optical fiber transmitters convert electrical signals in equivalent luminous pulses. There are 

two types of light source used by transmitters for optical fiber: 

• The LED which produces infra-red light having a wavelength of 850nm or 1310nm. 

They are used with multimode fibers. Coupling to optical fiber can be improved by 

using a spherical lens; 

• LASER semiconductor diode containing which produces infra-red light having a 

wavelength of 1310nm or 1550nm. They are used with multimode or single-mode 

fibers. 

There are two types of basic design for LEDs: with surface emission and with edge emission. 

At surface emission led, the emission of light is perpendicular to the plane of junction through 

a thin transparent layer. They emit in a geometric radial spectrum. At edge emission led the 

light is emitted in a plane parallel to the junction at semiconductor edge. The materials used 

are often compounds III V as GaAs or Al×GA1-XAs for wavelengths of 0.8-0.9 μm and Ga×In1-

XPYAs1-y for wavelengths of 1.3-1.6 μm. Emission spectrum of a LED is between 25 to 40 μm 

for small wavelengths and 50-100 μm for larger wavelengths. 

LASER semiconductor diodes, laser diodes (LD), are obtained by introducing a led into an 

optical resonant cavity. The effect of laser only appears at the existence of a direct current high 

enough to achieve an inversion of the population of the electrons and holes from the two energy 

strips of conduction and valence. The current value from which this effect appears is called 

limit current. Under this current the device acts as an ordinary led. Since the light emitted by a 



Computer Networks. Practical activities 

23 

 

laser is much more coherent than issued by a LED, the efficiency of the optical fiber coupling 

is higher. Optical power also captured by laser is greater than that emitted by the LED. 

An analysis compared between the two types of transmitters is clearly in favour of LD because 

the possibility to use higher frequencies, narrower spectrum and in favour of the LED due to 

price and power stability in relation to temperature. The life expectancy of both devices is equal 

and is of the order of 10 million hours. 

The fiber optics receivers convert luminous pulses into equivalent electrical signals. 

Semiconductor devices normally used for optical fiber are classified in two types: simple and 

with internal gain. The first may be called PIN photodiode by type of doping (p intrinsic and 

n) and the second category is called APD (Avalanche Photo- Diodes). These devices are 

sensible at 850, 1310 and 1550nm wavelengths, wavelengths used by transmitters for optical 

fiber. As semiconductor materials are used Si for wavelengths of 800-900 nm and Ge or 

InGaAsP for 1300 and 1500 nm. Si has optimum sensitivity only within a reduced frequencies 

range but Ge has an appreciable darkness current and is more sensitive to noise. For this reason 

last possibility is the best but requires a more sophisticated manufacturing technology and 

therefore has a higher price.  

In order to connect multiple fibers or for achieving a longer fiber, splices (junctions) may be 

used. Splices are of two types: mechanical and fusion. Attenuations introduced are lower than 

0.5dB (ANSI/TIA-568-C.3 specifies that mechanical or fusions splices shall not exceed a 

maximum optical insertion loss of 0.3dB). At mechanical splices the two ends of the fiber, 

carefully cut, cleaned and polished are caught in a rigid mechanical holder that they fix to each 

other in an fixed ensemble. Fusion splices shall be carried out by heating close to the melting 

point. At this moment the two fibers are pressed against one another and cooled. These 

operations shall be preceded by cutting operations and finishing their ends and prior alignment 

of the two ends which will be connected. Fusion splices also remake draw/bursting resistance 

of the fiber at approximate 90% of the original value. To protect the splices, splice enclosures 

are used. 

Connectors in the optical fiber allow the connection to ports. The common used connectors 

are SC (Subscriber Connector) - snap on type, ST (Straight Tip) - twist on type, FC (Ferrule 

Connector) - screw on type, LC (Lucent Connector) - snap on type and MTP/MPO - push/pull 

type, for multimode optical fibers and for single-mode optical fibers. Attenuation introduced 

by an optical connector, even of superior quality is greater than that introduced by a splice, 

having values of approximately 1 dB. Connectors are high precision mechanical equipment 

and usually one end of the fiber is in the connector and one is free. In this case attaching a 

connector shall be reduced to the execution of a splice. Such a solution is usually more 

advantageous than mounting a connector directly to the end of the fiber because prefabricated 

connectors ensure the accuracy of mounting much higher. If the optical fiber is ended into an 

optical fiber terminator for redistribution this end connector is also called pig-tail and is 

prefabricated type. A special category of connectors is optical cords for distribution or 

connection. These are special optical fibers with connectors at both ends allowing small fiber 

curvature radii of approximately 2,5-5 cm. Their color is yellow for single-mode fiber and 

orange for multimode fiber. 



Computer Networks. Practical activities 

24 

 

Repeaters are optical amplifiers receiving light signals attenuated as a result of the distance 

traveled through optical fiber, remake the form, power and time parameters of these signals 

and send them away. 

Patch panels for optical fiber are similar with copper cable patch panels, increasing flexibility 

of the optical networks. For connecting different equipment, an optical fiber patch cord is used 

(also known as a zip cord - two flexible optical fibers with connectors at each end). 

Additionally, several other active or passive devices are used with optical fibers (e.q.: optical 

couplers - combines or splits optical signals; optical attenuators - reduce the power level of an 

optical signal; optical isolators; fiber-optic switches; optical multiplexers, etc.). 

The ISO/IEC 11801-1 specifies the requirements for coaxial, twisted-pair copper and optical 

fiber. The ISO/IEC 11801 (Europe) and ANSI/TIA-568-C (USA and Canada) standards define 

7 classes of optical fibers (single-mode and multimode) as shown in Table 2.1, together with 

several important parameters (optical fiber requirements, the cable transmission performance 

and the physical cable requirements): 

Table 2.1 Optical fiber characteristics 

 
Multimode Single-mode 

Type OM1 

62,5/125 

μm 

OM2 

50/125 

μm 

OM3 

50/125 

μm 

OM4 

50/125 

μm 

OM5 

50/125 

μm 

OS1 

9/125 μm 

OS2 

9/125 μm 

Wavelength 850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

1300nm, 

1550nm 

(1383nm) 

1300nm, 

1550nm 

Max. attenuation 

(db/km)  

2.6 /  

2.4 

3.56 / 

2.3 

2.6 /  

1.9 

2.9 /  

1.5 

2.9 /  

1.5 

1 0.4 

Light source LED (Light-Emitting Diode) /  

VCSEL (Vertical Cavity Surface-Emitting Lasers 

Light Source)  

LASER (Light 

Amplification by 

Stimulated Emission of 

Radiation) 

Distance/ 

data rate 

1 Gbps 275m 550m - - - 5-120km 

10Gbps 33m 82m 300m 400m 400m 10-80km 

40-100 

Gbps 

- - 100m 150m 150m 2-80km 

Color orange/ 

slate 

orange aqua violet/ 

aqua 

green/ 

lime 

yellow yellow 

https://en.wikipedia.org/wiki/Optical_fiber


Computer Networks. Practical activities 

25 

 

Incorrect installation of optical fiber has as result the increase in attenuation for the optical 

signal (improper installation of optical fiber may cause cracks in the heart to disperse the signal 

light). Excessive stretching or bending of the optical fiber may cause small cracks of the core 

which will scatter the light signal. Excessive bending of the optical fiber may have as a result 

the drop in incident angle of the light signal under critical angle of total reflection. For the 

connector installation the heads must be cut off and finished. After installation, the heads of 

the optical fibers, the fiber connectors and ports must be kept clean so that no attenuation will 

be introduced. Before use of optical fiber cables, their attenuation must be tested. At the design 

of an optical-fiber links, loss of power signal that can be tolerated must be calculated. This is 

called the budget of loss of optical link. Loss of power is measured in decibels (dB). 

For optical fiber link testing there are several methods: continuity testing, visual fault locator, 

measurement of optical power output, OTDR and BER test error rate. 

Continuity testers are used to test the continuity in an optical fiber. A visual fault locator (VFL) 

tool allows a technician to identify breaks, macrobends (refers to the minimum bending radius) 

or poor fusion splices. 

The measurement of optical power output determines the loss of power through the optical link 

by measuring the output power at a known input power. The unit of measurement for optical 

power is the milliwatt (mW) but for practical reasons shall be used other unit of measure which 

measure the gain (G) or loss (L) in a system, namely decibel (DB). 

The procedure OTDR Optical Time Domain Reflectometer is the procedure by which the 

attenuation characteristics of an optical fiber and its length may be visualized. This procedure 

is the only through which can be detected positions such breaks in optical fiber. OTDR displays 

a graphic having as X axis the fiber length and as Y axis the attenuation. From this graphic, the 

fiber attenuation and the splices and connectors quality can be deduced. Also, can be 

determined the braking position in the cable if externally the cable is not affected. 

The BER test (Bit Error Rate) is the final test for a data link through optical fiber. This test or 

criterion shows at how many bits transmitted through the fiber an error due fiber will be 

produced. The BER test must meet the requirements imposed by the producers of the DTE 

equipment that are coupled to the optical fiber. For computer networks they ask to be less than 

1 bit of error at 109/1012 bits transmitted or BER < 10-9/10-12. For the testing is required a 

generator of random bit sequence and an interface to optical fiber if a loop is tested or two if a 

single fiber is tested. In order to have significant results, the test must be carried out over a 

period long enough so as to provide a sufficient number of bits. The test period of one day or 

two are common if it is working at a large bit rate in the use of optical fiber link and small 

BER. A counter may automatically count the number of errors detected. 

  



Computer Networks. Practical activities 

26 

 

Computation of optical power budget shall be made according to the Table 2.2. 

Table 2.2 Optical power budget 

Crt.  Optical loss or power DB  

1.  The km loss in Optical Fiber ___dB /km X _____km fiber _____dB  

2.  The loss in Splices ___dB/splice X _____splices _____dB  

3.  The loss in Connectors __dB/connector X ___ connectors _____dB  

4.  Losses on other components _____dB  

5.  Margin of error _____dB  

6.  Total loss on the Link (1+2+3+4+5) _____dB  

7.  The power of average emission of the transmitter _____dB  

8.  Average power received by the receiver (7-6)  _____dB  

9.  The dynamic of the receiver _____dB at _____dB   

10.  Receiver sensitivity at a rate of errors given by BER _____dB  

11.  Available Remaining Power (8-10) _____dB  

Remarks  

For item 3. the transmitter connection losses to the optical will not be taken into account, these 

being already included. The amount calculated in item 8. must be within the range of item 9. 

for the receiver to operate correctly. The amount calculated in item 11 must be positive in order 

to have a functional optical data link.  

The error margin is due to take into account the average values for all link components. The 

dispersion of these values around the mean value is known and may take a margin of error 

large enough to cover deviations from an average with a probability of 99.9% or more. As the 

number of items is greater and as it is desirable a larger cover probability than a larger error 

margin will be taken. 

Optical emission power of the transmitter is a catalogue data and includes the loss of connection 

at one end of the optical fiber in the case in which the connection is made in accordance with 

recommendations. The power is greater at the LASER diodes and smaller at the LED. In the 

case of LASER usage for relatively short distances an attenuator is necessary so that the 

receiver will not be destroyed. 

Receiver dynamics represents the power range which a receiver can transform in electrical 

signal without loss of information. 

It is also needed a minimum optical power necessary for fulfilling the tolerated error rate 

condition which for computer networks is situated at the value of 1 bit erroneous at one billion 

bits transmitted. 

Calculus example of the optical power budget  

Optical fiber diameter: Core 62.5μm/Cladding 125μm. 

Numerical aperture of the fiber NA: 0.275. 

The wavelength of the optical equipment: 1310μm. 



Computer Networks. Practical activities 

27 

 

The solution is presented in Table 2.3. 

Table 2.3 Calculus example 

Crt.  Optical loss or power DB  

1.  The km loss in Optical Fiber 1,8 dB/km X 3,5km fiber 6,3dB  

2.  The loss in Splices 0,5 dB/splice X 2 splices 1,0dB  

3.  The loss in Connectors 1,0 dB/connector X 2 connectors 2,0dB  

4.  Losses on other components 0,0dB  

5.  Margin of error 2,0dB  

6.  Total loss on the Link (1+2+3+4+5) 11,3dB  

7.  The power of average emission of the transmitter -10,0dB  

8.  Average power received by the receiver (7-6)  -21,3dB  

9.  The dynamic of the receiver _____dB at _____dB  

10.  Receiver sensitivity at a rate of errors given by BER -26,0dB  

11.  Available Remaining Power  (8-10) +4,7dB  

The power at the receiver is in the dynamic of the receiver, which makes possible its function, 

and the remaining available power is positive, ensuring a viable connection. 

There should be taken into account the fact that during the life of the link, aging phenomena 

may occur, leading to increase the power loss, as well as the fact that optical fiber may be 

broken accidentally and needs to be spliced.  

A calculation made to the limit endangers the length of service of a link through optical fiber. 

 

3. Practical activity 

3.1 The characteristics of various types of optical fibers, components and aspects related to the 

cabling of computer networks using this transmission environment should be discussed. 

3.2 Explore the fiber optic infrastructure deployed in the oceans available at 

https://www.submarinecablemap.com/ 

3.3 A 9/125μ single-mode optical fiber having the length of 2,5km and the loss equal to 

0,5dB/km, which connects two DTE equipments is considered. The attenuation introduced by 

splices and connectors is equal to 0,5 and 1dB respectively. The error margin taken into 

consideration is 3dB. The power of average emission of the transmitter is -15dB, the receiver 

sensitivity at a rate of errors given by BER 10-9 is -25dB and dynamic of the receiver is in the 

range -10 ÷ -30dB. Calculate the optical power budget. 

  



Computer Networks. Practical activities 

28 

 

CHAPTER 4: STRUCTURED CABLING 

 

1. Objectives 

The objective of this paper is the knowledge of structured cabling, networks topology and the 

function of the different network devices. 

 

2. Theoretical considerations 

The current practical work focuses on the Physical, Data Link and Network layers of the 

ISO/OSI stack (Figure 4.1) by presenting the main elements of structured cabling and network 

devices. 

  

Figure 4.1 Network stack models and PDU naming in each level. The arrows indicate the addressed 

layers in the current activity 

2.1 Physical media analysis 

In the physical media analysis, we may choose several factors of performance such as: the 

speed of transfer, bandwidth, reliability or the error rate, the duration of service, the average 

duration between the two defects, defects tolerance, direct costs, indirect costs, the cost per 

port or equipment connected, the cost per bandwidth or the total cost per port per bandwidth. 

The bandwidth, LB is a factor of intrinsic performance particular to each medium. The 

reliability, F, is also a factor of intrinsic performance of each medium and shall be the ratio of 

the number of bits erroneously transmitted to the total number of bits transmitted. The service 

duration, De, is the length of time after the environment should be replaced, due to aging 

phenomena. The average duration between two faults, DMDD, is the statistical average time 



Computer Networks. Practical activities 

29 

 

between two successive malfunctions of the environment for the standardized period of life. 

Defects tolerance, Td, is a factor of performance induced on the physical environment by the 

technology and network architecture used, but in many cases, a given environment does not 

allow a error tolerance architecture or only one limited. Direct costs, Cd, are represented by the 

actual cost of the environment along with connectors, the auxiliary materials necessary for 

correct posing, and the cost of labor for communication environment realization and 

environment testing. The cost per port, Cp, it is a synthetic factor which has a greater decision 

value, being a global decision criterium and reflecting the total costs for carrying out physical 

infrastructure related to the total number of ports or equipment connected. The cost per port 

per speed of transfer, Cpv, is a factor performance more useful which alleviates taking a correct 

decision in the implementation of a local area network, including the possibility of future 

extension without the need for change the environment. The total cost per port per speed, Ctpv, 

is a complex factor of performance which characterizes a local area network at global level 

also including the equipment or technology costs. Characterization of performance factors 

above referred of the physical communication media previously presented is summarized in 

Table 4.1. Performance factors, and in particular the type of cost, shall be classified relatively 

without giving absolute values which may be affected very rapidly in time. 

Table 4.1  Performance factors 

 

2.2 Structured cabling  

There are three standard network topologies bus, star and ring (Figure 4.2): 

• Bus topology is the oldest method of interconnecting computers in a network. Data 

is transmitted to all the stations but is accepted only by the destination station, and 

the reflection of the signal is stopped using terminators. Figure 4.2 a. represents the 

bus topology; 

• Star topology has replaced the bus topology, the main feature is that it has a central 

component called hub through this component data is transmitted from one station 

to all the others. The star topology offers the resources and means for central 

administration. Figure 4.2 b. represents the star topology; 

• Ring topology stations are connected through a cable shaped as a ring and every 

station is acting as a repeater amplifying the signal. Figure 4.2 c. represents the star 

topology. 

Today most of the topologies used are combinations of star, ring and bus topologies. The bus-

star topology supposes connecting networks with star topology through linear branches (bus). 

Problems of connectivity appear when a concentrator fails. The ring-star topology also known 

Medium Lb 

Gbps 

Reliability De 

years 

DMDD Td Cd Cp Cpv Ctpv Recommended 

in usage 

Further 

use 

UTP Cat 

6,7 

>1 Medium 15 years Yes Medium Small Small Small Yes Yes  

Multimode 

OF 

>1 Large 30 years Yes Large Medium Medium Medium Yes Yes 

Single-

mode OF 

>1 Large 30 years Yes V. Large V. Large Large Large Yes Yes 



Computer Networks. Practical activities 

30 

 

as ring cabled as a star. In this case there is a central concentrator that connects all the other 

concentrators to which the stations are connected. 

 

 

 

 

 

 

 

 

 

 

 
      a. bus topology            b. star topology         c. ring topology 

 

Figure 4.2 Standard network topologies 

Under the generic name of active elements are grouped all of the network components that 

need a power supply and can work with electric, optic signals or both. Network interface 

cards are active elements of layer 2 providing the stations with the network connectivity. Every 

network interface card has its own 48 bits MAC address assigned from fabrication. This address 

is unique for every network card and it is composed of 2 parts: the 24 most significant bits 

identifies the producer, and the 24 least significant bits are assigned by the producer. The 

network interface cards used in PC’s need an I/O address space and a hardware interrupt. The 

interrupt is activated every time an event (a frame reception in most of the cases) appears 

requiring software attention, and the I/O address space represents the address region in which 

the card registers are accessible (written, read, by its driver). Usually both the interrupt and the 

I/O space are configurable to avoid conflicts with other devices. 

The overcome of the length limitations of cables is done by using repeaters. These are simple 

devices, connected at many network segments amplifying the signal that passes through them. 

Repeaters operate at the physical layer (they don’t have the frame notion or package transmitted 

through the network) and they broadcast the amplified signals on all their outputs.  

With the growth of the network dimensions, problems will appear if there are used only 

repeaters. The limitation for the stations that create such a network is the fact that 

repeaters/hubs (multiport repeaters) split the bandwidth, being situated in a single collision 

domain. In order to solve this problem, we use a bridge, equipment that operate at the second 

layer in the OSI hierarchy, and they represent devices much more complex than repeaters 

because they perform frame filtering based on MAC addresses and a separation of collision 

domains. Bridges don’t forward the frames that are local for a network, but only the ones that 

have destination addresses located in other networks. They store the frames and realize a 

retransmission only to the network in which the destination is situated. When the bridges are 

powered-up they know nothing about the network configuration and the addresses of the 

computers connected to it, but they learn the network topology while they forward the frames. 

Initially they allow all the frames to pass in all directions. But in time, as frames pass through, 

the bridge inspects the source address of each frame and completes the MAC tables, with the 

station address and the port at which the station is connected. Based on these tables they decide 

on which port the frames must be retransmitted. Frames sent at broadcast or multicast addresses 

 

Station 

 

Station 

 

Station 

Switch 

 

Station 

 

Station 

 

Station 

 

Station 

 

Station 

 

Station 

 

Station 

 

Station 

 

Station 



Computer Networks. Practical activities 

31 

 

will be retransmitted further away on all ports. A switch is a layer 2 equipment that take frames 

forwarding decisions based on the MAC address, so to direct the data only on the port 

corresponding to the destination host. These devices can be seen as devices capable to offer the 

connectivity of a hub and they manage the traffic like a bridge. Designing networks with 

complex topologies is done using switches. 

A router is a layer 3 equipment that route the packets based on the address used by routable 

protocols (for example Internet Protocol-IP or Internetwork Packet Exchange – IPX) with the 

help of the routing protocols (for example Routing Information Protocol RIP, Interior Gateway 

Routing Protocol – IGRP, Enhanced Interior Gateway Routing Protocol – EIGRP or Open 

Shortest Path First - OSPF). There are two main router types: dedicated routers and routers 

built from general purpose computers that have more interfaces. The computer routers have the 

advantage of cost and simplicity and can be used for other jobs. Dedicated routers are much 

more efficient and flexible, have much more interfaces and support more protocols and medium 

access types. Dedicated routers are devices specialized for the routing job. Due to the 

specialized hardware and powerfully optimized software, they achieve superior performance. 

They offer a wide range of speeds, physical interfaces and communication protocols. Usually 

these are manufactured by specialized firms (Cisco, Juniper, HPE etc.) their operating system 

is specific and has all the software need for the router to function properly. Dedicated routers 

support almost any transmission medium, used with any communication protocol, with a large 

range of sockets and adaptors. 

Taking in consideration the costs for realizing or modifying a network cabling it has been 

proved that once a network has been set in place is better to stay in use as long as possible and 

that it should be able to be used with novel communication technologies. The solution for this 

problem was in the elaboration of the structured cabling concept, defined later through several 

international standards. 

The ISO/IEC 11801 (Europe) and ANSI/TIA-568-C (USA and Canada) standard refer to the 

ways of cabling commercial edifices, specifying the cabling structure, the necessary minimal 

configuration, the categories of cables and components that must be used, ways of installation, 

performance requests that have to be met, acceptable distance limits and other parameters, and 

also ways and methods for testing them. Another problem that is approached is the problem of 

designing the cabling for a much more complex building group, in this way a complex project 

needs to be configured in a hierarchic (tree-like) structure, allowing the possibility to add 

redundant links. The standard specifications refer to some of the following aspects: 

• Minimal request for realizing the cabling of a building 

o The cabling topology and allowed distances; 

o Component elements of the cabling; 

o Transmission media used with the needed parameters specification; 

o Vertical and horizontal cabling realization mode; 

o Ways of identifying the cables used; 

o Project documentation. 

• Subsystems and components of the structured cabling system 

o The subsystem from the entrance in the building; 

o The equipment room; 

o The backbone cabling; 

o The telecommunication closet; 

o Horizontal cabling; 

o The work area components. 



Computer Networks. Practical activities 

32 

 

The cabling topology specified in the ISO/IEC or ANSI/TIA standard is a star, hierarchically 

organized (extended star). The topology center is main distribution facility, the second 

hierarchic level is the intermediary distribution facility afferent to one area edifice, and at the 

lower level is the telecommunication closet related to a floor or a group of rooms. The 

constitutive elements are: 

• The main distribution facility – the distribution center to the other edifices; 

• The intermediary distribution facility – are local to edifices; 

• The telecommunication closet – is represented by the local distribution closets for 

the cables that connect the stations or related to the vertical cabling; 

• The inter-edifice section – identifies the main cables that interconnect the main 

distribution center; 

• The internal section – connects the intermediate commuter with the distribution 

offices; 

• The equipment room – related to a cabling plan with passive and active devices; 

• The entrance infrastructure – for the interfacing of the exterior cabling system with 

the interior one; 

• The work area – the working stations, interconnection cables, external adaptors 

between cables; 

• Intermediate panels – identifies the connection panels for the transmission 

mediums; 

• Terminator blocks – represent the cable mechanical terminators; 

• Communication outlets, cabling adaptors. 

The usual transmission media are: 

• Twisted cable (category 6 and above); 

• Multimode or single-mode optical fiber; 

Types of the connectors used are: 

• RJ-45 connectors for TP cables; 

• LC, SC or ST type connectors for optical fiber; 

So, in order to accommodate a much easier and efficient way to manage the network, the 

cabling is structured using concentrators (on different levels). At each level a concentrator must 

be implemented, and if the covered area is too large than several concentrators can be used. At 

the working stations the UTP cable is ended in RJ-45 connectors, and at the concentrator in 

boxes or patch panels. The cumulative length of the cable and UTP patch cord used for 

connecting a computer at the equipment from the concentrator is not allowed to be greater than 

100m. In the floor concentrator the switches or other devices are situated. 

The advantages concentrators offer (and also the topologies based on concentrators) are: 

• possibility to extend or modify the cable system; 

• usage of different ports, adapted at different types of cables; 

• possibility of a central monitoring of the activity and the network traffic. 

Types of concentrators: 

• Active concentrators – that regenerates and transmits the signal; 

• Passive concentrators – can be considered the cabling panels or the connection 

blocks representing only connection points without any signal amplification. Also 



Computer Networks. Practical activities 

33 

 

there are hybrid concentrators that allow the usage for connection of different cable 

types. 

The cables must be labeled according to the standard, the ventilation must be sufficient to 

prevent equipment overheating, security measures must be set and fire protection must be 

provided. The floor concentrator is connected to the building concentrators, link that can be 

realized with a category 6 cable or with multi-mode optical fiber. Additionally, redundant links 

can be added between the floor concentrators and between the buildings. The building group 

concentrator is connected to the buildings concentrators with multimode or single-mode optical 

fiber. Installation standards are referring to the cable installation (maximum tension allowed 

on the cable, mechanical connection type), masked horizontal cabling, ground protection, and 

the specific protection of the optical fibers cables. 

 

3. Practical activity 

3.1 The topologies of the computer networks are going to be discussed underlining their 

advantages and disadvantages. 

3.2 The function of the following network devices will be discussed: network interface card, 

concentrator, repeater, bridge, switch and router. 

3.3 Aspects of the structured cabling and ISO-IEC/ANSI-TIA standard will be discussed. 

3.4 Floor cabling will be analyzed, and the elements of the structured cabling will be pointed 

out. 

3.5 Identify and analyze the structured cabling design at your workplace/home. How is your 

network connected to the WAN/ISP (what type of cable, device, etc.)? How is your device 

connected to the internal network? 

  



Computer Networks. Practical activities 

34 

 

CHAPTER 5: NETWORK LAYER – IPv4 FUNDAMENTALS 

 

1. Objectives 

At the end of the practical activity, students will be able: to explain the characteristics of the 

network layer, to describe the operation of the IPv4 protocol, to divide the networks into 

subnets, to explain the network address translation process, and to implement basic IPv4 

network configurations. 

 

2. Theoretical considerations 

The current practical work focuses on the Network layer of the ISO/OSI stack (Figure 5.1). 

 

Figure 5.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 Network layer 

The OSI Network layer corresponds to the TCP/IP Internet layer. It provides addressing, 

routing and traffic control services to allow devices to exchange data across networks and 

contains different types of protocols: 

• IP version 4 (IPv4) and IP version 6 (IPv6) routed protocols; 

• routing protocols such as Open Shortest Path First (OSPF) or Border Gateway Protocol 

(BGP); 

• messaging protocols such as Internet Control Message Protocol (ICMP). 

• The network layer performs four basic operations (Figure 5.2): 

• Addressing 

• Encapsulation 

• Routing 

• De-encapsulation 



Computer Networks. Practical activities 

35 

 

 

Figure 5.2 Network layer operations and packet serialization/deserialization when passing through 

different network devices 

IP protocols have the following characteristics: 

• Connectionless 
o no connection established between source and destination before data packets 

transmission; 
o no control information (synchronizations, acknowledgments, etc.). 

• Best Effort 
o unreliable, packet delivery is not guaranteed; 
o no mechanism to resend data that is not received, reduced overhead. 

• Media Independent 
o does not concern itself with the type of frame required at the data link layer or 

the media type at the physical layer; 
o can be sent over any media type: copper, fiber, or wireless. 

 

2.2 IPv4 

The packet header is presented in Figure 5.3: 

Octet 0 1 2 3 

Bit 0 1 2 3 4 5 6 7 8 9 
1

0 

1

1 

1

2 

1

3 

1

4 

1

5 

1

6 

1

7 

1

8 

1

9 

2

0 

2

1 

2

2 

2

3 

2

4 

2

5 

2

6 

2

7 

2

8 

2

9 

3

0 

3

1 

0 Version IHL DSCP 
EC

N 
Total Length 

32 Identification Flags Fragment Offset 

64 Time To Live Protocol Header Checksum 

96 Source IP Address 

128 Destination IP Address 

160 Options 

Figure 5.3 IPv4 packet header 



Computer Networks. Practical activities 

36 

 

• Version - version field, equal to 4; 

• Internet Header Length (IHL) - the size of the IPv4 header; 

• Differentiated Services Code Point (DSCP) - originally defined as the type of service 

(ToS), specifies differentiated services (DiffServ); 

• Explicit Congestion Notification (ECN) - allows end-to-end notification of network 

congestion without dropping packets, optional feature; 

• Total Length - defines the entire packet size in bytes, including header and data; 

• Identification- identification field, primarily used for uniquely identifying the group of 

fragments of a single IP datagram; 

• Flags - used to control or identify fragments; 
o bit 0 – Reserved, must be zero; 
o bit 1 – Don't Fragment (DF) 
o bit 2 – More Fragments (MF) 

• Fragment offset –specifies the offset of a fragment relative to the beginning of the 

original unfragmented IP datagram; 

• Time to live (TTL) – limits a datagram's lifetime; 
o in practice, is used as a hop count; 
o when the datagram arrives at a router, the router decrements the TTL field by 

one; 
o when the TTL field hits zero, the router discards the packet and sends an ICMP 

time exceeded message to the sender. 

• Protocol – defines the protocol used in the data portion of the IP datagram; 

• Header checksum – used for error-checking of the header; 

• Source address – the IPv4 address of the sender of the packet; 

• Destination address – the IPv4 address of the receiver of the packet; 

• Options – rarely used; if IHL is greater than 5, the options field is present. 

IPv4 addresses can be assigned statically or dynamically. 

The IPv4 address is hierarchical, being composed of two parts: the network part and host part 

(Figure 5.4). 

Network ID Host ID 

Figure 5.4 IPv4 address structure 

The number of bits assigned to the network and host depends on the class / network mask to 

which the address belongs (Table 5.1): 

Table 5.1 IPv4 network classes 

Class 
1st Octet 

Decimal Range 

1st Octet High 

Order Bits 

Network/Host ID 

(N=Network, H=Host) 

Default Subnet 

Mask 

A 1 – 126* 0 N.H.H.H 255.0.0.0 

B 128 – 191 10 N.N.H.H 255.255.0.0 

C 192 – 223 110 N.N.N.H 255.255.255.0 

D 224 – 239 1110 Reserved for Multicasting 

E 240 – 255** 1111 Experimental; used for research 



Computer Networks. Practical activities 

37 

 

Note: * Class A addresses 127.0.0.0 to 127.255.255.255 cannot be used and is reserved for 

loopback and diagnostic functions. 

** 255.255.255.255 is reserved as the IPv4 Broadcast address. 

The IPv4 subnet mask (Figure 5.5) is used to differentiate the network portion from the host 

portion of an IPv4 address. It is, like the IPv4 address, a 32 bits structure. The bits 

corresponding to the network portion are set to 1 and the bits corresponding to the host portion 

are set to 0. 

Network ID Host ID 

11………….…..1 00…………………………………………..0 

Figure 5.5 IPv4 subnet mask 

The network masks corresponding to the classes are presented below: 

Class A: 255.0.0.0 or /8 (11111111.00000000.00000000.00000000) 

Class B: 255.255.0.0 or /16 (11111111.11111111.00000000.00000000) 

Class C: 255.255.255.0 or /24 (11111111.11111111.11111111.00000000) 

Public IPv4 addresses are uniquely assigned addresses and are globally routed between internet 

service provider (ISP) routers. There are also blocks of addresses, called private addresses, that 

are used by most organizations to assign IPv4 addresses to internal hosts. These addresses are 

not uniquely assigned addresses and are not globally routed between ISP routers. These blocks 

of private addresses are presented below. 

Class A: 10.0.0.0 - 10.255.255.255  /8 

Class B: 172.16.0.0 - 172.31.255.255  /12 

Class C: 192.168.0.0 - 192.168.255.255 /16 

To allow a device with a private IPv4 address to access devices and resources outside of the 

local network, the private address must be translated to a public address. This process is called 

network address translation (NAT) (Figure 5.6) and provides the translation of private 

addresses to public addresses. A NAT router typically operates at the border of a network. 

When a device inside the network wants to communicate with a device outside of its network, 

the packet is forwarded to the border router which performs the NAT process, translating the 

internal private address of the device to a public, outside, routable address. 

 



Computer Networks. Practical activities 

38 

 

 

Figure 5.6 Network address translation 

The network address has all the host bits set to 0 and the broadcast address has all the bits set 

to 1. These addresses cannot be assigned to a host. All the other addresses are valid host 

addresses. 

Exercise 

Consider the following address: 192.168.1.10/24. Calculate the network and broadcast address, 

the valid host range, the total number of host bits and the total number of hosts. 

IP: 11000000.10101000.00000001.00001010 

NM: 11111111.11111111.11111111.00000000 

-------------------------------------------------- logic AND IP with the NM: 

11000000.10101000.00000001.00000000 – Network address (all host bits are set to 0) 

192.168.1.0 – Network address (decimal notation) 

11000000.10101000.00000001.11111111 – Broadcast address (all host bits are set to 1) 

192.168.1.255 – Broadcast address  (decimal notation) 

11000000.10101000.00000001.00000001 – First valid host address 

192.168.1.1 – First valid host address  (decimal notation) 

11000000.10101000.00000001.11111110 – Last valid host address  

192.168.1.254 – Last valid host address  (decimal notation) 

Results:  

192.168.1.1-192.168.1.254 – Valid host range (decimal notation) 

Total number of host bits is 8. 

Total number of hosts is 28-2=254. 

 

2.3 Subnetting 

To create subnets, bits are borrowed from the host ID. A new network mask (Figure 5.7) is 

created to show the new structure. In the network mask, the bits corresponding to the 

subnetwork portion are set to 1. 



Computer Networks. Practical activities 

39 

 

Network ID Host ID 

11………..1 00…………………………………………………..0 

Network ID Subnetwork ID Host ID 

11………..1 11……………………..1 00……………………0 

Figure 5.7 IPv4 subnet mask 

Exercise 

Consider the following address: 192.168.1.0/24. Divide this address in 4 subnets and further 

divide the fourth subnet into a maximum number of subnets. Specify for the subnets: netmask, 

network address, broadcast address, the number of host bits, the number of hosts and their 

address range. 

2 bits are borrowed to obtain 4 subnets. In order to further divide the fourth subnet into a 

maximum number of subnets, another 2 bits will be reserved for the host portion, the minimum 

possible number (Figure 5.8). 

 

Figure 5.8 Dividing a network address into subnets 

First /26 subnet: 

Network Subnetwork Host  

11000000.10101000.00000001.00000000 192.168.1.0/26 - Network Address 

11000000.10101000.00000001.00000001 192.168.1.1/26 - First Host Address 

… … 

11000000.10101000.00000001.00111110 192.168.1.62/26 - Last Host Address 

11000000.10101000.00000001.00111111 192.168.1.63/26 - Broadcast Address 



Computer Networks. Practical activities 

40 

 

 

Netmask: /26 (255.255.255.192) 

Network address: 192.168.1.0/26 

Broadcast address: 192.168.1.63/26 

Number of host bits: 6 

Number of hosts: 26-2=62 

Hosts address range: 192.168.1.1/26-192.168.1.62/26 

 

First /30 subnet: 

Network Subnetwork Host  

11000000.10101000.00000001.11000000 192.168.1.192/30 - Network Address 

11000000.10101000.00000001.11000001 192.168.1.193/30 - First Host Address 

… … 

11000000.10101000.00000001.11000010 192.168.1.194/30 - Last Host Address 

11000000.10101000.00000001.11000011 192.168.1.195/30 - Broadcast Address 

Netmask: /30 (255.255.255.252) 

Network address: 192.168.1.192/30 

Broadcast address: 192.168.1.195/30 

Number of host bits: 2 

Number of hosts: 22-2=2 

Hosts address range: 192.168.1.193/30-192.168.1.194/30 

 

3. Practical activity 

3.1 Discuss the theoretical aspects of the chapter. What is the difference between classful and 

classless addressing? 

3.2 Solve the following problems: 

A. Determine the network and broadcast addresses and number of host bits and hosts for 

the given IPv4 addresses and prefixes (Table 5.2): 



Computer Networks. Practical activities 

41 

 

 
Table 5.2 IPv4 addresses and prefixes 
IPv4  

Address/Prefix 

Network Address Broadcast Address  Total Number  

of Host Bits  

Total Number  

of Hosts 

172.16.104.99/27     

198.133.219.250/24     

10.1.113.75/19     

B. Having the following information, compute subnets with the following constraints: 

• A number of 62 subnets 

• Host IP Address: 172.16.0.0 

• Original Subnet Mask: 255.255.0.0 

C. Having the following information, compute subnets with the following constraints: 

• A maximum number of 29 hosts/subnet 

• Host IP Address: 192.168.200.0  

• Original Subnet Mask: 255.255.255.0 

D. Having the following information, compute subnets with the following constraints: 

• A number of 250 subnets 

• Host IP Address: 10.0.0.0 

• Original Subnet Mask: 255.0.0.0 

 

3.3 Test the following commands (using Command Prompt on Windows OS or Terminal in 

Linux OS): 

• Command: ipconfig /all (on Windows OS) and ifconfig (on Linux OS) 
o Role: displays all network configuration values for your network interface cards 

• Command: ipconfig /release and ipconfig /renew (on Windows OS) and dhclient (on 

Linux OS) 
o Role: refreshes DHCP and DNS values 

• Command: ping 
o Role: troubleshoots network connectivity; verifies IP connections, using ICMP 

packets 

• Command: tracert (traceroute on Linux) 
o Role: troubleshoots network connectivity; resolves the path to an IP destination, 

using ICMP packets 

• Command: nslookup 
o Role: performs DNS queries 

• Command: route print  
o Role: displays the routing table of the host device 

• Command: netstat 
o Role: network statistics tool 

• Command: arp -a  
o Role: displays the ARP cache (mapping of IP address to a physical addresses) 

 

Hint: you can use online operating systems to test various commands (e.g. 

https://bellard.org/jslinux/ for Alpine Linux or Windows 2000) 



Computer Networks. Practical activities 

42 

 

3.4 Using Wireshark, capture different types of IP packets and analyze their headers. For 

example: 

• capture ping traffic by filtering the ICMP protocol filter  

• capture nsloookup traffic by filtering the DNS protocol filter 

• etc. 

3.5 Configure and test the following network (Figure 5.9) using Cisco Packet Tracer: 

 

Figure 5.9 Test network topology 

Considering IP address 172.16.0.0 /16, compute 2 subnets and assign the correct IP address to 

the router’s interfaces and to the host computers (PC0 and PC1). 

Step 0: In order to show the interface name and numbers, go to Options -> Preferences and 

check “Always Show Port Labels in Logical Workspace” (Figure 5.10) 

 

Figure 5.10 Preferences window 

Step 1: Compute the two subnets needed. 

Step 2: Before configuring the network devices, assign a unique IP address and the 

corresponding subnet mask to each network interface and fill in the Table 5.3: 



Computer Networks. Practical activities 

43 

 

 

Table 5.3 IPv4 addresses and netmasks for the test network  

Device Interface IP Address Subnet mask Default Gateway 

PC0  Fa0 172 . 16 . ___ . ___ 255 . 255 . ___ . ___ 172 . 16 . ___ . ___ 

Router0 Gig0/0 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

Router0 Gig0/1 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

PC1 Fa0 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 172 . 16 . ___ . ___ 

Step 3: Configure the router using the commands provided in the steps below. The commands 

provide sample interface names and IP addresses. You must use the interface names and the IP 

addresses filled in the Table 5.3. Figure 5.11 shows how the CLI of a router can be accessed. 

 

Figure 5.11 Accessing the router’s CLI 

Step 3.1: Enter configuration mode on the router 

Router>enable 

Router#configure terminal  

Router(config)#  

 

Step 3.2: Assign static IPv4 address to the router interfaces 

Router(config)#interface GigabitEthernet 0/0 

Router(config-if)#ip address 172.16.0.1 255.255.255.0  

Router(config-if)#no shutdown 

Router(config-if)#exit 

 



Computer Networks. Practical activities 

44 

 

Configure the other router interface with the corresponding IP address  

Router(config)# interface ___ 

Router(config-if)#ip address ___________ ___________ 

Router(config-if)#no shutdown  

 

Step 3.3: Display information about the router configuration 

Router#show ip interface brief 

Description: Display IP information about router’s interfaces 

Router#show ip route 

Description: Display IP routing table 

Step 4: Configure IP addresses on the PCs using the screenshots in the Figures 5.12, 5.13 and 

5.14. 

 

Figure 5.12 PC configuration screenshot 



Computer Networks. Practical activities 

45 

 

 

Figure 5.13 PC Desktop screenshot 

 

Figure 5.14 PC IP configuration screenshot 

Step 5: Test the connectivity and troubleshoot if it is not working. 

a. check IP addresses oh hosts computers: PC -> Desktop -> IP Configuration 

b. Check connectivity between computers using the ping <target IP> command: PC -> 

Desktop -> Command prompt 

  



Computer Networks. Practical activities 

46 

 

CHAPTER 6: NETWORK LAYER – IPv4 ROUTING AND DHCP 

 

1. Objectives 

At the end of the practical activity, students will be able: to explain the routing process, to 

describe the operation of the DHCPv4 protocol, and to implement basic IPv4 network 

configurations. 

 

2. Theoretical considerations 

The current practical work focuses on the Network layer of the ISO/OSI stack (Figure 6.1). 

 

Figure 6.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 Routing 

IP packets are created at the source host and are directed to the destination. Forwarding IP 

packets to the destination is based on the routing process. This is a distributed process: each 

node, which is forwarding packets based on the IP address, will choose the next node according 

to its own routing table. Forwarding IP packets is a hop-by-hop process, each node forwarding 

the packet to the next node. 

Hosts and routers forward packets based on the destination IP address. Switches and access 

points are Layer 2 devices and do not forward packets based on the destination IP address 

(Figure 6.2). 



Computer Networks. Practical activities 

47 

 

 

Figure 6.2 Network packet forwarding process showing packet serialization/deserialization when 

passing through different network devices 

The host or the router examines the destination IP address of the packet and searches its routing 

table to determine where to forward the packet. The routing table contains a list of all known 

network addresses (prefixes) and where to forward the packets belonging to the corresponding 

networks. These entries are known as route entries or routes. The host or the router will forward 

the packet using the best (longest) matching route entry. The hosts and most routers also 

include a default route entry, 0.0.0.0/0. The default route is used when there is no better (longer) 

match in the IP routing table. 

To identify the network address of an IPv4 host, the IPv4 address is logically ANDed, bit by 

bit, with the subnet mask. ANDing between the address and the subnet mask yields the network 

address. Exercise: find the network address for the host configured with 192.168.50.106 IPv4 

address and 255.255.255.0 subnet mask. 

IPv4 host 

address 
 

192 . 168 . 50 . 106 

11000000  10101000  00110010  01101010 

 AND  

Subnet 

Mask 
 

255 . 255 . 255 . 0 

11111111  11111111  11111111  00000000 

IPv4 network 

address 
Equals 

192 . 168 . 50 . 0 

11000000  10101000  00110010  00000000 

A host can send a packet to (Figure 6.3): 

• Itself – to the loopback interface, 127.0.0.1 IPv4 address or ::1 IPv6 address; 

• Local host - the destination host is on the same local network as the sending host, the 

source and destination hosts share the same network address; 

• Remote host - the destination host is on a remote network, the source and destination 

hosts do not share the same network address. 

The default gateway is the network device that can route traffic to other networks. It has a local 

IP address in the same address range as other hosts on the local network, accepts data into the 

local network, forwards data out of the local network and routes traffic to other networks. 



Computer Networks. Practical activities 

48 

 

 

Figure 6.3 Possible packet destinations when a host is transmitting data 

When a host is configured with IPv4 address (Figure 6.4), subnet mask and default gateway, it 

updates its routing table accordingly (Figure 6.5). 

 

Figure 6.4 Host IP configuration 

 

 

Figure 6.5 Host routing table 

If a host is sending a packet to a device that is configured with the same network IP as the host 

device, the packet is forwarded out of the host interface, through the intermediary device, and 

to the destination device directly. Consider the network below (Figure 6.6), the packet is 



Computer Networks. Practical activities 

49 

 

transmitted from 192.168.50.106 to 192.168.50.110. The best (longest) matching route entry 

(Figure 6.7) in this case is marked with red. 

 

Figure 6.6 Sending host transmitting to a local host 

 

Figure 6.7 The best matching route entry for a local host 

If a host is sending a packet to a remote host, the packet is forwarded out of the host interface, 

through the intermediary device, and to the gateway. Consider the network below (Figure 6.8), 

the packet is transmitted from 192.168.50.106 to 30.0.0.2. The best (longest) matching route 

entry (Figure 6.9) in this case is the default route, marked with red. 

When the packet arrives on the interface of a router, the router de-encapsulates the Layer 2 

header and trailer. Then, it examines the destination Ipv4 address of the packet and searches 

for the best match in its Ipv4 routing table. When the best match in the routing table is found, 

the router forwards the packet according to the information in the route entry, encapsulating it 



Computer Networks. Practical activities 

50 

 

in the new Layer 2 header and trailer. In our example, the best (longest) matching route entry 

(Figure 6.10) is a static route, marked with red. 

And the hop-by-hop forwarding process continues until the packet reaches the destination. 

 

Figure 6.8 Sending host transmitting to a remote host 

 

Figure 6.9 The best matching route entry for a remote host 



Computer Networks. Practical activities 

51 

 

 

Figure 6.10 The best matching route entry for a remote host in R1 routing table 

When a router is configured with an Ipv4 address and a subnet mask, it updates its routing table 

accordingly. Additionally, a router can learn about remote networks in one of two ways: 

manually and dynamically. In the first case, the remote networks are manually entered into the 

routing table using static routes. In the second case, remote networks are automatically learned 

using a dynamic routing protocol. 

In the previous example, R1 router was manually configured with a static route to reach the 

remote network address, 30.0.0.0/8, through (via) the IP address of the next hop router, 20.0.0.2 

(Figure 6.11). 

 

 

Figure 6.11 Static route configuration 

 

 



Computer Networks. Practical activities 

52 

 

2.2 Dynamic Host Configuration Protocol v4 

Dynamic Host Configuration Protocol v4 (DHCPv4) assigns network configuration 

information dynamically. The Ipv4 address is assigned, or leased, for a limited period of time. 

When the lease expires, the client must ask for another address. Usually, the server reassigns 

the same address to the client. 

The DHCPv4 service can run on various devices such as a dedicated server or a router. The 

DHCP process starts when the client joins a network. The client sends a DHCPDISCOVER 

broadcast message to find the DHCPv4 server. The DHCPv4 server reserves an available Ipv4 

address to lease to the client and sends the binding DHCPOFFER message to the client. The 

client sends a DHCPREQUEST broadcast message as a binding acceptance notice. The server 

replies with a DHCPACK message (Figure 6.12). 

 

Figure 6.12 DHCP process 

The previous sequence of operations can also be observed in Wireshark (Figure 6.13) when 

using the ipconfig /release and ipconfig /renew (on Windows OS) and dhclient (on Linux 

OS) commands: 

 

Figure 6.13 Wireshark capture of DHCP process 

 

3. Practical activity 

3.1 Discuss the theoretical aspects presented in this chapter. 

3.2 Visualize the DHCP network packets that are delivered by your local machine. For this do 

the following: 



Computer Networks. Practical activities 

53 

 

• Start a Wireshark capture 

• Apply the “dhcp” packet filter in the Wireshark window 

• Open a command prompt (terminal) 

• Run the following commands: ipconfig /release and ipconfig /renew (on Windows 

OS) and dhclient (on Linux OS) 

• Inspect the Wireshark capture which shows the DHCP sequence of operations 

• In the Wireshark capture identify the broadcast address in the Layer 2 encapsulation 

(Ethernet encapsulation) 
 

3.3 Consider the network topology below (Figure 6.14): 

 

Figure 6.14 Test network topology 

Step 1: Before configuring the network devices, assign a unique IP address and the 

corresponding subnet mask to each network interface and fill in the Table 6.1: 

Table 6.1 IPv4 addresses and netmasks for the test network 

Device Interface IP Address Subnet mask Default gateway 

Laptop0 Fa ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

Laptop1 Fa ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

Server0 Fa ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

Router0 Fa0/0 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

Router0 Fa0/1 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

Router1 Fa0/1 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

Router1 Fa0/0 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ - 

Laptop2 Fa assigned by DHCP assigned by DHCP assigned by DHCP 

Laptop3 Fa assigned by DHCP assigned by DHCP assigned by DHCP 

Server1 Fa ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

Note*: pay attention to the interface names of the router you are using, some routers may only have 

GigabitEthernet interfaces. 



Computer Networks. Practical activities 

54 

 

Step 2: Assign static IPv4 addresses to router interfaces 

Router1>enable 

Router1#configure terminal 

Router1(config)#interface _________ 

Router1(config-if)#ip address ____________     ____________ 

Router1(config-if)#no shutdown  

Router1(config-if)#exit 

Step 3: Configure DHCP 

The Table 6.2 contains the configuration steps and the corresponding commands to configure 

the DHCP functionality on a Cisco router. 

Table 6.2 DHCP functionality configuration on a Cisco router 

No Operation Command Example 

1 Exclude IP addresses 
Router(config)#ip dhcp excluded-

address start_address   end_address 

ip dhcp excluded-address 

172.18.0.1 172.18.0.5 

2 Configure the pool name Router(config)# ip dhcp pool name ip dhcp pool TestDHCP  

3 

Configure the addresses 

(specifying the network 

address and the mask to 

be used) 

Router(dhcp-config)# network 

network-number [mask|prefix-length] 

network 172.18.0.0 

255.255.0.0 

4 

Configure the Default 

Router (the Gateway) 

for the Clients 

Router(dhcp-config)# default-router 

address 
default-router 172.18.0.1 

5 

Set up the IP Domain 

Name System Servers 

for the Clients 

Router(dhcp-config)# dns-server 

address [address2 ...address5] 
dns-server 8.8.8.8 

6 

Visualize the DHCP 

pools information and 

DHCP address bindings 

Router#show ip dhcp pool  show ip dhcp binding 

 

Step 4: Set the static routes 

Step 4.1: Identify the static route needed on each router and fill in the Table 6.3: 

  



Computer Networks. Practical activities 

55 

 

Table 6.3 Static routes for the test network 

Device Destination network Destination mask Next hop 

Router0 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

Router1 ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ ___ . ___ . ___ . ___ 

 

Step 4.2: Configure the static routes on the Cisco routers 

General syntax:  

Router(config)#ip route netw_dest_address next_hop_address/interface 

Example: Router0(config)#ip route 172.18.0.0 255.255.0.0 172.17.0.2 

Note*:  use your own IP addresses and mask when configuring the devices, not the one provided in this example 

Visualize the routing table:  

Router1#show ip route 

Step 5: Test the connectivity between end devices from opposite networks. 

a. ping <target IP> 

b. tracert <target IP> 

 

Optional step: Configure DHCP on Server0 also, similar with the example on Figure 6.15 

(replace the IP address in the example with your IP addresses) 

 

Figure 6.15 DHCP configuration example 

  



Computer Networks. Practical activities 

56 

 

CHAPTER 7: NETWORK LAYER – IPv6 

 

1. Objectives 

At the end of the practical activity, students will be able: to explain the characteristics of the 

IPv6 protocol, to describe the dynamic IPv6 configuration, to explain the routing process, and 

to implement basic IPv6 network configurations. 

 

2. Theoretical considerations 

The current practical work focuses on the Network layer of the ISO/OSI stack (Figure 7.1). 

 

Figure 7.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 IPv6 

IPv6 was developed by the Internet Engineering Task Force (IETF) to overcome the limitations 

of IPv4. 

The main limitation of IPv4 is the exhaustion of addresses because the address request is larger 

than the address space provided by the 32 bits of the address. The solution for the IPv4 address 

depletion is private addressing and NAT. This solution in turn creates several drawbacks such 

as lack of end-to-end connectivity and increased network complexity. 

IPv6 provides the following improvements: 

• Increased address space based on 128 bit address; 

• Improved packet handling due to the simplified header with fewer fields; 

• Eliminates the need for NAT by eliminating the need for private addresses. 



Computer Networks. Practical activities 

57 

 

 

The packet header is presented in Figure 7.2: 

 

Figure 7.2 IPv6 packet header 

• Version - version field, equal to 6; 

• Traffic class - equivalent to DiffServ – DS field; 

• Payload length – indicates the length of the payload of the IPv6 packet; 

• Next header – defines the next level protocol; 

• Hop limit – replaces the Time to live field in IPv4; 

• Source address – the IPv4 address of the sender of the packet; 

• Destination address – the IPv4 address of the receiver of the packet; 

IPv6 packet may contain extension headers, placed between IPv6 header and the payload, 

providing optional network layer information. Routers do not fragment IPv6 packets. 

IPv6 addresses are 128 bits in length. The preferred format for writing an IPv6 address is 

x:x:x:x:x:x:x:x, with each “x” consisting of four hexadecimal values, 4 bits being represented 

by a hexadecimal digit. Hextet is an unofficial term, it refers to a segment of 16 bits (4 values 

in hexadecimal). Figure (Figure 7.3) shows an example of an IPv6 addresses in the preferred 

format: 

Type Format 

Preferred 2001:0b20:0000:00d7:0000:0000:0000:0012 

Figure 7.3 IPv6 address format for writing – preferred 

There are two rules to reduce or compress IPv6 representation. The first rule is to omit the 

zeros that are at the beginning of each hextet - leading 0s (zeros) (Figure 7.4). 

Type Format 

Preferred 2001:0b20:0000:00d7:0000:0000:0000:0012 

No leading 0s 2001:b20:0:d7:0:0:0:12 

Figure 7.4 IPv6 address format for writing – no leading 0s 

The second rule is to omit the segments (hextets) that contain all the bits 0 and replace them 

with "double colon" (::). This replacement can be done only once (Figure 7.5). 



Computer Networks. Practical activities 

58 

 

 

Type Format 

Preferred 2001:0b20:0000:00d7:0000:0000:0000:0012 

No leading 0s 2001:b20:0:d7:0:0:0:12 

Compressed 2001:b20:0:d7::12 

or  

Compressed 2001:b20::d7:0:0:0:12 

Figure 7.4 IPv6 address format for writing – compressed 

Types of IPv6 addresses: 

• Unicast 

o Uniquely identifies an interface 

o The source address must be unicast 

• Multicast 

o It is used to send a single IPv6 packet to multiple destinations 

o IPv6 does not have a broadcast address, but there is a multicast address that 

provides the same result 

o Well-Known Multicast Addresses 

▪ ff02 :: 1: All IPv6 devices 

▪ ff02 :: 2: All IPv6 routers 

▪ ff02 :: 5: All OSPFv3 routers 

▪ ff02 :: a: All EIGRP (IPv6) routers 

• Anycast 

o Any unicast address that can be assigned to multiple devices 

o A packet sent to anycast address is routed to the nearest device with that address 

IPv6 prefix length indicates the network portion of an IPv6 address. It is represented in slash 

notation and can range from 0 to 128. The recommended IPv6 prefix length for LANs is /64. 

Figure 7.5 shows an example of an IPv6 address and prefix length: 2001:b20:0:d7::12/64. 

Prefix (64 bits) Interface ID (64 bits) 

2001:0b20:0000:00d7 0000:0000:0000:0012 

Figure 7.5 IPv6 address and prefix length example 

Types of unicast addresses (Figure 7.6): 

• Global Unicast Address (GUA) 

o Globally unique 

o Routable on the Internet 

o Similar to a public IPv4 address 

• Link-local Address (LLA) 

o Required for every IPv6-enabled device 

o Created even if the device has not been assigned a global unicast address 

o For communication with other devices from the same local link 

o Allow devices to communicate only on the same link 

o Unique only in the local link 



Computer Networks. Practical activities 

59 

 

o Not routable on the Internet 

o They are in the range FE80::/10 

o The router's link-local address is usually used as the default gateway 

• Unique Local Address (ULA) 

o Local addressing within a site or between a limited number of sites 

 

Figure 7.6 Types of unicast addresses 

• Structure of the Global Unicast Addresses (GUA): 

• Global routing prefix 

o Network 

o Portion of the address assigned by the provider 

o Typical /48 

• Subnet ID 

o For subnetting in an organization 

o Usually, 16 bits 

• Interface ID 

o The equivalent of the host portion of an IPv4 address 

o Usually, 64 bits 

 

Figure 7.7 shows an example of an IPv6 global unicast address: 2001:b20:0:d7::12/64 

Global Routing Prefix Subnet ID Interface ID 

2001:0b20:0000 00d7 0000:0000:0000:0012 

Figure 7.7 IPv6 global unicast address example 



Computer Networks. Practical activities 

60 

 

2.2 Host configuration 

Methods: 

• Static 

o Manual configuration of the IPv6 address 

• Dynamic 

o Stateless Address Autoconfiguration (SLAAC) 

o Stateful DHCPv6 

A device obtains the IPv6 addressing information dynamically, through Internet Control 

Message Protocol version 6 (ICMPv6) messages. IPv6 routers periodically send out ICMPv6 

Router Advertisement (RA) messages to all IPv6-enabled devices on the network. An RA 

message will also be sent in response to a host sending an ICMPv6 Router Solicitation (RS) 

message, which is a request for an RA message. 

The ICMPv6 RA message is a suggestion to devices on how to obtain IPv6 addressing 

information. The ICMPv6 RA message includes the following: 

• Network prefix and prefix length 

• Default gateway address 

• DNS addresses and domain name 

There are three methods for RA messages: 

• Method 1: SLAAC - prefix, prefix length, and default gateway address 

• Method 2: SLAAC with a stateless DHCPv6 server – partial information, the rest of the 

information, such as DNS addresses, needs to be obtained from a stateless DHCPv6 

server 

• Method 3: Stateful DHCPv6 (no SLAAC) - default gateway address, the rest of the 

information, needs to be obtained from a stateful DHCPv6 server 

The decision of how a client will obtain IPv6 addressing information depends on the settings 

within the RA message. An ICMPv6 RA message includes three flags to identify the dynamic 

options available to a host, as follows: 

• A flag - Address Autoconfiguration flag. Use Stateless Address Autoconfiguration 

(SLAAC) to create an IPv6 GUA. 

• O flag - Other Configuration flag. Other information is available from a stateless 

DHCPv6 server. 

• M flag - Managed Address Configuration flag. Use a stateful DHCPv6 server to obtain 

an IPv6 GUA. 

 

  



Computer Networks. Practical activities 

61 

 

• Method 1 – SLAAC (Figure 7.8) 

 

Figure 7.8 SLAAC process 

• Method 2 - SLAAC with a stateless DHCPv6 server (Figure 7.9) 

 

Figure 7.9 SLAAC with a stateless DHCPv6 server process 

• Method 3 - Stateful DHCPv6 (no SLAAC) (Figure 7.10) 

 

Figure 7.10 Stateful DHCPv6 process 

  



Computer Networks. Practical activities 

62 

 

3. Practical activity 

3.1 Discuss the theoretical aspects presented in this chapter. 

3.2 Consider the network topology below (Figure 7.11): 

 

Figure 7.11 Test network topology 

Step 1: Before configuring the network devices, discuss the IPv6 address assignment in the 

Table 7.1: 

Table 7.1 IPv6 addresses for the test network  

Device Interface IPv6 Address 

Laptop 1 Fa0 DHCPv6 

Laptop 2 Fa0 DHCPv6 

R1 Gig0/0 2001:1:1:1::1/64 

fe80::1 link-local  

R1 Gig0/1 2001:1:1:2::1/64 

R2 Gig0/1 2001:1:1:2::2/64 

fe80::2 link-local  

R2 Gig0/0 2001:1:1:3::1/64 

Note*: pay attention to the interface names of the router you are using, some routers may only have FastEthernet 

interfaces. 

Step 2: Assign hostnames, enable IPv6 routing and assign static IPv6 addresses to router 

interfaces. 

Example: 

R1>enable  

R1#configure terminal  

Router(config)#hostname R1 

R1(config)#ipv6 unicast-routing  

 

R1(config)# interface gigabitEthernet 0/0 

R1(config-if)#ipv6 address fe80::1 link-local  

R1(config-if)#ipv6 address 2001:1:1:1::1/64 

R1(config-if)#no shutdown 



Computer Networks. Practical activities 

63 

 

Use the following command to display the IPv6 addresses configured on the router: 

R1#show ipv6 interface brief 

Step 3: Configure a static route on each router pointed to the IPv6 address of Gig0/1 on the 

other router. For R1 router specify the LLA address for the next hop and for the R2 router 

specify the GUA address the next hop. Discuss the differences! 

R1(config)#ipv6 route 2001:1:1:3::/64 GigabitEthernet0/1 FE80::2 

R2(config)# ipv6 route 2001:1:1:1::/64 2001:1:1:2::1 

Use the following command to display the IPv6 routing table: 

Router#show ipv6 route 

Step 4: Verify SLAAC Address Assignment (Figures 7.12 and 7.13). 

 

Figure 7.12 IP configuration view - GUI 



Computer Networks. Practical activities 

64 

 

 

Figure 7.13 IP configuration view - CLI 

Step 5: Test the connectivity between end devices from opposite networks (Figure 7.14). 

a. ping <target IP> 

b. tracert <target IP> 

 

Figure 7.14 Connectivity testing commands 

Step 6: Replace the configured static routes with default routes and test the connectivity 

between end devices from opposite networks. In IPv6, the default route is ::/0. 

R1(config)#no ipv6 route 2001:1:1:3::/64 GigabitEthernet0/1 FE80::2 

R2(config)#no ipv6 route 2001:1:1:1::/64 2001:1:1:2::1 

 



Computer Networks. Practical activities 

65 

 

R1(config)#ipv6 route ::/0 ______________________________________ 

R2(config)#ipv6 route ::/0 ______________________________________ 

 

Step 7: Configure R1 to provide stateless DHCPv6 for Laptop 1. 

R1(config)#ipv6 dhcp pool R1_NET1 

R1(config-dhcpv6)#dns-server 2001:1:1:1::F 

R1(config-dhcpv6)#domain-name NET1.com 

R1(config-dhcpv6)#exit 

R1(config)#interface gigabitEthernet 0/0 

R1(config-if)#ipv6 nd other-config-flag  

R1(config-if)#ipv6 dhcp server R1_NET1 

 

Step 8: Verify stateless DHCPv6 Address Assignment (Figures 7.15 and 7.16). 

 

Figure 7.15 IP configuration view - GUI 



Computer Networks. Practical activities 

66 

 

 

Figure 7.16 IP configuration view - CLI 

 

Step 9: Configure R2 to provide stateful DHCPv6 for Laptop 2. 

R2(config)#ipv6 dhcp pool R2_NET3 

R2(config-dhcpv6)# address prefix 2001:1:1:3::/64 

R2(config-dhcpv6)#dns-server 2001:1:1:3::A 

R2(config-dhcpv6)#domain-name NET3.com 

R2(config-dhcpv6)#exit 

R2(config)#interface gigabitEthernet 0/0 

R2(config-if)#ipv6 nd managed-config-flag 

R2(config-if)#ipv6 dhcp server R2_NET3 

 

  



Computer Networks. Practical activities 

67 

 

Step 10: Verify stateful DHCPv6 Address Assignment (Figures 7.17 and 7.18). 

 

Figure 7.17 IP configuration view - GUI 

 

Figure 7.18 IP configuration view - CLI 



Computer Networks. Practical activities 

68 

 

Step 11: Test the connectivity between end devices from opposite networks. 

a. ping <target IP> 

b. tracert <target IP> 

 

  



Computer Networks. Practical activities 

69 

 

CHAPTER 8: APPLICATION LAYER: NETWORK PROGRAMMING 

WITH SOCKETS 

 

1. Objectives 
Prerequisite: Use a working software environment for your preferred programming language 

(Java, C#, Python, C/C++, etc.)  

At the end of the activity, students will be able to write software for socket applications and 

debug network applications using Wireshark. 

 

2. Theoretical considerations 
The current practical work focuses on the Transport and Application layers of the ISO/OSI 

stack (Figure 8.1). 

 

Figure 8.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

This practical activity addresses the programming side of software engineering and 

communication offered through the use of network sockets in a desktop environment. Socket 

programming is available in any high level programming language and sockets are transmitting 

information at the Application Layer. Sockets are used in different types of applications, such 

as: Client-Server, peer-2-peer systems, inter-process communication (on the same machine). 

Network sockets can be constructed to use both IPv4 and IPv6 addresses. A socket is the 

combination of an IP address and a port number for use in a network application. A network 

application provides connectivity between different network devices. It is not possible to bind 

a socket to a port that is already in use by any other application, however the same port may be 

used concurrently by TCP and UDP transport layer protocols. The IP addresses identify the 

network device, but the port number uniquely identifies each running application on the current 

network device. 



Computer Networks. Practical activities 

70 

 

The operations that an application can perform on a socket are the following: 

• Create - Creation of a socket object  

• Bind - Configure the socket object to use a local pair of IP address and port 

number to accept connections 

• Listen - Program the socket to wait for incoming connections 

• Accept - Accept the incoming connection 

• Connect - This operation is used by a client that wants to connect to a server 

• Send - Used to send data over the socket to the remote destination 

• Receive - Used to receive data which is sent from a remote location 

• Close - close the connection between the two sockets 

2.1. Working with sockets on the local machine 

• In order to simulate a network on the local machine, the entire available loopback range: 

127.0.0.0 - 127.255.255.255 can be used. The loopback network interface is available 

only on the local host and is mainly used for diagnostics and standalone network 

applications. Therefore, a simulated local network can use these IP addresses for 

communication. In order to test and confirm that this range can be used, a ping 

command can be run from the local terminal to verify connectivity to said IP addresses 

(Figure 8.2): 

 

Figure 8.2 Loopback addresses testing 

• It is also possible to assign multiple valid IP addresses on the local interface, but this 

has to be done manually by statically allocating IP addresses to the interface. In this 

case, running the ipconfig command would show all the IP addresses assigned to the 

same interface. See an example below (Figure 8.3): 



Computer Networks. Practical activities 

71 

 

 

Figure 8.3 IP configuration view - CLI 

• After having assigned the IP addresses, sockets can now be created to use these IP 

addresses. 

2.2. TCP Sockets 

• TCP (Transmission Control Protocol) sockets are connection oriented and represent a 

reliable data transmission mechanism that allows data to be received and processed in 

the same order it was transmitted. 

• The Figure 8.4 shows a Wireshark traffic capture on the “Adaptor for loopback traffic 

capture”. The screenshot shows a client-server communication via sockets using the 

loopback addresses. The applied filter is tcp.port == 1234. The server is bound to the 

127.0.0.1 address and awaits connections on port number 1234 while the client binds on 

the 127.0.0.2 address sending a payload of 14 bytes to the server. 

 
Figure 8.4 Wireshark capture of TCP socket communication 



Computer Networks. Practical activities 

72 

 

• The screenshot highlights the TCP mechanism represented by acknowledgement (ACK) 

packets. The first three packet exchanges (Figure 8.4) represent the 3-way handshake 

which is needed to establish the connection for any TCP connection (Figure 8.5) and 

following that the packet sending the payload is visible. This handshake assures that both 

hosts want to communicate and acknowledge the other host’s intention to communicate. 

 

Figure 8.5 TCP 3-way handshake 

• The Wireshark image shows a socket communication which remains open. 

o Answer the following question while working on the practical activity: If the 

socket connection is closed, what are the TCP flags that are set in order to close 

the connection? 

 

2.3. UDP Sockets 

• In contrast with the TCP sockets, UDP (User Datagram Protocol) sockets are not 

connection oriented and they do not provide reliable communication. This means they 

do not guarantee that network packets are delivered to the destination. The Figure 8.6 

represents a Wireshark capture (again on the “Adaptor for loopback traffic capture”) of 

a UDP communication between two hosts. The applied filter is udp.port == 1234. As 

can be seen, there is no handshake performed and there aren’t any ACK packets being 

transmitted. 



Computer Networks. Practical activities 

73 

 

 

Figure 8.6 Wireshark capture of UDP socket communication 

TCP and UDP socket communications are presented in Figure 8.7 a and b. 

 

 

 

a. TCP socket communication b. UDP socket communication 

Figure 8.7 Socket communications 

1. Implementation template 

• A network device can function in 3 modes: 

o Server: Receiving device 

o Client: Sending device 

o Relay: Acting as an intermediary node in a communication and acts as both 

sending and receiving device. This type of network node can be encountered in 

Wireless Sensor Networks (WSN) where not all sensor nodes are in the wireless 

range of the collector device, therefore some nodes need to forward the 

information to the sink node (the collector node). 



Computer Networks. Practical activities 

74 

 

• This chapter provides a template for implementing the relay communication node using 

OOP concepts (the template is written in pseudocode, not in a particular programming 

language). This is not the only possibility to organize the code, students can choose any 

software design methodology they are comfortable with. 

 

Relay node implementation template 

class RelayNode { 

public: 

    RelayNode(IPAddress, serverPortNr) { 

        m_server.listen(IPAddress, serverPortNr); 

        m_client.bind(IPAddress); 

 

        m_server.onReceive() => { 

            ByteArray receivedData = m_server.readData(); 

            m_client.connectToHost(m_nextHopIpAddress, m_nextHopPortNr); 

            m_client.sendData(receivedData); 

            m_client.close(); 

        } 

    } 

    void setNextHopInformation(nextHopIPAddress, nextHopServerPortNr) { 

        m_nextHopIpAddress = nextHopIPAddress; 

        m_nextHopPortNr= nextHopServerPortNr; 

    } 

 

private: 

    Server m_server; // server instance accepting connections 

    Client m_client; // client instance sending data to the next hop 

    IPAddress m_nextHopIpAddress; // next hop address used by the client instance 

    int m_nextHopPortNr; // next hop port nr used by the client instance 

} 

 

void main() { 

    RelayNode relay(127.0.0.1, 1234); 

    relay.setNextHopInformation(127.0.0.2, 2345) 

    … 

    // run application event loop 

} 

 

3. Practical activity 
• Each student will be assigned one of the topologies below and the simulation scenario 

has to be implemented in software 

• Besides the constraints imposed by each simulation scenario, the common tasks for 

each implementation are the following: 

o Use a programming language of choice to implement the network simulation 

o Use the loopback address range for addressing: 127.0.0.0 – 127.255.255.255 

o Test the implementation using Wireshark 

o Deliver the implementation (source code or link to online code versioning 

repository) 



Computer Networks. Practical activities 

75 

 

o Provide a Wireshark capture to prove the communication between different IP 

addresses 

o Inspect the ratio between total delivered payload against the relevant application 

layer traffic / the ratio between the total packet length (headers and data) 

compared to the length of data sent (use Wireshark statistics or manual packet 

inspection) 

o Depending on the implemented simulation, research the headers for TCP and/or 

UDP protocols. Using Wireshark, identify the header elements in the captured 

traffic 

 

3.1 Ring communication 

• Three computers are communicating in a single direction creating a loop (Figure 8.8) 

• One of the computers initiates the communication sending the value ‘1’ 

• Upon receipt, each network device increments the received value and sends it to the 

next device 

• The communication ends when the delivered payload reaches the value ‘100’ 

• Implementation hints: 

o Implement a single class which is instantiated 3 times with different 

communication parameters (reuse the code and do not duplicate it for each 

instance) 

o All communication uses TCP sockets (optional) 

 

Figure 8.8 Ring communication network topology 

 

3.2 Node selector 

• There are three nodes in the topology: N1, N2, N3 (Figure 8.9) 

• N1 increments a value 100 times and after every increment it sends the value to either 

N2 or N3 which are selected randomly for transmission 

• When N2 receives an integer value which is a multiple of 3 it will send an ACK packet 

back to N1 



Computer Networks. Practical activities 

76 

 

• When N3 receives an integer value which is a multiple of 5 it will send an ACK packet 

back to N1 

• Implementation hints: 

o Implement a single class for N2 and N3 which is instantiated with different 

communication parameters (reuse the code and do not duplicate it for each 

instance) 

o All communication uses UDP sockets (optional) 

 

Figure 8.9 Node selector network topology 

 

3.3 Relay nodes 

• There are four nodes in the topology (Figure 8.10), Sender and three possible 

destinations (D1, D2, and D3) 

• The Sender node is transmitting 100 packets containing an integer number randomly to 

one of the 3 possible destinations (D1, D2 or D3) 

• After each packet transmission the integer number is incremented 

• Every node can only send data to the next hop to which it is connected to, therefore a 

packet from the Sender to D3 must pass through D1 and D2 

 
 

Figure 8.10 Relay nodes network topology 

• Implementation hints: 

o The data payload that is transmitted via the socket has to contain the target IP 

address, so the payload has the following format (Figure 8.11): 

Target IP address Value 



Computer Networks. Practical activities 

77 

 

Figure 8.11 Payload format 

o Every time a node receives a packet it verifies whether the received payload’s 

target IP address is the same as the current node IP address. If it is identical, the 

communication stops here, otherwise the data is forwarded to the next hop. 

o Implement a single class for D1, D2 and D3 which is instantiated with different 

communication parameters (reuse the code and do not duplicate it for each 

instance) 

 

  



Computer Networks. Practical activities 

78 

 

CHAPTER 9: ETHERNET, ARP AND NDP 

 

1. Objectives 

The objectives of this practical activity consist of understanding the structure of the Ethernet 

frame and the techniques used for discovering other devices within an Ethernet based network. 

Additionally, the simulation mode of the Cisco Packet Tracer tool is explored. 

 

2. Theoretical considerations 

This practical activity is concerned with Layer 2 operations performed on switches. Layer 2 

refers to the Data Link Layer of the ISO/OSI model, which corresponds to the Network Access 

Layer in the TCP/IP model. 

 

Figure 9.1 Network stack models and PDU naming in each level. The arrows indicate the addressed 

layers in the current activity 

In order for a switch to forward a packet on a specific port, it maintains a switching table which 

contains a correspondence between a destination MAC address and the switch’s port number. 

The MAC addresses used for communication are found in the Ethernet (Layer 2) frame header 

and a switch does not decapsulate the frame any further when manipulating the packet contents 

(Figure 9.2). This practical activity continues with providing more details regarding Layer 2 

operations. 

 



Computer Networks. Practical activities 

79 

 

 

Figure 9.2 Switching operation, showing frame serialization/deserialization  

in the Network Access layer 

2.1 Ethernet, Ethernet II and IEEE 802.3 

Ethernet, Ethernet II and IEEE 802.3 are often used interchangeably as terms. Even though the 

terms tend to refer to very similar standards, they are slightly different, both historically and 

technically. In 1981 a consortium formed by Digital Equipment Corporation, Intel and Xerox 

(abbreviated as DIX) developed the Ethernet standard (also referred to as DIX 1.0 or Ethernet 

I). It was replaced with DIX 2.0, much more commonly known as Ethernet II in 1982. In 1983, 

IEEE introduced the 802.3 standard in an attempt to standardize the protocol beyond the DIX 

consortium. Nowadays, Ethernet II is generally the more popular approach, for reasons that 

will be described shortly.  

There are two main differences between Ethernet II and IEEE 802.3. The first one is that 

Ethernet II uses a Type (also referred to as EtherType) field, which specifies the protocol 

encapsulated within the payload, whilst 802.3 uses that field for specifying payload length. The 

second difference is that, in order to run 802.3 within a TCP/IP stack, some additional 

information needs to be used (based on the SNAP and 802.2 format – beyond the scope of this 

practical activity) and, as such, taken from the Data field. This totals to 8 bytes which 802.3 

uses from the Data field, reducing this field down to a range of 38 to 1492 bytes. Historically 

though, the length field has been considered not necessary and networks operate just as fine 

without it – this is the reason why Ethernet II is the more commonly used standard. All modern 

operating systems however work with both 802.3 and Ethernet II. 

Note that when most engineers refer to Ethernet, they are generally referring to Ethernet II or, 

more rarely, to the IEEE 802.3 standard. This practical activity will use the term Ethernet and 

Ethernet II interchangeably, since Ethernet I is no longer used.  

 

 

 



Computer Networks. Practical activities 

80 

 

2.2 Ethernet II Frame Structure 

Figure 9.3 presents the Ethernet II/IEEE 802.3 frame structure and the number of bytes 

allocated for each field. The following section describes the meaning of each field within an 

Ethernet frame. 

Bytes 7 1 6 6 2 46-1500 4 

(b) Preamble SFD DA SA Length/Type Data FCS 

Figure 9.3 Ethernet II / IEEE 802.3 Frame Structure 

Since Ethernet defines protocols for both the Physical and the Data Link Layer parts of a 

networking stack, some fields are handled by the Physical layer (Preamble and SFD), whilst 

some by the Data Link Layer (other fields). 

The Preamble field is a 56-bit series of alternating ‘0’ and ‘1’ bits. They are used so that the 

devices involved in communication can synchronize their respective clocks and thus adjust the 

sampling rate accordingly for correct reception of the frame. The concept of using a preamble 

does not impose a fixed length but is rather adjusted on an individual protocol basis, even if 

Ethernet uses a fixed length of 56 bits. Using more bits allows more time for the communicating 

devices to synchronize but increases the overhead of communications, whilst reducing the 

preamble length has opposite effects. 

The Start Frame Delimiter (SFD) field is a byte used to break the bit pattern in the Preamble 

and mark the start of the rest of the Ethernet frame. Specifically, it is “10101011” or 0xD5 

(again, this is specifically in Ethernet; other protocols might use different SFD values). Please 

consider the fact that the bits are transmitted left to right and interpreted in LSB order.  

The Destination Media Access Control (MAC) Address (DA) and Source MAC Address (SA) 

are identifiers which are uniquely assigned to the Network Interface Controller (NIC) of each 

device. Note that a device can have multiple NICs and, therefore, multiple corresponding MAC 

addresses. The role of the DA and SA will be discussed in more detail in the following sections.  

The Type field is used to indicate the type of message encapsulated in the frame. Table 9.1 

indicates some specific Type values.  

Table 9.1 EtherType Examples 

Hex Value Protocol Type 

0x0000-0x05DC Length field for IEEE 802.3 

0x0600 Xerox 

0x0800 IPv4 

0x0801 X.75 

0x0806 ARP 

0x86DD IPv6 



Computer Networks. Practical activities 

81 

 

Note that due to the minimum requirement of 46 bytes used for data transmission if the length 

is any less than that value the Data Link Layer adds padding bytes to the Data field. The 46 

byte value is based on the CSMA/CD mechanism (presented during the lecture) and beyond 

the scope of this activity. Alternatively, this field is considered to represent Length for 802.3, 

when its value is less than 0x05DC. 

The Data field corresponds to the payload which is encapsulated within the frame. This is 

typically higher level protocol data. 

The Frame Check Sequence (FCS) field is used for verifying integrity of the message. It is a 

four-byte Cyclic Redundancy Check (CRC). It is a numerical value which is computed based 

on all data within the frame, with the exception of the actual FCS (and, obviously, the Preamble 

and SFD). On reception this value is recalculated and compared with the original FCS. If the 

two values are different then the frame contains errors and is discarded.  

2.3 Address Resolution Protocol 

The Address Resolution Protocol (ARP) is a very important protocol in networking. As seen 

during the lectures and previous activities, addressing is handled separately by OSI (or TCP/IP) 

stack layers. The DLL handles MAC addressing (even though they are sometimes referred to 

as physical addresses and are dependent on the NIC, the Physical layer does not generally 

handle MAC addresses), the network layer handles IP addresses and the Transport layer 

handles port numbers. The Transport layer is not addressed in this practical activity. In a typical 

networking scenario, when a device intends to send a message to a destination, it already knows 

the destination IP address from a DNS server. However, in order to correctly assemble a frame, 

the DLL needs to know the MAC address, which is not handled by DNS servers and manual 

handling is extremely impractical. As such, ARP provides a simple mechanism to figure out 

the MAC address for a known IP address, a process known as Address Resolution. 

Each device contains an internal data structure, known as an ARP cache, which stores the 

mappings between IP addresses and MAC addresses on a network. ARP is used to populate 

this cache. Figure 9.4 illustrates the contents of the cache through running the Windows arp -

a console command. 

 

Figure 9.4 ARP Cache 



Computer Networks. Practical activities 

82 

 

In order to do so two ARP frames are generally needed: an ARP Request and an ARP Reply 

frame. Let us consider two devices on a network: device A intends to transmit a message to 

device B. The ARP algorithm is as follows: 

1. Device A checks its ARP cache. If there is an entry with B’s IP address it will jump to 

step 5 

2. Device A broadcasts an ARP request containing the target IP. All devices receive this 

broadcast since A doesn’t yet know the MAC address of B 

3. If device B is on the network it will reply with an ARP response containing its own 

MAC address. All other devices will silently (i.e. without sending a message announcing this) 

discard the request 

4. Device A will update its ARP cache  

5. Device A will send the intended message as a unicast to B 

ARP caches contain two types of entries: static and dynamic. Static entries are introduced by 

the user and are kept permanently in the cache, unless specifically removed. Dynamic entries 

are introduced by ARP and are periodically deleted. Each ARP entry can be deleted after 

periods of seconds, up to several hours, depending on the network, the device type, OS features 

and individual configurations. Deleting dynamic entries is an automatic process (but which can 

be initiated manually) and is useful because some ARP entries might not be needed anymore. 

Some examples of this situation are: 

• A device changes its IP address (especially if using DHCP) 

• A device is removed from the network so the entry might not be needed anymore 

• A device has its NIC changed and, implicitly, its corresponding MAC address in the 

network 

The reason for periodically removing entries in the cache is to remove any unnecessary or 

unused entries (especially since the cache is of fixed size, which might lead to certain strategies 

of cyber-attacks). Only ARP messages update ARP caches, so a device will update an entry 

either when receiving an ARP request, when receiving an ARP reply as part of the resolution 

process or when receiving an ARP broadcast (this final scenario only updates ARP entries, it 

does not add new ones – also used for avoiding overflowing the cache). 

Static entries should generally be used only when a device is intended to remain in the network 

for a long time (e.g. a router). With the exception of some forms of cyber-attacks, ARP does 

not generate much overhead.  

Other ARP use cases are: using Proxy ARP, which implies one device responding to an ARP 

request on behalf of another device and using a gratuitous ARP, which implies sending an ARP 

broadcast so that other hosts can update their respective entries. These use cases are beyond 

the scope of this activity. 

 

 

 



Computer Networks. Practical activities 

83 

 

2.4 Neighbor Discovery Protocol 

Neighbor Discovery Protocol (NDP or simply ND) is a protocol used with IPv6 which has 

multiple roles. It defines five ICMPv6 packet types, some of which have already been 

presented. These are: Router Solicitation (RS), Router Advertisement (RA), Neighbor 

Solicitation (NS), Neighbor Advertisement (NA) and Redirect packets.  

NDP fulfills several roles, of which the current activity work only briefly presents MAC and 

IPv6 address resolution. 

In IPv6 NS and NA messages are used to replace ARP, and are, to a certain extent, equivalent 

to the ARP Request and ARP Reply messages. Much like the ARP cache, IPv6 enabled devices 

use an IPv6 Neighbor Table or IPv6 Neighbor Discovery Cache. There are, however, certain 

optimizations with NDP. 

One significant optimization is brought on by the use of multicast addresses: instead of sending 

a broadcast ARP request, NDP implies sending an NS to the target device's multicast address, 

which reduces network overhead.  

Another optimization is brought on by using five states which describe an IPV6 ND Cache 

entry: 

1. Incomplete (NS has been sent and NA not yet received) 

2. Reachable (NS has been sent and NA received or ND entry successfully used by upper 

layer protocol) 

3. Stale (Timeout interval elapsed) 

4. Delay (Timeout interval elapsed but recent packet sent to target, state moving to Probe 

after sending an NS) 

5. Probe (NS has been sent from delay, waiting for NA) 

IPv6 ND builds upon ARP but has multiple functions and is much more complex than simply 

resolving MAC addresses to IP addresses.  

 

3. Practical activity 

In the following activity you will use Wireshark in order to analyze the ARP protocol. Using 

the local ARP cache on the device requires administrator privileges. The current instructions 

are for Windows based systems. On Unix based systems, the sudo command might be required 

to manipulate the local ARP cache. The activity has two parts: 

1. Working on the local device 

a. Clearing the local ARP cache 

b. Examining an ARP request 

c. Examining an ARP reply 

 

 

 



Computer Networks. Practical activities 

84 

 

2. Working in Packet Tracer 

a. ARP Simulation Mode 

b. NDP Simulation Mode 

 

 

3.1 Working on the local device 

Step 1: First you will need to open a command line or PowerShell with Administrator 

privileges. To do this, right click the appropriate program and select Run as Administrator. 

Enter the password when prompted. Use the ipconfig /all command and write down your IPv4 

address, your appropriate MAC address and the default gateway’s IPv4 address. 

Step 2: Open a Wireshark capture on the appropriate interface. In order to clear the ARP cache 

you need to use the arp -d command. To view the ARP cache the arp -a command is used. 

Since the ARP cache is continuously updated, in order to make sure that it is cleared you can 

combine the two instructions using the & character, as follows: arp -d & arp -a (optional, if 

arp -d does not work, use one of the following commands: arp -ad or netsh interface ip delete 

arpcache). To make sure that the MAC address of the default gateway is reintroduced in the 

cache ping the default gateway’s IPv4 address. Stop the Wireshark capture. You can use the 

arp -a command again to check that the cache now contains the default gateway’s 

corresponding entry.  

Step 3: Use the arp filter in Wireshark in order to view only ARP frames. Select the first 

broadcast message. This is an ARP request message. Notice that the type is Ethernet II (unless 

specifically using a different protocol). Expand the appropriate Ethernet II tab in Wireshark. 

Check that the message originated from your device either using the source MAC address or 

the source IP address (there might be other request messages on the network). If the first request 

isn’t yours, go ahead and navigate until you find your own.  

Step 4: Now that you’ve identified the correct ARP request message go ahead and analyze it 

(Figure 9.5). Notice that the DA field is FF:FF:FF:FF:FF:FF. This is a broadcast address. 

Observe that the type field is 0x0806 which correctly indicates an ARP frame. Note that the 

addresses in your own case will be different.  

 

Figure 9.5 Wireshark capture of a detailed ARP Request frame 

Step 5: Let us investigate the actual ARP contents. Expand the appropriate selection, as seen 

in Figure 9.6. 



Computer Networks. Practical activities 

85 

 

 

Figure 9.6 Wireshark capture of an ARP Request frame 

Let us analyze each field and understand their respective purpose and meaning. Hardware type 

and Protocol type refer to what types of addresses are being mapped to one another. In this case 

a MAC address is mapped to a known IPv4 address (remember that this is the purpose of ARP). 

The following two fields refer to the size of each address: a MAC address is 6 bytes long whilst 

an IPv4 address is 4 bytes long. The Opcode is, in the case of ARP, one of two options: “1” 

represents a request and “2” represents a response. The Sender MAC and IP addresses are 

obviously your own (including the sender MAC in the request ensures that the reply can be 

sent as unicast to the requester). What is noteworthy though is that the protocol includes the 

Target MAC and Target IP addresses. A very important distinction is the use of Target instead 

of Destination. Even though the destination is a broadcast, as previously seen, the target 

represents the device whose MAC address is being resolved. Hence the distinction between 

destination and target. The IP address is clearly the default gateway and because the target 

MAC address has yet to be resolved this field is left unpopulated. 

Step 6: Let us have a look at the corresponding ARP reply (Figure 9.7). First you need to find 

the correct reply – it should be from the default gateway to your device. Depending on how 

long the capture was running for there might be multiple requests and replies – this is due to 

the ARP cache refresh rate. 

 

Figure 9.7 Wireshark capture of an ARP Reply frame 

 It can be seen that this is a unicast message from a MAC on the network (check that it’s the 

default gateway based on what you previously noted).  

 



Computer Networks. Practical activities 

86 

 

Step 7: Let us investigate the contents of the actual protocol (Figure 9.8). 

 

Figure 9.8 Wireshark capture of an ARP Reply frame 

 Notice the Opcode is changed and that the Sender MAC address is now visible (during the 

request this corresponded to the unknown Target MAC address). In conclusion, our own device 

receives this reply from the default gateway and can thus populate its ARP cache with the 

appropriate MAC address. Communications can continue now without exchanging any more 

ARP messages, except if the entry is deleted after a timeout. 

3.2  Working in Packet Tracer 

a. ARP Simulation Mode 

This part of the practical activity uses the Simulation mode of the Cisco Packet Tracer tool to 

verify how network packets travel inside a network. This will also clarify why the first echo 

request of a ping command can sometimes be an unsuccessful timeout (as probably noticed in 

previous activities). 

Step 1: Launch Packet Tracer, create a network topology containing only switches and 

endpoint devices and navigate to the Simulation mode, as indicated by the arrow in Figure 9.9. 



Computer Networks. Practical activities 

87 

 

 

Figure 9.9 PacketTracer Simulation Mode 

Step 2: In the Simulation window, click on the Show All/None button to clear all filters and 

then click on the Edit Filters button and select only ARP and ICMP (Figure 9.10). 

 

Figure 9.10 PacketTracer Simulation Filters 

Step 2: Rename the PC names with their own MAC addresses; they can be found in the PC 

menu -> Config tab -> FastEthernet0 interface . 



Computer Networks. Practical activities 

88 

 

Step 3: Assign each PC an IP address from the same network (e.g. 10.0.0.1, 10.0.0.2 and 

10.0.0.3, all of them /8 – feel free to use a different network/subnet). 

Step 4: Open the command prompt on one of the PCs and verify that its arp cache is empty. If 

it is not empty run the arp -d command to clear it. 

Step 5: Ping another PC’s IP address and inspect the simulation. At this point the ARP cache 

of the PC is empty so it cannot populate the entire packet (specifically it cannot populate the 

Ethernet frame DA field), therefore it launches an ARP broadcast request in the network – 

recall that this is the first stage of the ARP protocol. The step by step traffic analysis (Figure 

9.11, Figure 9.12 and Figure 9.13) shows the path that the request takes; note that only the 

target device replies to the broadcasted request and all other devices silently drop the packet.  

 

Figure 9.11 ARP request 



Computer Networks. Practical activities 

89 

 

 

Figure 9.12 ARP broadcast 

 

Figure 9.13 ARP reply 

Step 6: The packet content can be explored by double clicking the packet in the Event List 

(Figure 9.14). The same information which was discovered in the first part of the practical 

activity can be seen here (information at all 7 layers of the OSI model, the same as in 

Wireshark). 



Computer Networks. Practical activities 

90 

 

 

Figure 9.14 Inspection of frame content in PacketTracer 

Step 7: Resume the packet flow in the network and inspect the console of the PC running the 

ping command. If the ARP reply takes too long to return then the first ICMP echo reply 

message might not reach the PC in time, resulting in a request timeout (recall that the ping 

utility uses ICMP echo requests and replies). This explains why you probably noticed in 

previous Packet Tracer activities that, especially on a newly formed network, some messages 

time out (Figure 9.15). 

 

Figure 9.15 Ping timeout exemplified in PacketTracer 

Step 8: Use the following commands on the switch components to inspect their MAC address 

tables and how they get populated when the first ARP requests/replies travel through the 

network. 

Switch>enable 

Switch#show mac address-table 

Switch#clear mac address-table 

 

 



Computer Networks. Practical activities 

91 

 

b. NDP Simulation Mode 

Using the IPv6 .pkt file which was created in a previous activity for the static routing 

functionality, apply the NDP packet filter in the Edit Filters window and inspect the traffic 

according to the description in the activity text. Find the RS, RA, NS and ND packets using the 

Simulation mode. 

  



Computer Networks. Practical activities 

92 

 

CHAPTER 10: VLANs, TRUNKING AND INTER-VLAN ROUTING 

 

1. Objectives 

At the end of the practical activity, students will be able to define and classify Virtual Local 

Area Networks (VLANs), explain the purpose of trunking and inter-VLAN routing and 

configure VLAN-based networks in a multi-switched environment. 

 

2. Theoretical considerations 

The current practical work focuses on the Data Link and Network layers of the ISO/OSI stack 

(Figure 10.1). 

 

Figure 10.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 VLANs 

A VLAN is a partition of the set of devices connected to the local network. Grouping into 

VLANs can be done according to different criteria such as the role of users or the type of traffic. 

This grouping can be done regardless of the physical location of the devices or users (Figure 

10.2). VLANs work by logically segmenting the network into broadcast domains, with each 

VLAN representing a different broadcast domain. The switch maintains a different bridging 

table for each VLAN. Devices in a VLAN are restricted to communicating only with devices 

in the same VLAN. Connectivity between VLANs is facilitated by routers. 

 

 



Computer Networks. Practical activities 

93 

 

The benefits of VLANs are: 

• smaller broadcast domains; 

• reduced cost; 

• increased network performance; 

• increased scalability; 

• increased security; 

• better management. 

Common types of VLANs: 

• Default VLAN – Also known as VLAN 1, cannot be deleted or renamed. All switch 

ports are members of VLAN 1 by default; 

• Data VLAN – Data VLANs are commonly created for specific groups of users or 

devices. They carry user generated traffic; 

• Voice VLAN – Voice VLAN is created because this type of traffic requires assured 

bandwidth and delay less than 150 ms from source to destination; 

• Native VLAN – This is the VLAN that carries all untagged traffic. This is traffic that 

does not originate from a VLAN port; 

• Management VLAN – This is a VLAN that is created to carry network management 

traffic including SSH, SNMP, Syslog, and more. 

 

Figure 10.2 VLANs in a multi-switched environment 



Computer Networks. Practical activities 

94 

 

2.2 Trunking 

A trunk is a point-to-point link between two network devices that does not belong to a specific 

VLAN and carries more than one VLAN. It extends VLANs across the network and enables 

devices connected to different switches, but in the same VLAN, to communicate through the 

switched network. 

The ports assigned to VLANs are configured in access mode and use standard Ethernet frame 

headers. This header does not contain information about the VLAN to which the frame belongs. 

When the frames are forwarded between switches on trunk lines, the VLAN membership 

information must be transmitted with the frames. Therefore, when Ethernet frames are placed 

on the trunk, the VLAN membership information is added, the frames using 802.1Q headers 

instead of Ethernet headers. Adding information about VLANs is called tagging, and 802.1Q 

headers also add other information to the frames beside VLAN membership. 

The Figure 10.3 presents the Ethernet II/IEEE 802.3 frame structure used in ports configured 

in access mode and the IEEE 802.1Q frame structure used in ports configured in trunk mode. 

The following section describes the meaning of the Tag control information fields. 

 

 

Figure 10.3 Ethernet II/IEEE 802.3 and IEEE 802.1Q frames 

VLAN tag control information field consists of the following fields: 

• Type - Tag protocol ID (TPID) value. For Ethernet, it is set to hexadecimal 0x8100. 

• User priority - Supports level or service implementation. 

• Canonical Format Identifier (CFI) - Enables Token Ring frames to be carried across 

Ethernet links. 

• VLAN ID (VID) - VLAN identification number, supports up to 4096 VLAN IDs. 

In the example below (Figure 10.4), Laptop1 connected to switch S2 on access port Fa0/6 in 

VLAN 10 is communicating with Laptop2 connected to another switch, S3, on access port 

Fa0/7 in the same VLAN, VLAN 10. The ports between the switches are configured in trunk 

mode. Laptop 1 sends a packet to Laptop 2. When the packet enters switch S2 on access port 

Fa0/6, the packet is encapsulated into an Ethernet II/IEEE 802.3 frame. The S2 switch forwards 

the packet on the Fa0/1 trunk port encapsulating the packet into an Ethernet 802.1Q frame. The 

VLAN number is set to 0x00a (VLAN 10). 



Computer Networks. Practical activities 

95 

 

 

Figure 10.4 Communication in the same VLAN 

2.3 Inter-VLAN routing 

Layer 2 switches don’t forward traffic from one VLAN to another. The traffic between VLANs 

is forwarded using Layer 3 devices, routers or Layer 3 switches, the process being called Inter-

VLAN routing. There are three options for inter-VLAN routing: 

• Legacy inter-VLAN routing; 

• Router-on-a-Stick; 

• Layer 3 switching using SVIs. 

The router-on-a-stick approach (see Figure 10.5) uses one of the router’s physical interfaces 

for inter-VLAN routing. 

• Logical subinterfaces are created on the physical interface; one subinterface per VLAN; 

the subinterfaces use 802.1Q encapsulation to process VLAN tags; 

• Each VLAN is assigned a different network/subnetwork address; 

• Each subinterface is configured in a VLAN with an IP address from the VLAN it 

represents; 

• VLAN hosts are assigned IP addresses from their corresponding VLANs; each host is 

configured to use as default gateway the subinterface representing its VLAN. 

• When a host in a VLAN communicates with a host in a different VLAN, it sends the 

packets to its own gateway, in its own VLAN; the router internally routes between the 

VLANs using subinterfaces as the VLAN networks are present in the routing table as 

connected; the router receives the packets on the source VLAN subinterface and 



Computer Networks. Practical activities 

96 

 

forwards the routed traffic as VLAN-tagged for the destination VLAN out the trunk 

link 

 

Figure 10.5 Router-on-a-stick option for inter-VLAN routing 

  



Computer Networks. Practical activities 

97 

 

3. Practical activity 

3.1 Discuss the theoretical aspects presented in this chapter. 

3.2 Consider the network topology in Figure 10.6: 

 

Figure 10.6 Test network topology 

Step 1: Before configuring the network devices, discuss the IPv4 address assignment in the 

Table 10.1: 

Table 10.1 IPv4 addresses for the test network  

Device Interface IP Address Netmask Gateway 

Laptop 0 Fa0 172.16.20.2 255.255.255.0 172.16.20.1 

Laptop 1 Fa0 172.16.10.2 255.255.255.0 172.16.10.1 

Laptop 2 Fa0 172.16.10.3 255.255.255.0 172.16.10.1 

Laptop 3 Fa0 172.16.20.3 255.255.255.0 172.16.20.1 

R1 Fa0/0.10 172.16.10.1 255.255.255.0 - 

R1 Fa0/0.20 172.16.20.1 255.255.255.0 - 

 

 



Computer Networks. Practical activities 

98 

 

Step 2: Specify the host names for the networking devices (router and switches) 

General syntax: 

Switch(config)#hostname host-name 

Description: Specifies or modifies the host name 

Example: 

Switch(config)#hostname S2 

 

Step 3: Create VLAN 10 and 20 on all the switches and verify vlan information 

General syntax: 

Switch(config)#vlan vlan_id 

Description: Global configuration command that creates VLAN vlan_id 

Switch(config-vlan)#name vlan_name 

Description: Assigns a name to the VLAN 

Example: 

S2(config)#vlan 10 

S2(config-vlan)#name Vlan10 

S2(config-vlan)#exit 

S2(config)#vlan 20 

S2(config-vlan)#name Vlan20 

 

General syntax: 

Switch#show vlan 

Switch#show vlan brief  

Description: Displays VLANs information (the contents of the vlan.dat file ) 

Step 4: Assign ports to VLANs and verify the configuration 

General syntax: 

Switch(config)#interface interface_id 

Description: Enters interface configuration mode 

Switch(config-if)#switchport mode access 

Description: Sets the port to access mode 

Switch(config-if)#switchport access vlan vlan_id 

Description: Assigns the port to a VLAN 



Computer Networks. Practical activities 

99 

 

Example: 

S2(config)#interface fastEthernet 0/6 

S2(config-if)#switchport mode access  

S2(config-if)#switchport access vlan 10 

S2(config-if)#exit 

S2(config)#interface fastEthernet 0/5 

S2(config-if)#switchport mode access  

S2(config-if)#switchport access vlan 20 

 

General syntax: 

Switch#show vlan 

Switch#show vlan brief  

Description: Displays VLANs information (the contents of the vlan.dat file) 

 

Step 5: Set the switch ports connected to other networking devices to trunk mode and verify 

the configuration 

General syntax: 

Switch(config)#interface interface_id 

Description: Enters interface configuration mode 

Switch(config-if)#switchport mode trunk 

Description: Forces the link to be a trunk link 

 

Example: 

S2(config)#interface fastEthernet 0/1 

S2(config-if)#switchport mode trunk 

 

General syntax: 

Switch#show interfaces trunk 

Description: Displays trunking information for the switch 

 

Step 6: Configure the hosts with the IP addressing information in the figure (IP address, 

netmask and gateway) and test the connectivity between them 

a. ping <target IP> 

b. tracert <target IP> 



Computer Networks. Practical activities 

100 

 

Step 7: Configure Inter-VLAN routing and test the connectivity between hosts in different 

VLANs 

General syntax: 

Router(config)#interface interface_id 

Description: Enters interface configuration mode 

Router(config-if)#no shutdown  

Description: Enables the interface 

Router(config-if)#exit 

Description: Returns to the global configuration mode 

Router(config)#interface interface_id.subinterface_id 

Description: Creates a subinterface on an interface 

Router(config-subif)#encapsulation dot1Q vlan_id 

Description: Specifies IEEE 802.1Q as the VLAN tagging method for VLAN vlan_id 

on this subinterface 

Router(config-subif)#ip address ip_address netmask 

Description: Adds an IP address and a netmask on this subinterface 

Router(config-subif)#end 

Description: Returns to the privileged exec mode 

Router#show ip route 

Description: Displays the routing table 

 

Example: 

R1(config)#interface fastEthernet 0/0 

R1(config-if)#no shutdown  

R1(config-if)#exit 

R1(config)#interface fastEthernet 0/0.10 

R1(config-subif)#encapsulation dot1Q 10 

R1(config-subif)#ip address 172.16.10.1 255.255.255.0 

R1(config-subif)#exit 

R1(config)#interface fastEthernet 0/0.20 

R1(config-subif)#encapsulation dot1Q 20 

R1(config-subif)#ip address 172.16.20.1 255.255.255.0 

R1(config-subif)#end 

R1#show ip route 



Computer Networks. Practical activities 

101 

 

Test the connectivity using: 

a. ping <target IP> 

b. tracert <target IP> 

 

Step 8: In the simulation mode, using ping command, analyze the communication between 

hosts in the same VLAN and between hosts in different VLANs 

 

  



Computer Networks. Practical activities 

102 

 

CHAPTER 11: LAYER 2 NETWORKS, SPANNING TREE PROTOCOL, 

LINK AGGREGATION AND ETHERCHANNEL 

 

1. Objectives 

At the end of the lab, students will be able to explain the functions of the switches, the 

Spanning-tree and EtherChannel operation, and to configure Layer 2 networks. 

 

2. Theoretical considerations 

The current practical work focuses on the Data Link layer of the ISO/OSI stack (Figure 11.1). 

 

Figure 11.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 Switches and bridges 

Switches and bridges are layer 2 devices that are used to increase available bandwidth and 

reduce network congestion. Switches and bridges perform two basic operations: switching data 

frames and maintaining switching operations. Switches and bridges segment the LAN creating 

multiple smaller collision domains. Each port creates one segment which is a collision domain 

because the switch or the bridge learns the MAC addresses of devices connected to each port, 

enters this information into a switching or bridging table and forwards or blocks traffic based 

on that table (Figure 11.2). Segmentation allows network congestion to be significantly reduced 

within each segment. The devices within that segment share the total available bandwidth. If 

the switch or the bridge does not know where to send the frame, it broadcasts the frame out to 

all ports. When a reply is returned, the switch or the bridge records the new address in the 

switching or bridging table. Another advantage of the switched connection is that it permits 

full-duplex Ethernet which allows the transmission of a packet and the reception of a different 



Computer Networks. Practical activities 

103 

 

packet at the same time. The disadvantage of layer 2 devices is that they forward broadcast 

frames to all connected devices on the network, so all hosts connected to the switch or bridge 

are still part of the same broadcast domain. 

 

Figure 11.2 Switching table 

Switching is classified as symmetric or asymmetric. Symmetric switching provides switched 

connections between ports with the same bandwidth. Asymmetric switching provides switched 

connections between ports of unlike bandwidth. Asymmetric switching enables more 

bandwidth to be dedicated to the server switch port in order to prevent a bottleneck. 

Switching modes are classified as store-and-forward or cut-through, each mode representing a 

compromise between latency and error detection. In store-and-forward switching mode the 

entire frame is received before any forwarding takes place. This switching mode increases the 

transmission latency and allows more error detection. In cut-through switching mode the frame 

is forwarded through the switch before the entire frame is received. At least the frame 

destination address must be read before the frame can be forwarded. This switching mode 

decreases the transmission latency and allows less error detection. Cut-through switching mode 

has two forms: fast-forward and fragment-free. Fast-forward switching forwards the packet 

after reading the destination address. This switching mode has the lowest level of latency and 

error detection. Fragment-free switching forwards the packet after reading the first 64 bytes of 

the frame. Because collision fragments are smaller than 64 bytes, fragment-free switching 

mode filters out this type of error which also represents the majority of packet errors. This 

switching mode has a higher level of latency and error detection than the fast-forward mode. 

2.2 Spanning-Tree Protocol 

Redundant networking topologies increase the reliability of the network by introducing 

redundant links. These connections introduce physical loops into the network. Because layer 2 

has no mechanism to eliminate lost frames, the frames can loop forever in a layer 2 looped 



Computer Networks. Practical activities 

104 

 

topology causing two types of problems to appear: broadcast storm and switching or bridging 

table instability. The broadcast storm is created by endlessly flooded broadcast frames too all 

ports of the switches or bridges, wasting the bandwidth or making the network unusable. 

Switching or bridging table instability appears when multiple copy of a frame arrive at different 

ports of a switch or a bridge causing MAC entry instability in the switching or bridging table. 

The IEEE 802.1d Spanning-Tree Protocol uses the spanning-tree algorithm to create loop free 

shortest path logical topology in a layer 2 looped topology. The IEEE 802.1w Rapid Spanning-

Tree Protocol uses a rapid spanning-tree algorithm to perform the same function as spanning-

tree algorithm with a shorter convergence time. 

Spanning-Tree Protocol uses Bridge Protocol Data Unit (BPDU) multicast layer 2 messages 

which are sent by the network devices every two seconds by default. The structure of these 

messages is presented in Figure 11.3. 

Root BID Root Path Cost Sender BID Port ID 

Figure 11.3 BPDU message structure 

The BID is an 8-byte field. The two high order bytes are the bridge or switch priority that 

defaults to 32768 and the six low order bytes are the MAC address of the bridge or switch. The 

BID structure is presented in Figure 11.4. 

7 6 5 4 3 2 1 0 

Bridge Priority MAC address 

Figure 11.4 BID structure 

Spanning-Tree Protocol calculates the shortest path network based on cumulative link costs. 

Link costs are based on the speed of the link. Some of the link costs defined by the IEEE 

802.1D standard are presented in Table 11.1. 

Table 11.1 Link costs defined by the IEEE 802.1D standard 

Link Speed Cost 

4Mbps 250 

10Mbps 100 

16Mbps 62 

100Mbps 19 

1Gbps 4 

10Gbps 2 

Some of the link costs defined by the IEEE 802.1w standard are presented in Table 11.2. 

 

 

 

 

 

 

 



Computer Networks. Practical activities 

105 

 

 

Table 11.2 Link costs defined by the IEEE 802.1w standard 
Link Speed Cost 

10Mbps 2000000 

100Mbps 200000 

1Gbps 20000 

10Gbps 2000 

1Tbps 20 

10Tbps 2 

The Port ID is a 2-byte field. The high order byte is the port priority that defaults to 128 and 

the low order byte is the port number. The Port ID structure is presented in Figure 11.5. 

1 0 

Port Priority Port Number 

Figure 11.5 Port ID structure 

The Spanning-Tree Protocol establishes a single root node, called root bridge and constructs a 

topology that has one path for reaching every network node. The resulting tree originates from 

the root bridge. The bridges and switches calculate the shortest path from itself to the root 

bridge. The first decision that all bridges or switches in the network make is the root bridge 

identification, which is done through BPDU messages that are received by all bridges and 

switches. All other decisions in the network are made regarding this root bridge. When a bridge 

or switch first starts up, it assumes it is the root and sends BPDU-s containing the bridge or 

switch MAC address in both the root and sender BID. If a bridge or switch receives a BPDU 

with a lower root BID it sets this root BID in the BPDU-s that are sent out. The bridge or switch 

with the smallest BID value will be the root bridge. Setting the bridge or switch priority to a 

smaller value than the default will make the BID smaller and will influence the root bridge 

identification. For each LAN segment, Spanning-Tree Protocol establishes a designated switch 

as the closest one to the root bridge which handles all communication from that LAN towards 

the root bridge. For each non-root bridge a root port is elected, which gives the best path to the 

root bridge. So, the port with the lowest path cost to the root bridge is elected as the root port. 

If multiple ports have the same path cost to the root bridge, the port with lowest Port ID is 

selected as the root port. The Spanning-Tree Protocol also selects the designated ports which 

are part of the shortest path tree. So, the port with the lowest path cost to the root bridge is 

selected as the designated port. If more than one port in the segment has the same path cost, 

the port on which the bridge or the switch has the lowest bridge or switch ID is selected as 

designated port. On the root bridge, all its ports are designated ports. Redundant links that are 

not part of the shortest path tree are blocked and data frames received on blocked links are 

dropped. 

Each port on a bridge or switch that is using the Spanning-Tree Protocol has one of the 

following five states: blocking, listening, learning, forwarding and disabled. In the blocking 

state ports can only receive BPDU-s, data frames are discarded and no addresses can be learned. 

It may take up to 20 seconds to change from this state. Ports go from the blocking state to the 

listening state. In this state, the switches or bridges determine if there are any other paths to the 



Computer Networks. Practical activities 

106 

 

root bridge. The path that is not the least cost path to the root bridge goes back to the blocked 

state. In the listening state BPDU-s are processed, user data is not being forwarded and MAC 

addresses are not being learned. The listening period is called the forward delay and lasts for 

15 seconds. Ports go from the listening to the learning state. In this state BPDU-s are processed, 

user data is not being forwarded, but MAC addresses are learned from any traffic that is seen. 

The learning state is also called the forward delay and lasts for 15 seconds. A port goes from 

the learning state to the forwarding state. In this state BPDU-s are processed, user data is 

forwarded and MAC addresses continue to be learned. The port can be in disabled state when 

it is administratively down or fails. The time values given for each state are the default values. 

These values have been calculated on an assumption that there will be a maximum of seven 

switches in any branch of the spanning tree from the root bridge. When the network topology 

changes, switches and bridges recompute the Spanning Tree. Convergence on a new spanning-

tree topology using the IEEE 802.1D standard can take up to 50 seconds. 

2.3 EtherChannel 

Link aggregation is the ability to create one logical link using multiple physical links between 

two devices. EtherChannel is a form of link aggregation used in switched networks (Figure 

11.6). This allows for redundancy and higher bandwidth through load sharing among the 

physical links. EtherChannel creates a one-to-one relationship; that is, one EtherChannel link 

connects only two devices. An EtherChannel link can be created between two switches or an 

EtherChannel link can be created between an EtherChannel-enabled server and a switch. 

 

Figure 11.6 EtherChannel 

EtherChannel technology was originally developed by Cisco as a LAN switch-to-switch 

technique of grouping several physical ports into one logical channel. When an EtherChannel 

is configured, the resulting virtual interface is called a port channel. The physical interfaces are 

bundled together into a port channel interface (Figure 11.7). Most configuration tasks can be 

done on the EtherChannel interface instead of on each individual port, ensuring configuration 

consistency throughout the links. 

 

Figure 11.7 Port channel interface 

EtherChannel relies on existing switch ports. There is no need to upgrade the link to a faster 

and more expensive connection to have more bandwidth. 



Computer Networks. Practical activities 

107 

 

Load balancing takes place between links that are part of the same EtherChannel. Depending 

on the hardware platform, one or more load-balancing methods can be implemented. These 

methods include source MAC to destination MAC load balancing, or source IP to destination 

IP load balancing, across the physical links. 

EtherChannel creates an aggregation that is seen as one logical link. Where there is only one 

EtherChannel link, all physical links in the EtherChannel are active because STP sees only one 

logical link. 

EtherChannel provides redundancy because the overall link is seen as one logical connection. 

Additionally, the loss of one physical link within the channel does not create a change in the 

topology; therefore a spanning-tree recalculation is not required. Assuming at least one 

physical link is present, the EtherChannel remains functional, even if its overall throughput 

decreases because of a lost link within the EtherChannel. The spanning-tree cost is calculated 

based on the number of ports assigned to the port-channel and it does not dynamically change 

when links go down or are brought back up within the port-channel. Spanning-Tree Protocol 

calculates the shortest path network based on cumulative link costs. Link costs are based on 

the speed of the link. Some of the link costs for links defined by the IEEE 802.1D standard are 

presented in Table 11.3. 

Table 11.3 Link costs defined by the IEEE 802.1D standard 
Link Speed Cost (Short mode – 16bit) 

10Mbps 100 

100Mbps 19 

Two-port * 100Mbps EtherChannel 9 

Three-port * 100Mbps EtherChannel 8 

Four-port * 100Mbps EtherChannel 7 

Five-port * 100Mbps EtherChannel 6 

Six-port * 100Mbps EtherChannel 5 

Seven-port * 100Mbps EtherChannel 5 

Eight-port * 100Mbps EtherChannel 5 

1Gbps 4 

Two-port * 1Gbps EtherChannel 3 

Three-port * 1Gbps EtherChannel 2 

Four-port * 1Gbps EtherChannel 2 

Five-port * 1Gbps EtherChannel 2 

Six-port * 1Gbps EtherChannel 2 

Seven-port * 1Gbps EtherChannel 2 

Eight-port * 1Gbps EtherChannel 1 

10Gbps 2 

Two-port * 10Gbps EtherChannel 1 

Interface types cannot be mixed; they must be compatible-configured Ethernet ports. The 

individual EtherChannel group member port configuration must be consistent on both devices. 

If the physical ports of one side are configured as trunks, the physical ports of the other side 

must also be configured as trunks within the same native VLAN. Additionally, all ports in each 

EtherChannel link must be configured as Layer 2 ports. Each EtherChannel has a logical port 

channel interface. A configuration applied to the port channel interface affects all physical 

interfaces that are assigned to that interface. Layer 3 EtherChannels can be configured on Cisco 



Computer Networks. Practical activities 

108 

 

Catalyst multilayer switches. A Layer 3 EtherChannel has a single IP address associated with 

the logical aggregation of switch ports in the EtherChannel. 

The maximum number of physical ports in an EtherChannel link depends on the switch 

hardware platform and IOS version. Usually each EtherChannel can consist of up to 8 

compatible-configured Ethernet ports. 

The maximum number of EtherChannels supported by a switch depends on the hardware 

platform and IOS version. The Cisco IOS switch can usually support 6 EtherChannels. 

EtherChannel can be configured static, unconditional or it can be formed through negotiation 

using one of two protocols: Port Aggregation Protocol (PAgP) or Link Aggregation Control 

Protocol (LACP). These protocols allow ports with similar characteristics to form a channel 

through dynamic negotiation with adjoining switches. 

PAgP is a Cisco-proprietary protocol that aids in the automatic creation and management of 

EtherChannel links. There are three modes for PAgP: on, desirable and auto. The on mode 

forces the interface to channel without PAgP. The desirable mode places an interface in an 

active negotiating state in which the interface initiates negotiations with other interfaces by 

sending PAgP packets. The auto mode places an interface in a passive negotiating state in 

which the interface responds to the PAgP packets that it receives, but does not initiate PAgP 

negotiation. Figure 11.8 presents the channel establishment when ports of switches S1 and S2 

are in the different modes for PAgP. 

S1 S2 Channel Establishment 

On On Yes 

Auto/Desirable Desirable Yes 

On/Auto/Desirable Not Configured No 

On Desirable No 

Auto/On Auto No 

Figure 11.8 Channel establishment with PAgP 

LACP is part of an IEEE specification (802.3ad) that allows several physical ports to be 

bundled to form a single logical channel. LACP is also defined in IEEE 802.1AX standard for 

local and metropolitan area networks. LACP allows a switch to negotiate an automatic bundle 

by sending LACP packets to the peer. It performs a function similar to PAgP. Because LACP 

is an IEEE standard, it can be used to facilitate EtherChannels in multi vendor environments. 

There are three modes for LACP: on, active and passive. The on mode forces the interface to 

channel without LACP. The active mode places a port in an active negotiating state in which 

the port initiates negotiations with other ports by sending LACP packets. The passive mode 

places a port in a passive negotiating state in which the port responds to the LACP packets that 

it receives, but does not initiate LACP packet negotiation.  

  



Computer Networks. Practical activities 

109 

 

Figure 11.9 presents the channel establishment when ports of switches S1 and S2 are in the 

different modes for LACP. 

S1 S2 Channel Establishment 

On On Yes 

Active/Pasive Active Yes 

On/Active/Passive Not Configured No 

On Active No 

Passive/On Passive No 

Figure 11.9 Channel establishment with LACP 

3. Lab activity 

3.1 Discuss the theoretical aspects presented in this chapter. 

3.2 Switch configuration 

Cisco switches and routers use a very similar command-line interface (CLI) which is used for 

configuration and verification purposes. 

The help command is question mark (?) which displays the list of commands available for the 

current command mode, the list of commands that begin with a particular character sequence 

or the list of keywords or arguments that are associated with a particular command. 

Switches have several command modes. The User EXEC mode has a limited command set that 

can change terminal settings, perform basic tests, or display system information. The enable 

command is used to change from User EXEC mode to Privileged EXEC mode. The Privileged 

EXEC mode has a larger command set that includes the User EXEC mode command set and 

the configure command used to change from Privileged EXEC mode to global configuration 

mode. Global configuration mode allows other command modes to be accessed, which are used 

to configure the switch. The command exit is used to exit back from a command mode. 

Issue show running-config command to view the current configuration file of the switch. 

Enter the Privileged EXEC mode with the enable command. 

Issue copy running-config startup-config command to copy the current configuration file to 

back up configuration file. 

In order to completely erase the switch configuration, the following steps have to be followed: 

Delete the VLAN database file vlan.dat from the flash directory with the delete flash:vlan.dat 

command. 

Erase the backup configuration file startup-config with the erase startup-config command. 

Reload the switch with the reload command. 

Switch# enable 

Switch# copy running-config startup-config 

Switch# delete flash:vlan.dat 

Switch# erase startup-config 



Computer Networks. Practical activities 

110 

 

Switch# reload 

Change from Privileged EXEC mode to global configuration mode with the configure terminal 

command. 

Set the switch name with the hostname host_name command. 

Switch# enable 

Switch# configure terminal 

Switch(config)# hostname SWITCH_EXAMPLE 

 

Configure the primary terminal line with the following commands: 

Switch(config)# line console 0 

Switch(config-line)# password password 

Switch(config-line)# login 

Switch(config-line)# exit 

 

Configure virtual terminal with the following commands: 

Switch(config)# line vty 0 4 

Switch(config-line)# password secret_password 

Switch(config-line)# login 

Switch(config-line)# exit 
●  

In order to allow the switch to be accessible by TCP/IP applications, IP addresses and a default 

gateway should be set. This allows switch configuration using a telnet or ssh connection. 

Unlike routers, in the case of switches, IP addresses are configured on VLAN interfaces. 

Configure IP address and default gateway with the following commands: 

Switch(config)# interface VLAN1 

Switch(config-if)# ip address ip_address netmask 

Switch(config-if)# no shutdown 

Switch(config-if)# exit 

Switch(config)# ip default-gateway default_gateway_address 

3.3 Spanning Tree 

Step 1: Configure the network presented in Figure 11.10. If the amber port LED in your 

topology is not in the same position as in the picture, move the switches so that the amber port 

LED to be as it is in the figure. 



Computer Networks. Practical activities 

111 

 

 

Figure 11.10 Test network topology 

1. Specify the host names for the switches 

2. Examine the Spanning Tree configuration 

• The port LED color is green if the port is in forwarding state, while the port LED color 

is amber if the port is in blocking state. 

• View the Spanning Tree information on each switch, with the corresponding show 

command. Examine and explain the output of the command. 

General syntax: 

Switch# show spanning-tree 

Description: Displays Spanning Tree information 

3. Answer the following questions: 

• Why is this topology useful and implemented in computer networks? 

• Which switch is the root bridge and why? 

Step 2: To the previous topology connect the users to S2 and S3 switches and add the router 

that connects the network to other networks like in the Figure 11.11. In this way, an extended  

star topology with a backup path is obtained. 



Computer Networks. Practical activities 

112 

 

 

Figure 11.11 Test network topology 

Before configuring the network devices, discuss the IPv4 address assignment in the Table 11.4: 

Table 11.4 IPv4 addresses for the test network  

Device Interface IP Address Netmask Gateway 

Laptop H1 Fa0 10.0.0.2 255.0.0.0 10.0.0.1 

Laptop H2 Fa0 10.0.0.3 255.0.0.0 10.0.0.1 

Laptop H3 Fa0 10.0.0.4 255.0.0.0 10.0.0.1 

Laptop H4 Fa0 10.0.0.5 255.0.0.0 10.0.0.1 

R1 Gig0/1 10.0.0.1 255.0.0.0 - 

 

1. Specify the host name for the router 

2. Assign the IP information to the hosts and the router 

3. Test the connectivity between the hosts and the router using the ping command 

4. Analyze the network and answer the following questions: 

• Which path should be the backup path (redundant link) and why? 

• Which switch should be the root bridge to obtain the optimal paths in the Layer 2 

network? 

• What configuration should be done so that a particular switch becomes the root bridge 

regardless of the MAC addresses of the switches on the network? 

5. Change the root switch by changing its priority to a lower value than the default value 

 



Computer Networks. Practical activities 

113 

 

General syntax: 

Switch(config)# spanning-tree vlan vlan_number priority priority_number 

Description: Changes the Spanning-tree priority of the switch 

Consider: switch S1, vlan 1 and priority 0 

6. Issue show spanning-tree command (Figure 11.12) several times to view the Spanning 

Tree information on switch S1 

• Pay attention to the following: 
o Switch S1 becomes the root bridge 
o The port in the blocking state goes to the forwarding state passing through listening 

and learning states 

 

 

Figure 11.12 Show spanning-tree command output for S1 

• In the network topology, the amber port LED becomes green while a port LED between S2 

and S3 switches becomes amber (Figure 11.13). The link between S1 and S2 forwards the 

traffic while the link between S2 and S3 becomes the backup path, the redundant link. Issue 

show spanning-tree command (Figure 11.14) to view the Spanning Tree information on the 

switch having the amber port LED. 



Computer Networks. Practical activities 

114 

 

 

Figure 11.13 STP changes the state of the ports 

 

Figure 11.14 Show spanning-tree command output for the switch having the amber port LED 

 

 

 



Computer Networks. Practical activities 

115 

 

7. Continuously test the connectivity between the host H1 and the router using the ping 

command with -t option (Figure 11.15) 

 

 

Figure 11.15 Connectivity test between the host H1 and the router 

8. While the ping command is testing the connectivity between the host H1 and the router, 

remove the link between the S1 and the S2 switches (Figure 11.16). 

 

Figure 11.16 Removing the link between S1 and S2 switches 



Computer Networks. Practical activities 

116 

 

• Issue show spanning-tree command (Figure 11.17) several times to view the Spanning Tree 

information on switch S2; pay attention to the port in the blocking state, it goes to the 

forwarding state passing through listening and learning states 

 

 

Figure 11.17 Show spanning-tree command output for S2 

• In the network topology, the amber port LED becomes green (Figure 11.18), the link 

between S2 and S3 forwards the traffic. 

 

 

Figure 11.18 STP changes the state of the ports 



Computer Networks. Practical activities 

117 

 

• The Spanning-tree protocol restores connectivity between the H1 host and the router 

through the redundant link (Figure 11.19) 

 

 

Figure 11.19 Connectivity test between the host H1 and the router 

9. Restore the link between the S1 and the S2 switches and observe how Spanning-tree 

protocol chooses the shortest paths to the root bridge and blocks the redundant links (Figure 

11.20). 

 

Figure 11.20 Restoring the link between S1 and S2 switches 

 

  



Computer Networks. Practical activities 

118 

 

3.4 EtherChannel 

Cable the network presented in the Figure 11.21. 

 

Figure 11.21 Test network topology 

Before configuring the network devices, discuss the IPv4 address assignment in the Table 11.5: 

Table 11.5 IPv4 addresses for the test network  

Device Interface IP Address Netmask 

Server0 Fa0 10.0.0.2 255.0.0.0 

Laptop 0 Fa0 10.0.0.3 255.0.0.0 

Laptop 1 Fa0 10.0.0.4 255.0.0.0 

1. Configure the IP addresses on the hosts. 

2. Verify the connectivity between the laptops and Server0 with the ping command. 

3. Connect to the Switch0 and enter the Privileged EXEC mode. View the Spanning Tree 

information with the show spanning-tree command. Examine and explain the output of this 

command. 

Switch0#show spanning-tree 

4. Repeat the previous step for Switch1. 

5. Connect to Switch0 and specify the interfaces that compose the EtherChannel group 

using the interface range interface global configuration mode command. Create the port 

channel interface with the channel-group identifier mode on command in interface range 

configuration mode. The identifier specifies a channel group number. 

Switch0(config)#interface range fastEthernet 0/2-3 

Switch0(config-if-range)#channel-group 1 mode on 

6. Repeat the previous step for Switch1. 

7. Connect to the Switch0 and enter the Privileged EXEC mode. View the running-config 

file with the show running-config command. Examine and explain the output of this command. 

View the Etherchannel information with the show etherchannel summary command. Examine 

and explain the output of this command. View the Spanning Tree information with the show 

spanning-tree command. Examine and explain the output of this command. 

Switch0#show running-config 

Switch0#show etherchannel summary 

Switch0#show spanning-tree 

8. Repeat the previous step for Switch1. 



Computer Networks. Practical activities 

119 

 

9. Connect to Switch0 and enter port channel interface configuration mode using the 

interface port-channel command, followed by the interface identifier. Configure the 

EtherChannel as a trunk interface using the switchport mode trunk command. 

Switch0(config)#interface port-channel 1 

Switch0(config-if)#switchport mode trunk 

10. Repeat the previous step for Switch1. 

11. Connect to the Switch0 and enter the Privileged EXEC mode. View the running-config 

file with the show running-config command. Examine and explain the output of this command. 

View the trunking information with the show interfaces trunk command. Examine and explain 

the output of this command. 

Switch0#show running-config 

Switch0#show interfaces trunk 

12. Repeat the previous step for Switch1. 

13. Connect to Switch0 and configure EtherChannel load balancing method using the port-

channel load-balance global configuration mode command. Select the load-distribution 

method based on the destination-host MAC address of the incoming packet (dst-mac). Enter 

the Privileged EXEC mode and view the EtherChannel load balancing method information 

with the show etherchannel load-balance command. Examine and explain the output of this 

command. 

Switch0(config)#port-channel load-balance dst-mac 

Switch0(config)#end 

Switch0#show etherchannel load-balance 

  



Computer Networks. Practical activities 

120 

 

CHAPTER 12: SECURITY THREATS IN COMPUTER NETWORKS 

 

1. Objectives 
 

At the end of the activity, students will be able to understand and analyze common security 

threats that occur in computer networks. 

 

2. Theoretical considerations 

The current practical work focuses on the Data Link, Network and Application layers of the 

ISO/OSI stack (Figure 12.1). 

 

Figure 12.1 Network stack models and PDU naming in each level. The arrows indicate the 

addressed layers in the current activity 

2.1 Common security threats 

Network security in computer networking is a very broad domain and the security attacks can 

have different purposes, such as: service interruption, gaining elevated privilege for various 

services, data stealing, data corruption, etc. Security threats occur at every layer of the ISO/OSI 

model and networks must be secured with proper defenses against any possible attack. 

The current activity demonstrates the working principles of a few security threats using the 

Cisco Packet Tracer tool. In a real-life scenario, additional tools might be required to perform 

these attacks, but the objective of this activity is academic only. The desired purpose is to 

understand how certain attacks are implemented and what are the best ways to prevent them 

from taking place. 

 



Computer Networks. Practical activities 

121 

 

 

The main concepts that are addressed in this activity are the following: 

• ARP spoofing: This is the process in which a malicious device is spoofing its own MAC 

address, meaning it is masking its own MAC Address with a different MAC address that 

can belong to a different network device. In order to inform the other devices of the fake 

MAC address, the malicious device is sending a gratuitous ARP to the other network hosts 

informing them of the MAC address that resides at a specific IP Address. After each 

network host receives the ARP request they will store the new pair of IP - MAC addresses 

in their own ARP cache table and when they will send a packet to the particular device, 

they will fill the Layer 2 header with the spoofed MAC address 

• Network sniffer: A network sniffer is a device that can intercept network traffic and 

records it using traffic monitoring tools 

• Denial of Service (DoS): This is a type of attack that has the purpose to restrict access to 

normal network functions  

• Rogue server: A rogue server does not belong to the institution (or stakeholder) that owns 

the network. Such a server can offer various services and invalid information to network 

devices with malicious intent 

o Rogue web server: can offer web pages that look like a real website, but they are 

in fact copies of a real site 

o Rogue DHCP server: can offer invalid addressing, e.g. wrong default gateway for 

denying other hosts access to the internet, wrong DNS server to make hosts access 

invalid web server 

o Rogue DNS server: can provide fake mappings between URL - IP address with the 

purpose to force users to access a fake web server which apparently resides at a 

valid URL 

• Phishing: A type of attack meant to steal information through a fraudulent message or web 

site 
 

3. Lab activity 

3.1 ARP spoofing for DoS and data sniffing.  

An example of ARP spoofing attack with the end goal to deny access to certain resources and 

to allow data sniffing can be seen in the Figure 12.2: 



Computer Networks. Practical activities 

122 

 

 

Figure 12.2 Network attack topology: ARP spoofing for DoS and data sniffing 

In order to perform the attack, configure the topology in Packet Tracer, then follow the steps 

described below (Table 12.1). 

Table 12.1 ARP spoofing for DoS and data sniffing attack steps 

1. A web server resides at IP address 

20.0.0.2. Accessing the default web page 

from PC0 having the IP address 10.0.0.2, 

the Cisco Packet Tracer view will look 

like the image on the right 

 

2. The figure shows that the router’s Gig 0/0 

interface has the MAC address: 

0001.97B1.A601 

The malicious host can override its own 

MAC address with that of the router 

 

3. The next step for the malicious host is to 

inform the other network devices in the 

network that the MAC address of the 

router actually corresponds to the IP 

address of the malicious host. This can be 

done by generating continuous traffic in 

the network, e.g. using the ping command 
 



Computer Networks. Practical activities 

123 

 

with the -t parameter 

4. Next, the ARP cache entries on the other 

network devices can be verified (on PC0 

having the IP address 10.0.0.2 and on the 

switch) 

Viewing this information it can be seen 

that the computer will add the same MAC 

address when generating traffic towards 

the gateway of the malicious host, but the 

switch will as well redirect the traffic on 

the Fa 0/3 interface which links towards 

the malicious host (if the MAC address 

table does not change, use the #clear 

mac-address-table command) 

 

 

 

5. Next, when PC0, having IP address 

10.0.0.2, tries to access the web server, it 

will create packet having the correct 

MAC address of the network gateway 

(interface Gig 0/0 on the router), but the 

switch will redirect this packet towards 

the malicious host through the network 

sniffer 

 

6. The sniffer can also be opened and 

inspect its GUI. The TCP traffic that is 

generated from the computer towards the 

web server can be inspected. Not much 

information is seen in this Cisco Packet 

Tracer example, but a real life test can 

reveal multiple traffic flows being 

generated from the targeted PC 

 



Computer Networks. Practical activities 

124 

 

After analyzing the entire sequence of steps, the ARP spoofing attack was successful with the 

outcome of denying the service to the web server and eavesdropping on the traffic generated 

by the computer. 

Possible ways to overcome these security threats include (but are not limited to): 

o Limiting the number of allowed MAC addresses per switch port 

o Configuring inspection of MAC - IP address consistency 

 

• Research other mechanisms to prevent ARP spoofing. 

 

3.2 ARP spoofing for phishing 

An example of a phishing attack from a web server can be seen in the Figure 12.3 below where 

an attacker is connecting to the network with a router (with a static IP address) and a web 

phishing server in the network behind the connected router: 

 

Figure 12.3 Network attack topology: ARP spoofing for phishing 

In order to perform the attack, configure the topology in Packet Tracer, then follow the steps 

described below (Table 12.2). 

  



Computer Networks. Practical activities 

125 

 

Table 12.2 ARP spoofing for phishing attack steps 

1. A web server resides at IP address 

20.0.0.2. Accessing the default web 

page from PC0 having the IP address 

10.0.0.2, the Cisco Packet Tracer view 

will look like the image on the right 

 

2. The figure shows that Router0’s Gig0/0 

interface has the MAC address: 

0001.97B1.A601 

The threat actor connects to the 

network with a router where the MAC 

address is overridden with the MAC 

address of Router0 

 

3. The next step for the threat actor is to 

inform the other network devices in the 

network that the MAC address of 

Router0 actually corresponds to 

Router1 (the malicious router). This 

can be done by generating continuous 

traffic in the network, e.g. using the 

ping command from the Router1’s CLI 

as shown in the image on the right 

 



Computer Networks. Practical activities 

126 

 

4. Next, the ARP cache entries on the 

other network devices can be verified 

(on PC0 having the IP address 10.0.0.2 

and on the switch) 

Viewing this information it can be seen 

that the computer will add the same 

MAC address when generating traffic 

towards the gateway of Router1, but 

the switch will as well redirect the 

traffic on the Fa 0/3 interface which 

links towards Router1 (if the MAC 

address table does not change, use the 

#clear mac-address-table command) 

 

 

5. Next, when PC0 will try to access the 

web server, it will create a packet 

having the correct MAC address of the 

network gateway (interface Gig 0/0 on 

Router0), but the switch will redirect 

this packet towards Router1. 

After the packet reaches Router1, the 

threat actor has already set up in place 

a simulated network which mimiques 

the same IP addresses as in the real 

network but creates a phishing website 

showing different content, but which is 

still accessible on the same IP address 

 

After analyzing the entire sequence of steps, the ARP spoofing attack was successful with the 

outcome of making the targeted host access a fake server that can accomplish phishing 

scenarios if configured to e.g. accept credentials input. 

One of the best advised ways to overcome this issue is to prevent/avoid it entirely by not 

accessing unsecured websites from untrusted networks or by not introducing sensitive 

credential information when present in an untrusted network. 

• Research other mechanisms to prevent ARP spoofing and phishing. 

 

3.3 Rogue DHCP and DNS servers for phishing 

An example of a phishing attack which is performed with the help of a rogue DHCP and DNS 

server can be seen in the Figure 12.4: 



Computer Networks. Practical activities 

127 

 

 

Figure 12.4 Network attack topology: Rogue DHCP and DNS servers for phishing 

The threat actor connects to the network with a server providing false DHCP addressing 

information (the DNS server configuration being the most important addressing information in 

this example). When the computers inside the network use the false DNS server to access the 

IP address of a web server, they will be redirected to the phishing server instead of the real one. 

Configure the topology in Packet Tracer, then follow the steps described below (Table 12.3). 

  



Computer Networks. Practical activities 

128 

 

Table 12.3 Rogue DHCP and DNS servers for phishing attack steps 

1.  Initial configuration steps: 

• Leave the threat actor 

unconfigured (or remove its 

link to the switch) 

• Configure DHCP on Router0 

and ensure that it provides a 

valid DNS server in the 

addressing information (as seen 

on the right) 

• Configure the simulated Google 

DNS server as seen on the right 

side 

 

 

2. A simulated Google server resides at 

the server having the 8.0.0.2 IP 

address. Accessing this server from 

PC0, the Cisco Packet Tracer view will 

look like the image on the right 

 

3. Connect the threat actor to the network 

and configure its DHCP service as seen 

in the image on the right side. Notice 

the different DNS server which in fact 

corresponds to the threat actor’s static 

IP address. 

 



Computer Networks. Practical activities 

129 

 

4. At some point, PC0 will have to update 

its addressing information by 

requesting a new lease from the DHCP 

server. This step can be manually 

simulated as seen on the right side. 

Notice how the DNS server has 

changed, meaning that PC0 receives 

the lease from the threat actor and not 

from Router0. 

Investigate how this happens by using 

the Simulation tool provided by Cisco 

Packet Tracer. 

It is obvious that the DNS server 

configured on the threat actor’s server 

will not match the “google.com” URL 

to the correct IP address, it will match 

the URL to the fake server’s IP address 

as seen in the topology. Running an 

nslookup command on PC0 will prove 

this. 

 

5. After PC0 has been compromised, 

accessing the google.com web page 

will redirect to the fake server showing 

a different page 

 

After analyzing the entire sequence of steps, this phishing attack was successful, and it can 

trick the user into entering his credentials on a fake web page having a seemingly valid URL. 

 Research mechanisms to prevent rogue servers to provide false network services and 

mechanisms to prevent phishing attacks. 

  


	COMPUTER NETWORKS
	Introduction
	Content
	CHAPTER 1: INTRODUCTION TO WIRESHARK AND PACKET TRACER
	CHAPTER 2: COPPER BASED TRANSMISSION MEDIA AND UTP CABLING
	CHAPTER 3: OPTICAL FIBERS AND COMPONENTS
	CHAPTER 4: STRUCTURED CABLING
	CHAPTER 5: NETWORK LAYER – IPv4 FUNDAMENTALS
	CHAPTER 6: NETWORK LAYER – IPv4 ROUTING AND DHCP
	CHAPTER 7: NETWORK LAYER – IPv6
	CHAPTER 8: APPLICATION LAYER: NETWORK PROGRAMMING WITH SOCKETS
	CHAPTER 9: ETHERNET, ARP AND NDP
	CHAPTER 10: VLANs, TRUNKING AND INTER-VLAN ROUTING
	CHAPTER 11: LAYER 2 NETWORKS, SPANNING TREE PROTOCOL, LINK AGGREGATION AND ETHERCHANNEL
	CHAPTER 12: SECURITY THREATS IN COMPUTER NETWORKS
	633-3 coperta.pdf
	Page 1





reading content from C:\Users\Asus\Desktop\Bee\CN3a_2022.doc

COMPUTER NETWORKS
OPTICAL FIBRES AND COMPONENTS

LABORATORY WORK NO. 3a
OPTICAL FIBERS AND COMPONENTS

1. Objectives
The objective of this work is gaining knowledge on optical fibers and components, link performance analysis and the optical power budget calculus.
2. Theoretical considerations 

2.1 Optical fibers and components
The current laboratory work continues the focus on the Physical layer of the ISO/OSI stack by providing knowledge on optical fibers and components. Furthermore, on part 3b, the main network devices and elements of structured cabling are presented.
Once the drop in the price of optical fibers, and appropriate communications equipment, this has become the environment of choice for new high-speed connections (exterior and interior). 
To transmit data, optical fibers send light signals along glass or plastic cores (of the order tens of microns (μ), which constitutes a wavelength guide for light, obtained from a combination of silicon dioxide and other elements). 

An optical fiber strand is the basic element of an optical fiber cable (a cable contains several strands). A strand has three layers: core, cladding and coating. A fiber optic cable consists of several components: fiber strand(s), buffer, protective materials, outer jacket.

The core is wrapped by material made of silicon dioxide having a refractive index lower than the core called cladding. In order to protect the cladding, this is wrapped in a plastic material. This is called buffer and is wrapped in a material, usually Kevlar, which confers resistance of fiber at the time of installation. Optical fiber buffers are of two categories: tight (a protective covering is applied over the coating of each fiber strand) or  loose-tube (several strands inside a tube filled with a protective gel). For outdoor, long-distance installation, loose-tube fiber is preferred. The last wrapper is the jacket which protects the fiber against abrasive materials, solvents and other factors. The color enclosure in the case of multimode optical fiber is usually orange and in the case of single-mode optical fiber is usually yellow. Each fiber optics cable is composed of two fibers wrapped separately, a fiber being used for transmission and another for the reception, ensuring in this way a full-duplex connection. A cable of optical fiber may contain from two up to hundred separate fiber strands (usually in LANs, up to 24). Figure 2.1 presents the layer of an optical fiber and an optical fiber transversal section.

	 

	Figure 2.1 a. Optical fiber layers               b. Optical fiber transversal section


For the signal to be reflected without loss, the following two conditions need to be met:

· Optical-fiber must have a refractive index higher than the material surrounding it;

· The angle of incidence of light signal must be greater than the critical angle of fiber and of the material surrounding it. The angle of incidence of light signal can be controlled by using the next two factors:

· Numerical aperture of the fiber is the range of angles of the light signal for which the reflection is complete;

· The modes are the ways that the signal light can follow.

Unlike copper-based transmission media, optical fiber is not susceptible to, and it does not generate electromagnetic or crosstalk interference.

Two main optical fibers are commonly used in LANs and WANs: single-mode and multimode. Single-mode optical fiber is used for long distance links and for vertical cabling in buildings (building’s backbone). Multimode optical fiber is commonly used in horizontal and vertical cabling. Multimode fiber has a larger core diameter compared to single-mode. Thus, multimode does not require the same precision as single-mode, resulting in less expensive connectors, transmitters etc.

For the single-mode fiber the core diameter is small enough as to permit only one mode (one way) light signal, being sent in a straight line through the middle of the core. Single-mode optical fiber cables use cores with diameter between 8μ and 10μ. The most used single-mode optical fibers have 9μ diameter and cladding with a diameter of 125μ. They are usually referred as 9/125μ optical fibers. Light source used is the infrared laser. It is recommended caution when using lasers as source of light since it may affect the eyes. Single-mode fibers may transmit data at distances over 100km. The loss on km of single-mode optical fiber is specified by the manufacturer. In the case of single-mode fiber, the refractive index of glass stays constant. This type of glass is called step index glass. 

The core of multimode fiber has a sufficiently large diameter as to permit several modes (several ways) for light signal. Standard multimode optical fiber cables have a core diameter of 62, 5μ or 50μ and cladding with a diameter of 125μ. They are usually referred as optical fibers of 62.5/125μ or 50/125μ. Usually, the light sources used with multimode fibers are Infrared Light Emitting Diode (LED) or Vertical Cavity Surface Emitting Lasers (VCSEL). LED-s are cheaper and require less safety measures than lasers. The disadvantage of LED is that may not transmit light signals at distances as large as lasers. Multimode fibers of 62.5/125 may transmit data at distances of up to 2000m. The loss of multimode optical fiber is specified by the manufacturer. In the case of multimode fiber, the refractive index of glass may be constant (multimode step index glass) or may also decreases from the center to the exterior  (variable or graded-index glass and allows various illuminating modes to reach the receiver at the same time). 
In optical fiber, beside propagation, the light is subjected to two main phenomena: attenuation and dispersion. Attenuation or absorption is essentially due to the presence of hydroxyl ions -OH and of the various metal ions. Light may also be spread by micro crystals, lower than the wavelength, which form at the cooling of the glass. Attenuation limits the length of optical fiber to be used. The dispersion or impulse width widening is mainly due in multimode fibers to the different length of the modes. The chromatic dispersion appears due to the variation of the refraction index function of the light colour or wavelength. The dispersion limits the use of optical fiber in the frequency or in bandwidth. The two limitations multiplied characterize most accurate an optical fiber. 20MHz-km values are obtained for fiber with step index, 1GHz-km for the variable index and 1000GHz-km for the single-mode in which there is no modal dispersion. 

Optical fiber transmitters convert electrical signals in equivalent luminous pulses. There are two types of light source used by transmitters for optical-fiber:
· The LED which produces infra-red light having a wavelength of 850nm or 1310nm. They are used with multimode fibers. Coupling to optical fiber can be improved by using a spherical lens;
· LASER semiconductor diode containing which produces infra-red light having a wavelength of 1310nm or 1550nm. They are used with multimode or single-mode fibers.
There are two types of basic design for LEDs: with surface emission and with edge emission. At surface emission led, the emission of light is perpendicular to the plane of junction through a thin transparent layer. They emit in a geometric radial spectrum. At edge emission led the light is emitted in a plane parallel to the junction at semiconductor edge. The materials used are often compounds III V as GaAs or Al×GA1-XAs for wavelengths of 0.8-0.9 μm and Ga×In1-XPYAs1-y for wavelengths of 1.3-1.6 μm. Emission spectrum of a LED is between 25 to 40 μm for small wavelengths and 50-100 μm for larger wavelengths.
LASER semiconductor diodes, laser diodes (LD), are obtained by introducing a led into an optical resonant cavity. The effect of laser only appears at the existence of a direct current high enough to achieve an inversion of the population of the electrons and holes from the two energy strips of conduction and valence. The current value from which this effect appears is called limit current. Under this current the device acts as an ordinary led. Since the light emitted by a laser is much more coherent than issued by a LED, the efficiency of the optical fiber coupling is higher. Optical power also captured by laser is greater than that emitted by the LED.
An analysis compared between the two types of transmitters is clearly in favour of LD because the possibility to use higher frequencies, narrower spectrum and in favour of the LED due to price and power stability in relation to temperature.
The life expectancy of both devices is equal and is of the order of 10 million hours.
The fiber optics receivers convert luminous pulses into equivalent electrical signals. Semiconductor devices normally used for optical fiber are classified in two types: simple and with internal gain. The first may be called PIN photodiode by type of doping (p intrinsic and n) and the second category is called APD (Avalanche Photo- Diodes). These devices are sensible at 850, 1310 and 1550nm wavelengths, wavelengths used by transmitters for optical fiber. As semiconductor materials are used Si for wavelengths of 800-900 nm and Ge or InGaAsP for 1300 and 1500 nm. Si has optimum sensitivity only within a reduced frequencies range but Ge has an appreciable darkness current and is more sensitive to noise. For this reason last possibility is the best but requires a more sophisticated manufacturing technology and therefore has a higher price. 

In order to connect multiple fibers or for achieving a longer fiber, splices (junctions) may be used. Splices are of two types: mechanical and fusion. Attenuations introduced are lower than 0.5dB (ANSI/TIA-568-C.3 specifies that mechanical or fusions splices shall not exceed a maximum optical insertion loss of 0.3dB). At mechanical splices the two ends of the fiber, carefully cut, cleaned and polished are caught in a rigid mechanical holder that they fix to each other in an fixed ensemble. Fusion splices shall be carried out by heating close to the melting point. At this moment the two fibers are pressed against one another and cooled. These operations shall be preceded by cutting operations and finishing their ends and prior alignment of the two ends which will be connected. Fusion splices also remake draw/bursting resistance of the fiber at approximate 90% of the original value. To protect the splices, splice enclosures are used.
Connectors in the optical fiber allow the connection to ports. The common used connectors are SC (Subscriber Connector) - snap on type, ST (Straight Tip) - twist on type, FC (Ferrule Connector) - screw on type, LC (Lucent Connector) - snap on type and MTP/MPO - push/pull type, for multimode optical fibers and for single-mode optical fibers. Attenuation introduced by an optical connector, even of superior quality is greater than that introduced by a splice, having values of approximately 1 dB. Connectors are high precision mechanical equipment and usually one end of the fiber is in the connector and one is free. In this case attaching a connector shall be reduced to the execution of a splice. Such a solution is usually more advantageous than mounting a connector directly to the end of the fiber because prefabricated connectors ensure the accuracy of mounting much higher. If the optical fiber is ended into an optical fiber terminator for redistribution this end connector is also called pig-tail and is prefabricated type. A special category of connectors is optical cords for distribution or connection. These are special optical fibers with connectors at both ends allowing small fiber curvature radii of approximately 2,5-5 cm. Their color is yellow for single-mode fiber and orange for multimode fiber
Repeaters are optical amplifiers receiving light signals attenuated as a result of the distance traveled through optical fiber, remake the form, power and time parameters of these signals and send them away.

Patch panels for optical fiber are similar with copper cable patch panels, increasing flexibility of the optical networks. For connecting different equipment, an optical fiber patch cord is used (also known as a zip cord - two flexible optical fibers with connectors at each end).
Additionally, several other active or passive devices are used with optical fibers (e.q.: optical couplers - combines or splits optical signals; optical attenuators - reduce the power level of an optical signal; optical isolators; fiber-optic switches; optical multiplexers, etc.).

The ISO/IEC 11801-1 specifies the  requirements for coaxial, twisted-pair copper and optical fiber. The ISO/IEC 11801 (Europe) and ANSI/TIA-568-C (USA and Canada) standards define 7 classes of optical fibers (single-mode and multimode) as shown in table 2.1, together with several important parameters (optical fiber requirements, the cable transmission performance and the physical cable requirements):
Table 2.1 Optical fiber characteristics
	
	Multimode
	Single-mode

	Type
	OM1
62,5/125 μm
	OM2
50/125 μm
	OM3
50/125 μm
	OM4
50/125 μm
	OM5
50/125 μm
	OS1
9/125 μm
	OS2
9/125 μm

	Wavelength
	850, 1300nm
	850, 1300nm
	850, 1300nm
	850, 1300nm
	850, 1300nm
	1300nm, 1550nm
(1383nm)
	1300nm, 1550nm

	Max. attenuation (db/km) 
	2.6 / 
2.4
	3.56 / 2.3
	2.6 / 
1.9
	2.9 / 
1.5
	2.9 / 
1.5
	1
	0.4

	Light source
	LED (Light-Emitting Diode) / 
VCSEL (Vertical Cavity Surface-Emitting Lasers Light Source) 
	LASER (Light Amplification by Stimulated Emission of Radiation)

	Distance/ data rate
	1 Gbps
	275m
	550m
	-
	-
	-
	5-120km

	
	10Gbps
	33m
	82m
	300m
	400m
	400m
	10-80km

	
	40-100 Gbps
	-
	-
	100m
	150m
	150m
	2-80km

	Color
	orange/ slate
	orange
	aqua
	violet/ aqua
	green/ lime
	yellow
	yellow



Incorrect installation of optical fiber has as result the increase in attenuation for the optical signal. The scope or exaggerated than optical fiber may cause cracks in the heart to disperse the signal light. Exaggerated stretching or bending of the optical fiber may cause small cracks of the core which will scatter the light signal. Exaggerated bending of the optical fiber may have as a result the drop in incident angle of the light signal under critical angle of total reflection. For the connector installation the heads must be cut off and finished. After installation, the heads of the optical fibbers, the fiber connectors and ports must be kept clean so that no attenuation will be introduced. Before use of optical fiber cables, their attenuation must be tested. At the design of an optical-fiber links, loss of power signal that can be tolerated must be calculated. This is called the budget of loss of optical link. Loss of power is measured in decibels (dB).
For optical fiber link testing there are several methods: continuity testing, visual fault locator, measurement of optical power output, OTDR and BER test error rate.

Continuity testers are used to test the continuity in an optical fiber. A visual fault locator (VFL) tool allows a technician to identify breaks, macrobends (refers to the minimum bending radius) or poor fusion splices.

The measurement of optical power output determines the loss of power through the optical link by measuring the output power at a known input power. The unit of measurement for optical power is the miliwatt (mW) but for practical reasons shall be used other unit of measure which measure the gain (G) or loss (L) in a system, namely decibel (DB).
The procedure OTDR Optical Time Domain Reflectometer is the procedure by which the attenuation characteristics of an optical fiber and its length may be visualized. This procedure is the only through which can be detected positions such breaks in optical fibre. OTDR displays a graphic having as X axis the fibre length and as Y axis the attenuation. From this graphic, the fiber attenuation and the splices and connectors quality can be deduced. Also can be determined the braking position in the cable if externally the cable is not affected.

The BER test (Bit Error Rate) is the final test for a data link through optical fiber. This test or criterion shows at how many bits transmitted through the fibre an error due fibre will be produced. The BER test must meet the requirements imposed by the producers of the DTE equipment that are coupled to the optical fibre. For computer networks they ask to be less than 1 bit of error at 109/1012 bits transmitted or BER < 10-9/10-12. For the testing is required a generator of random bit sequence and an interface to optical fibre if a loop is tested or two if a single fibre is tested. In order to have significant results, the test must be carried out over a period long enough so as to provide a sufficient number of bits. The test period of one day or two are common if it is working at a large bit rate in the use of optical fibre link and small BER. A counter may automatically count the number of errors detected.

Calculation of optical power budget shall be made according to the following table.
Table 2.2 Optical power budget

	Crt. 
	Optical loss or power
	DB 

	1. 
	The km loss in Optical Fibre db/km X _____km fibre
	_____dB 

	2. 
	The loss in Splices ___dB/splice X _____splices
	_____dB 

	3. 
	The loss in Connectors __dB/connector X ___ connectors
	_____dB 

	4. 
	Losses on other components
	_____dB 

	5. 
	Margin of error
	_____dB 

	6. 
	Total loss on the Link (1+2+3+4+5)
	_____dB 

	7. 
	The power of average emission of the transmitter
	_____dB 

	8. 
	Average power received by the receiver (7-6) 
	_____dB 

	9. 
	The dynamic of the receiver _____dB at _____dB
	 

	10. 
	Receiver sensitivity at a rate of errors given by BER
	_____dB 

	11. 
	Available Remaining Power  (8-10)
	_____dB 


Remarks 

For item 3. the transmitter connection losses to the optical will not be taken into account, these being already included. The amount calculated in item 8. must be within the range of item 9. for the receiver to operate correctly. The amount calculated in item 11 must be positive in order to have a functional optical data link. 
The error margin is due to take into account the average values for all link components. The dispersion of these values around the mean value is known and may take a margin of error large enough to cover deviations from an average with a probability of 99.9% or more. As the number of items is greater and as it is desirable a larger cover probability than a larger error margin will be taken.
Optical emission power of the transmitter is a catalogue data and includes the loss of connection at one end of the optical fiber in the case in which the connection is made in accordance with recommendations. The power is greater at the LASER diodes and smaller at the LED. In the case of LASER usage for relatively short distances an attenuator is necessary so that the receiver will not be destroyed.
Receiver dynamics represents the power range which a receiver can transform in electrical signal without loss of information.
It is also needed a minimum optical power necessary for fulfilling the tolerated error rate condition which for computer networks is situated at the value of 1 bit erroneous at one billion bits transmitted.
Calculus example of the optical power budget 
Optical fiber diameter: Core 62.5μm/Cladding 125μm.
Numerical aperture of the fiber NA: 0.275.
The wavelength of the optical equipment: 1310μm. 

Table 2.3 Calculus example
	Crt. 
	Optical loss or power
	DB 

	1. 
	The km loss in Optical Fiber 1,8db/km X 3,5km fiber
	6,3dB 

	2. 
	The loss in Splices 0,5dB/splice X 2 splices
	1,0dB 

	3. 
	The loss in Connectors 1,0dB/connector X 2 connectors
	2,0dB 

	4. 
	Losses on other components
	0,0dB 

	5. 
	Margin of error
	2,0dB 

	6. 
	Total loss on the Link (1+2+3+4+5)
	11,3dB 

	7. 
	The power of average emission of the transmitter
	-10,0dB 

	8. 
	Average power received by the receiver (7-6) 
	-21,3dB 

	9. 
	The dynamic of the receiver _____dB at _____dB
	

	10. 
	Receiver sensitivity at a rate of errors given by BER
	-26,0dB 

	11. 
	Available Remaining Power  (8-10)
	+4,7dB 


The power at the receiver is in the dynamic of the receiver, which makes possible its function, and the remaining available power is positive, ensuring a viable connection.

There should be taken into account the fact that during the life of the link, aging phenomena may occur, leading to increase the power loss, as well as the fact that optical fiber may be broken accidentally and needs to be spliced. 

A calculation made to the limit endangers the length of service of a link through optical fiber.

3. Lab activity
3.1 The characteristics of various types of optical fibers, components and aspects related to the cabling of computer networks using this transmission environment should be discussed.
3.2 Explore the fiber optic infrastructure deployed in the oceans available at https://www.submarinecablemap.com/
3.3 A 9/125μ single-mode optical fiber having the length of 2,5km and the loss equal to 0,5dB/km, which connects two DTE equipments is considered. The attenuation introduced by splices and connectors is equal to 0,5 and 1dB respectively. The error margin taken into consideration is 3dB. The power of average emission of the transmitter is -15dB, the receiver sensitivity at a rate of errors given by BER 10-9 is -25dB and dynamic of the receiver is in the range -10 ÷ -30dB. Calculate the optical power budget.

Notes

6
7


reading content from C:\Users\Asus\Desktop\Bee\CN4.docx

LABORATORY WORK NO. 4
Network Layer – IPv4 Fundamentals

1. Objectives

At the end of the lab, students will be able: to explain the characteristics of the network layer, to describe the operation of the IPv4 protocol, to divide the networks into subnets, to explain the network address translation process, and to implement basic IPv4 network configurations.

2. Theoretical considerations

2.1 Network layer

The OSI Network layer corresponds to the TCP/IP Internet layer. It provides addressing, routing and traffic control services to allow devices to exchange data across networks and contains different types of protocols:
· IP version 4 (IPv4) and IP version 6 (IPv6) routed protocols;
· routing protocols such as Open Shortest Path First (OSPF) or Border Gateway Protocol (BGP);
· messaging protocols such as Internet Control Message Protocol (ICMP).
The network layer performs four basic operations:
· Addressing
· Encapsulation
· Routing
· De-encapsulation





IP protocols have the following characteristics:

· Connectionless
· no connection established between source and destination before data packets transmission;
· no control information (synchronizations, acknowledgments, etc.).

· Best Effort
· unreliable, packet delivery is not guaranteed;
· no mechanism to resend data that is not received, reduced overhead.

· Media Independent
· does not concern itself with the type of frame required at the data link layer or the media type at the physical layer;
· can be sent over any media type: copper, fiber, or wireless.

2.2 IPv4

The packet header is presented below:

	Octet
	0
	1
	2
	3

	Bit
	0
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
	25
	26
	27
	28
	29
	30
	31

	0
	Version
	IHL
	DSCP
	ECN
	Total Length

	32
	Identification
	Flags
	Fragment Offset

	64
	Time To Live
	Protocol
	Header Checksum

	96
	Source IP Address

	128
	Destination IP Address

	160
	Options



· Version - version field, equal to 4;
· Internet Header Length (IHL) - the size of the IPv4 header;
· Differentiated Services Code Point (DSCP) - originally defined as the type of service (ToS), specifies differentiated services (DiffServ);
· Explicit Congestion Notification (ECN) - allows end-to-end notification of network congestion without dropping packets, optional feature;
· Total Length - defines the entire packet size in bytes, including header and data;
· Identification- identification field, primarily used for uniquely identifying the group of fragments of a single IP datagram;
· Flags - used to control or identify fragments;
· bit 0 – Reserved, must be zero;
· bit 1 – Don't Fragment (DF)
· bit 2 – More Fragments (MF)
· Fragment offset –specifies the offset of a fragment relative to the beginning of the original unfragmented IP datagram;
· Time to live (TTL) – limits a datagram's lifetime;
· in practice, is used as a hop count;
· when the datagram arrives at a router, the router decrements the TTL field by one;
· when the TTL field hits zero, the router discards the packet and sends an ICMP time exceeded message to the sender.
· Protocol –defines the protocol used in the data portion of the IP datagram;
· Header checksum – used for error-checking of the header;
· Source address – the IPv4 address of the sender of the packet;
· Destination address – the IPv4 address of the receiver of the packet;
· Options – rarely used, if IHL is greater than 5, the options field is present.

The addresses can be assigned statically or dynamically.
The address is hierarchical, being composed of two parts: the network part and host part.

	Network ID
	Host ID



The number of bits assigned to the network and host depends on the class to which the address belongs:

	Class
	1st Octet Decimal Range
	1st Octet High Order Bits
	Network/Host ID (N=Network, H=Host)
	Default Subnet Mask

	A
	1 – 126*
	0
	N.H.H.H
	255.0.0.0

	B
	128 – 191
	10
	N.N.H.H
	255.255.0.0

	C
	192 – 223
	110
	N.N.N.H
	255.255.255.0

	D
	224 – 239
	1110
	Reserved for Multicasting

	E
	240 – 255**
	1111
	Experimental; used for research


Note:	* Class A addresses 127.0.0.0 to 127.255.255.255 cannot be used and is reserved for loopback and diagnostic functions.
** 255.255.255.255 is reserved as the IPv4 Broadcast address.
The IPv4 subnet mask is used to differentiate the network portion from the host portion of an IPv4 address. It is, like the IPv4 address, a 32 bits structure. The bits corresponding to the network portion are set to 1 and the bits corresponding to the host portion are set to 0.

	Network ID
	Host ID

	11………..1
	00…………………………………………………..0



The network masks corresponding to the classes are presented below:

Class A: 255.0.0.0 or /8 (11111111.00000000.00000000.00000000)
Class B: 255.255.0.0 or /16 (11111111.11111111.00000000.00000000)
Class C: 255.255.255.0 or /24 (11111111.11111111.11111111.00000000)

Public IPv4 addresses are uniquely assigned addresses and are are globally routed between internet service provider (ISP) routers. There are also blocks of addresses, called private addresses, that are used by most organizations to assign IPv4 addresses to internal hosts. These addresses are not uniquely assigned addresses and are are not globally routed between ISP routers. These blocks of private addresses are presented below.
Class A: 10.0.0.0 - 10.255.255.255		/8
Class B: 172.16.0.0 - 172.31.255.255		/12
Class C: 192.168.0.0 - 192.168.255.255	/16

To allow a device with a private IPv4 address to access devices and resources outside of the local network, the private address must be translated to a public address. This process is called network address translation (NAT) and provides the translation of private addresses to public addresses. A NAT router typically operates at the border of a network. When a device inside the network wants to communicate with a device outside of its network, the packet is forwarded to the border router which performs the NAT process, translating the internal private address of the device to a public, outside, routable address.






The network address has all the host bits set to 0 and the broadcast address has all the bits set to 1. These addresses cannot be assigned to a host. All the other addresses are valid host addresses.

Exercise
Consider the following address: 192.168.1.10/24. Calculate the network and broadcast address, the valid host range, the total number of host bits and the total number of hosts.
IP:	11000000.10101000.00000001.00001010
NM:	11111111.11111111.11111111.00000000
IP logic AND with the NM:
11000000.10101000.00000001.00001010
11111111.11111111.11111111.00000000
--------------------------------------------------
11000000.10101000.00000001.00000000 – Network address (all host bits are set to 0)
192.168.1.0 – Network address
11000000.10101000.00000001.11111111 – Broadcast address (all host bits are set to 1)
192.168.1.255 – Broadcast address
11000000.10101000.00000001.00000001 – First valid host address
192.168.1.1 – First valid host address
11000000.10101000.00000001.11111110 – Last valid host address
192.168.1.254 – Last valid host address
192.168.1.1-192.168.1.254 – Valid host range
Total number of host bits is 8.
Total number of hosts is 28-2=254.

2.3 Subnetting

To create subnets, bits are borrowed from the host ID. A new network mask is created to show the new structure. In the network mask, the bits corresponding to the subnetwork portion are set to 1.


	Network ID
	Host ID

	11………..1
	00…………………………………………………..0

	Network ID
	Subnetwork ID
	Host ID

	11………..1
	11……………………..1
	00……………………0



Exercise
Consider the following address: 192.168.1.0/24. Divide this address in 4 subnets and further divide the fourth subnet into a maximum number of subnets. Specify for the subnets: netmask, network address, broadcast address, the number of host bits, the number of hosts and their address range.

We will borrow 2 bits to obtain 4 subnets. In order to further divide the fourth subnet into a maximum number of subnets, we will reserve for the host portion 2 bits, the minimum possible number.





First /26 subnet:
	Network Subnetwork Host
	

	11000000.10101000.00000001.00000000
	192.168.1.0/26 - Network Address

	11000000.10101000.00000001.00000001
	192.168.1.1/26 - First Host Address

	…
	…

	11000000.10101000.00000001.00111110
	192.168.1.62/26 - Last Host Address

	11000000.10101000.00000001.00111111
	192.168.1.63/26 - Broadcast Address


Netmask: /26 (255.255.255.192)
Network address: 192.168.1.0/26
Broadcast address: 192.168.1.63/26
Number of host bits: 6
Number of hosts: 26-2=62
Hosts address range: 192.168.1.1/26-192.168.1.62/26

First /30 subnet:
	Network Subnetwork Host
	

	11000000.10101000.00000001.11000000
	192.168.1.192/30 - Network Address

	11000000.10101000.00000001.11000001
	192.168.1.193/30 - First Host Address

	11000000.10101000.00000001.11000010
	192.168.1.194/30 - Last Host Address

	11000000.10101000.00000001.11000011
	192.168.1.195/30 - Broadcast Address


Netmask: /30 (255.255.255.252)
Network address: 192.168.1.192/30
Broadcast address: 192.168.1.195/30
Number of host bits: 2
Number of hosts: 22-2=2
Hosts address range: 192.168.1.193/30-192.168.1.194/30

3. Lab activity

3.1 Discuss the theoretical aspects.
3.2 Solve the following problems:
A. Determine the network and broadcast addresses and number of host bits and hosts for the given IPv4 addresses and prefixes:
	IPv4 
Address/Prefix
	Network Address
	Broadcast Address 
	Total Number 
of Host Bits 
	Total Number 
of Hosts

	172.16.104.99/27
	
	
	
	

	198.133.219.250/24
	
	
	
	

	10.1.113.75/19
	
	
	
	



B. Having the following information, compute subnets with the following constrains:
· A number of 62 subnets
· Host IP Address: 172.16.0.0
· Original Subnet Mask 255.255.0.0

C. Having the following information, compute subnets with the following constrains:
· A maximum number of 29 hosts/subnet
· Host IP Address: 192.168.200.0 
· Original Subnet Mask 255.255.255.0

D. Having the following information, compute subnets with the following constrains:
· A number of 250 subnets
· Host IP Address: 10.0.0.0
· Original Subnet Mask 255.0.0.0

3.3 Test the following commands (using Command Prompt on Windows OS or Terminal in Linux OS):

· Command: ipconfig /all (on Windows OS) and ifconfig (on Linux OS)
· Role: displays all network configuration values for your network interface cards

· Command: ipconfig /release and ipconfig /renew (on Windows OS) and dhclient (on Linux OS)
· Role: refreshes DHCP and DNS values

· Command: ping
· Role: troubleshoots network connectivity; verifies IP connections, using ICMP packets

· Command: tracert (traceroute on Linux)
· Role: troubleshoots network connectivity; resolves the path to an IP destination, using ICMP packets

· Command: nslookup
· Role: performs DNS queries

· Command: route print 
· Role: displays the routing table of the host device

· Command: netstat
· Role: network statistics tool

· Command: arp -a 
· Role: displays the ARP cache (mapping of IP address to a physical addresses)

Hint: you can use online operating systems to test various commands (e.g. https://bellard.org/jslinux/ for Alpine Linux or Windows 2000)

3.4 Using Wireshark, capture different types of IP packets and analyze their headers. For example:
· capture ping traffic by filtering the ICMP protocol filter 
· capture nsloookup traffic by filtering the DNS protocol filter
· etc.

3.5 Configure and test the following network using Packet Tracer:






Considering IP address 172.16.0.0 /16, compute 2 subnets and assign the correct IP address to the routers’ interfaces and to the host computers (PC0 and PC1).

Step 0: In order  to show the interface name and numbers, go to Options -> Preferences and check “Always Show Port Labels in Logical Workspace”



Step 1: Create the two subnets

Step 2: Before configuring the network devices, assign a unique IP address and he corresponding subnet mask to each network port:

	Device
	Interface
	IP Address
	Subnet mask

	PC0
	 Fa0
	172 . ___ . ___ . ___
	___ . ___ . ___ . ___

	Router0
	Gig0/0
	___ . ___ . ___ . ___
	___ . ___ . ___ . ___

	Router0
	Gig0/1
	___ . ___ . ___ . ___
	___ . ___ . ___ . ___

	PC1
	Fa0
	___ . ___ . ___ . ___
	___ . ___ . ___ . ___



Step 3: Configure the router using the commands provided in steps 3.x below. The commands provide sample interface names and IP addresses. You must use the interface names and the IP addresses filled in the previous table:

Example on configuring the depicted topology

COMPUTER NETWORKS
Network Layer – IPv4 Fundamentals






Step 3.1: Enter configuration mode on the router
Router>enable
Router#configure terminal 
Router(config)# 

Step 3.2: Assign static IPv4 address to the router interfaces

Router(config)#interface fastethernet 0/0
Router(config-if)#ip address 192.168.0.1 255.255.255.0 
Router(config-if)#no shutdown
Router(config-if)#exit

Configure the other router interface with the corresponding IP address the same for the other router interface
Router(config)# interface ___
Router(config-if)#ip address ___________ ___________
Router(config-if)#no shutdown 

Step 3.3: Display information about the router configuration

Router#show ip interface brief
Description: Display IP information about router’s interfaces

Router#show ip route
Description: Display IP routing table

Step 4: Configure IP addresses on the PCs using the following screenshots






Test the connectivity.
a. check IP addresses oh hosts computers: PC -> Desktop -> IP Configuration
b. Check connectivity between computers using the ping <target IP> command: PC -> Desktop -> Command prompt



Notes



image5.png

image7.png

image8.png

image4.png

image9.png

image3.png

image11.png

image10.png

image6.png

image2.png

image1.png


reading content from C:\Users\Asus\Desktop\Bee\CN6.docx


COMPUTER NETWORKS
Network Layer – IPv6
LABORATORY WORK NO. 7
Network Layer – IPv6

1. Objectives

At the end of the lab, students will be able: to explain the characteristics of the IPv6 protocol, to describe the dynamic IPv6 configuration, to explain the routing process, and to implement basic IPv6 network configurations.

2. Theoretical considerations

2.1 IPv6

IPv6 was developed by the Internet Engineering Task Force (IETF) to overcome the limitations of IPv4.
The main limitation of IPv4 is the exhaustion of addresses because the address request is larger than the address space provided by the 32 bits of the address. The solution for the IPv4 address depletion is private addressing and NAT. This solution in turn creates several drawbacks such as lack of end-to-end connectivity and increased network complexity.
IPv6 provides the following improvements:
· Increased address space based on 128 bit address;
· Improved packet handling due to the simplified header with fewer fields;
· Eliminates the need for NAT by eliminating the need for private addresses.

The packet header is presented below:



· Version - version field, equal to 6;
· Traffic class - equivalent to DiffServ – DS field;
· Payload length – indicates the length of the payload of the IPv6 packet;
· Next header – defines the next level protocol;
· Hop limit – replaces the Time to live field in IPv4;
· Source address – the IPv4 address of the sender of the packet;
· Destination address – the IPv4 address of the receiver of the packet;

IPv6 packet may contain extension headers, placed between IPv6 header and the payload, providing optional network layer information. Routers do not fragment IPv6 packets.

IPv6 addresses are 128 bits in length. The preferred format for writing an IPv6 address is x:x:x:x:x:x:x:x, with each “x” consisting of four hexadecimal values, 4 bits being represented by a hexadecimal digit. Hextet is an unofficial term, it refers to a segment of 16 bits (4 values in hexadecimal). Example of an IPv6 addresses in the preferred format:

	Type
	Format

	Preferred
	2001:0b20:0000:00d7:0000:0000:0000:0012



There are two rules to reduce or compress IPv6 representation. The first rule is to omit the zeros that are at the beginning of each hextet - leading 0s (zeros).

	Type
	Format

	Preferred
	2001:0b20:0000:00d7:0000:0000:0000:0012

	No leading 0s
	2001:b20:0:d7:0:0:0:12



The second rule is to omit the segments (hextets) that contain all the bits 0 and replace them with "double colon" (::). This replacement can be done only once

	Type
	Format

	Preferred
	2001:0b20:0000:00d7:0000:0000:0000:0012

	No leading 0s
	2001:b20:0:d7:0:0:0:12

	Compressed
	2001:b20:0:d7::12

	or
	

	Compressed
	2001:b20::d7:0:0:0:12



Types of IPv6 addresses:
· Unicast
· Uniquely identifies an interface
· The source address must be unicast
· Multicast
· It is used to send a single IPv6 packet to multiple destinations
· IPv6 does not have a broadcast address, but there is a multicast address that provides the same result
· Well-Known Multicast Addresses
· ff02 :: 1: All IPv6 devices
· ff02 :: 2: All IPv6 routers
· ff02 :: 5: All OSPFv3 routers
· ff02 :: a: All EIGRP (IPv6) routers
· Anycast
· Any unicast address that can be assigned to multiple devices
· A packet sent to anycast address is routed to the nearest device with that address

IPv6 prefix length indicates the network portion of an IPv6 address. It is represented in slash notation and can range from 0 to 128. The recommended IPv6 prefix length for LANs is /64. Example of an IPv6 address and prefix length: 2001:b20:0:d7::12/64

	Prefix (64 bits)
	Interface ID (64 bits)

	2001:0b20:0000:00d7
	0000:0000:0000:0012



Types of unicast addresses:
· Global Unicast Address (GUA)
· Globally unique
· Routable on the Internet
· Similar to a public IPv4 address
· Link-local Address (LLA)
· Required for every IPv6-enabled device
· Created even if the device has not been assigned a global unicast address
· For communication with other devices from the same local link
· Allow devices to communicate only on the same link
· Unique only in the local link
· Not routable on the Internet
· They are in the range FE80::/10
· The router's link-local address is usually used as the default gateway
· Unique Local Address (ULA)
· Local addressing within a site or between a limited number of sites



Structure of the Global Unicast Addresses (GUA)
· Global routing prefix
· Network
· Portion of the address assigned by the provider
· Typical /48
· Subnet ID
· For subnetting in an organization
· Usually, 16 bits
· Interface ID
· The equivalent of the host portion of an IPv4 address
· Usually, 64 bits
Example of an IPv6 global unicast address: 2001:b20:0:d7::12/64

	Global Routing Prefix
	Subnet ID
	Interface ID

	2001:0b20:0000
	00d7
	0000:0000:0000:0012



2.2 Host configuration

Methods:
· Static
· Manual configuration of the IPv6 address
· Dynamic
· Stateless Address Autoconfiguration (SLAAC)
· Stateful DHCPv6

A device obtains the IPv6 addressing information dynamically, through Internet Control Message Protocol version 6 (ICMPv6) messages. IPv6 routers periodically send out ICMPv6 Router Advertisement (RA) messages to all IPv6-enabled devices on the network. An RA message will also be sent in response to a host sending an ICMPv6 Router Solicitation (RS) message, which is a request for an RA message.
The ICMPv6 RA message is a suggestion to devices on how to obtain IPv6 addressing information. The ICMPv6 RA message includes the following:
· Network prefix and prefix length
· Default gateway address
· DNS addresses and domain name

There are three methods for RA messages:
· Method 1: SLAAC - prefix, prefix length, and default gateway address
· Method 2: SLAAC with a stateless DHCPv6 server – partial information, the rest of the information, such as DNS addresses, needs to be obtained from a stateless DHCPv6 server
· Method 3: Stateful DHCPv6 (no SLAAC) - default gateway address, the rest of the information, needs to be obtained from a stateful DHCPv6 server

The decision of how a client will obtain IPv6 addressing information depends on the settings within the RA message. An ICMPv6 RA message includes three flags to identify the dynamic options available to a host, as follows:
· A flag - Address Autoconfiguration flag. Use Stateless Address Autoconfiguration (SLAAC) to create an IPv6 GUA.
· O flag - Other Configuration flag. Other information is available from a stateless DHCPv6 server.
· M flag - Managed Address Configuration flag. Use a stateful DHCPv6 server to obtain an IPv6 GUA.

· Method 1 - SLAAC



· Method 2 - SLAAC with a stateless DHCPv6 server



· Method 3 - Stateful DHCPv6 (no SLAAC)



3. Lab activity

3.1 Discuss the theoretical aspects.

3.2 Consider the network topology below:



Step 1: Before configuring the network devices, discuss the IPv6 address assignment in the table below:

	Device
	Interface
	IPv6 Address

	Laptop 1
	Fa0
	DHCPv6

	Laptop 2
	Fa0
	DHCPv6

	R1
	Gig0/0
	2001:1:1:1::1/64
fe80::1 link-local 

	R1
	Gig0/1
	2001:1:1:2::1/64

	R2
	Gig0/1
	2001:1:1:2::2/64
fe80::2 link-local 

	R2
	Gig0/0
	2001:1:1:3::1/64


Note*: pay attention to the interface names of the router you are using, some routers may only have FastEthernet interfaces.

Step 2: Assign hostnames, enable IPv6 routing and assign static IPv6 addresses to router interfaces.

Example:
R1>enable 
R1#configure terminal 
Enter configuration commands, one per line.  End with CNTL/Z.
Router(config)#hostname R1
R1(config)#ipv6 unicast-routing 
R1(config)# interface gigabitEthernet 0/0
R1(config-if)#ipv6 address fe80::1 link-local 
R1(config-if)#ipv6 address 2001:1:1:1::1/64
R1(config-if)#no shutdown

Use the following command to display the IPv6 addresses configured on the router:
R1#show ipv6 interface brief

Step 3: Configure a static route on each router pointed to the IPv6 address of Gig0/1 on the other router. For R1 router specify the LLA address for the next hop and for the R2 router specify the GUA address the next hop. Discuss the differences!

R1(config)#ipv6 route 2001:1:1:3::/64 GigabitEthernet0/1 FE80::2

R2(config)# ipv6 route 2001:1:1:1::/64 2001:1:1:2::1

Use the following command to display the IPv6 routing table:
Router#show ipv6 route

Step 4: Verify SLAAC Address Assignment.





Step 5: Test the connectivity between end devices from opposite networks.
a. ping <target IP>
b. tracert <target IP>



Step 6: Replace the configured static routes with default routes and test the connectivity between end devices from opposite networks. In IPv6, the default route is ::/0.

R1(config)#no ipv6 route 2001:1:1:3::/64 GigabitEthernet0/1 FE80::2
R2(config)#no ipv6 route 2001:1:1:1::/64 2001:1:1:2::1

R1(config)#ipv6 route ::/0 ______________________________________
R2(config)#ipv6 route ::/0 ______________________________________

Step 7: Configure R1 to provide stateless DHCPv6 for Laptop 1.

R1(config)#ipv6 dhcp pool R1_NET1
R1(config-dhcpv6)#dns-server 2001:1:1:1::F
R1(config-dhcpv6)#domain-name NET1.com
R1(config-dhcpv6)#exit
R1(config)#interface gigabitEthernet 0/0
R1(config-if)#ipv6 nd other-config-flag 
R1(config-if)#ipv6 dhcp server R1_NET1

Step 8: Verify stateless DHCPv6 Address Assignment.







Step 9: Configure R2 to provide stateful DHCPv6 for Laptop 2.

R2(config)#ipv6 dhcp pool R2_NET3
R2(config-dhcpv6)# address prefix 2001:1:1:3::/64
R2(config-dhcpv6)#dns-server 2001:1:1:3::A
R2(config-dhcpv6)#domain-name NET3.com
R2(config-dhcpv6)#exit
R2(config)#interface gigabitEthernet 0/0
R2(config-if)#ipv6 nd managed-config-flag
R2(config-if)#ipv6 dhcp server R2_NET3

Step 10: Verify stateful DHCPv6 Address Assignment





Step 11: Test the connectivity between end devices from opposite networks.
a. ping <target IP>
b. tracert <target IP>




Notes



12

11

image3.png

image4.png

image5.png

image6.png

image7.png

image8.png

image9.png

image10.png

image11.png

image12.png

image13.png

image14.png

image1.png

image2.png


reading content from C:\Users\Asus\Desktop\Bee\CN7.docx

LABORATORY WORK 
Application Layer: Network programming with sockets


1. Objectives
Prerequisite: Use a working software environment for your preferred programming language (Java, C#, Python, C/C++, etc.) 
At the end of the activity, students will be able to write software for socket applications and debug network applications using Wireshark.

2. Theoretical considerations
The current practical work focuses on the Transport and Application layers of the ISO/OSI stack (Figure 8.1).

Figure 8.1 Network stack models and PDU naming in each level. The arrows indicate the addressed layers in the current activity
This practical activity addresses the programming side of software engineering and communication offered through the use of network sockets in a desktop environment. Socket programming is available in any high level programming language and sockets are transmitting information at the Application Layer. Sockets are used in different types of applications, such as: Client-Server, peer-2-peer systems, inter-process communication (on the same machine).
Network sockets can be constructed to use both IPv4 and IPv6 addresses. A socket is the combination of an IP address and a port number for use in a network application. A network application provides connectivity between different network devices. It is not possible to bind a socket to a port that is already in use by any other application, however the same port may be used concurrently by TCP and UDP transport layer protocols. The IP addresses identify the network device, but the port number uniquely identifies each running application on the current network device.
The operations that an application can perform on a socket are the following:
· Create - Creation of a socket object 
· Bind - Configure the socket object to use a local pair of IP address and port number to accept connections
· Listen - Program the socket to wait for incoming connections
· Accept - Accept the incoming connection
· Connect - This operation is used by a client that wants to connect to a server
· Send - Used to send data over the socket to the remote destination
· Receive - Used to receive data which is sent from a remote location
· Close - close the connection between the two sockets
2.1. Working with sockets on the local machine
· In order to simulate a network on the local machine, the entire available loopback range: 127.0.0.0 - 127.255.255.255 can be used. The loopback network interface is available only on the local host and is mainly used for diagnostics and standalone network applications. Therefore, a simulated local network can use these IP addresses for communication. In order to test and confirm that this range can be used, a ping command can be run from the local terminal to verify connectivity to said IP addresses (Figure 8.2):

Figure 8.2 Loopback addresses testing
· It is also possible to assign multiple valid IP addresses on the local interface, but this has to be done manually by statically allocating IP addresses to the interface. In this case, running the ipconfig command would show all the IP addresses assigned to the same interface. See an example below (Figure 8.3):

Figure 8.3 IP configuration view - CLI
· After having assigned the IP addresses, sockets can now be created to use these IP addresses.

2.2. TCP Sockets
· TCP (Transmission Control Protocol) sockets are connection oriented and represent a reliable data transmission mechanism that allows data to be received and processed in the same order it was transmitted.
· The Figure 8.4 shows a Wireshark traffic capture on the “Adaptor for loopback traffic capture”. The screenshot shows a client-server communication via sockets using the loopback addresses. The applied filter is tcp.port == 1234. The server is bound to the 127.0.0.1 address and awaits connections on port number 1234 while the client binds on the 127.0.0.2 address sending a payload of 14 bytes to the server.

Figure 8.4 Wireshark capture of TCP socket communication
· The screenshot highlights the TCP mechanism represented by acknowledgement (ACK) packets. The first three packet exchanges (Figure 8.4) represent the 3-way handshake which is needed to establish the connection for any TCP connection (Figure 8.5) and following that the packet sending the payload is visible. This handshake assures that both hosts want to communicate and acknowledge the other host’s intention to communicate.

Figure 8.5 TCP 3-way handshake
· The Wireshark image shows a socket communication which remains open.
· Answer the following question while working on the practical activity: If the socket connection is closed, what are the TCP flags that are set in order to close the connection?
2.3. UDP Sockets
· In contrast with the TCP sockets, UDP (User Datagram Protocol) sockets are not connection oriented and they do not provide reliable communication. This means they do not guarantee that network packets are delivered to the destination. The Figure 8.6 represents a Wireshark capture (again on the “Adaptor for loopback traffic capture”) of a UDP communication between two hosts. The applied filter is udp.port == 1234. As can be seen, there is no handshake performed and there aren’t any ACK packets being transmitted.

Figure 8.6 Wireshark capture of UDP socket communication
TCP and UDP socket communications are presented in Figure 8.7 a and b.
	
	


	1. TCP socket communication
	1. UDP socket communication


Figure 8.7 Socket communications

1. Implementation template
· A network device can function in 3 modes:
· Server: Receiving device
· Client: Sending device
· Relay: Acting as an intermediary node in a communication and acts as both sending and receiving device. This type of network node can be encountered in Wireless Sensor Networks (WSN) where not all sensor nodes are in the wireless range of the collector device, therefore some nodes need to forward the information to the sink node (the collector node).
· This chapter provides a template for implementing the relay communication node using OOP concepts (the template is written in pseudocode, not in a particular programming language). This is not the only possibility to organize the code, students can choose any software design methodology they are comfortable with.
	Relay node implementation template

	class RelayNode {
public:
    RelayNode(IPAddress, serverPortNr) {
        m_server.listen(IPAddress, serverPortNr);
        m_client.bind(IPAddress);

        m_server.onReceive() => {
            ByteArray receivedData = m_server.readData();
            m_client.connectToHost(m_nextHopIpAddress, m_nextHopPortNr);
            m_client.sendData(receivedData);
            m_client.close();
        }
    }
    void setNextHopInformation(nextHopIPAddress, nextHopServerPortNr) {
        m_nextHopIpAddress = nextHopIPAddress;
        m_nextHopPortNr= nextHopServerPortNr;
    }

private:
    Server m_server; // server instance accepting connections
    Client m_client; // client instance sending data to the next hop
    IPAddress m_nextHopIpAddress; // next hop address used by the client instance
    int m_nextHopPortNr; // next hop port nr used by the client instance
}

void main() {
    RelayNode relay(127.0.0.1, 1234);
    relay.setNextHopInformation(127.0.0.2, 2345)
    …
    // run application event loop
}


3. Practical activity
· Each student will be assigned one of the topologies below and the simulation scenario has to be implemented in software.
· Besides the constraints imposed by each simulation scenario, the common tasks for each implementation are the following:
· Use a programming language of choice to implement the network simulation
· Use the loopback address range for addressing: 127.0.0.0 – 127.255.255.255
· Test the implementation using Wireshark
· Deliver the implementation (source code or link to online code versioning repository)
· Provide a Wireshark capture to prove the communication between different IP addresses
· Inspect the ratio between total delivered payload against the relevant application layer traffic / the ratio between the total packet length (headers and data) compared to the length of data sent (use Wireshark statistics or manual packet inspection)
· Depending on the implemented simulation, research the headers for TCP and/or UDP protocols. Using Wireshark, identify the header elements in the captured traffic

3.1 Ring communication
· Three computers are communicating in a single direction creating a loop (Figure 8.8)
· One of the computers initiates the communication sending the value ‘1’
· Upon receipt, each network device increments the received value and sends it to the next device
· The communication ends when the delivered payload reaches the value ‘100’
· Implementation hints:
· Implement a single class which is instantiated 3 times with different communication parameters (reuse the code and do not duplicate it for each instance)
· All communication uses TCP sockets (optional)

Figure 8.8 Ring communication network topology

3.2 Node selector
· There are three nodes in the topology: N1, N2, N3 (Figure 8.9)
· N1 increments a value 100 times and after every increment it sends the value to either N2 or N3 which are selected randomly for transmission
· When N2 receives an integer value which is a multiple of 3 it will send an ACK packet back to N1
· When N3 receives an integer value which is a multiple of 5 it will send an ACK packet back to N1
· Implementation hints:
· Implement a single class for N2 and N3 which is instantiated with different communication parameters (reuse the code and do not duplicate it for each instance)
· All communication uses UDP sockets (optional)

Figure 8.9 Node selector network topology

3.3 Relay nodes
· There are four nodes in the topology (Figure 8.10), Sender and three possible destinations (D1, D2, and D3)
· The Sender node is transmitting 100 packets containing an integer number randomly to one of the 3 possible destinations (D1, D2 or D3)
· After each packet transmission the integer number is incremented
· Every node can only send data to the next hop to which it is connected to, therefore a packet from the Sender to D3 must pass through D1 and D2


Figure 8.10 Relay nodes network topology
· Implementation hints:
· The data payload that is transmitted via the socket has to contain the target IP address, so the payload has the following format (Figure 8.11):
	Target IP address
	Value


Figure 8.11 Payload format
· Every time a node receives a packet it verifies whether the received payload’s target IP address is the same as the current node IP address. If it is identical, the communication stops here, otherwise the data is forwarded to the next hop.
· Implement a single class for D1, D2 and D3 which is instantiated with different communication parameters (reuse the code and do not duplicate it for each instance)

image6.png

image7.png

image8.png

image9.png

image10.png

image11.png

image1.png

image2.png

image3.png

image4.png

image5.png


reading content from C:\Users\Asus\Desktop\Bee\Comisii burse 2024-2025.pdf


     
                                            

                  FACULTATEA DE AUTOMATICĂ ȘI CALCULATOARE 
                          Str. G. Barițiu nr 26-28, Cluj Napoca, 400027, ROMÂNIA 
                                                   Telefon +40 264 401218 
                                                           https://ac.utcluj.ro/ 
 

 

 

 

 

DECIZIA nr. 11 din 19.09.2024 

- extras - 

 

În Consiliul Facultății din data de 19.09.2024, s-au aprobat componențele următoarelor 

comisii  pentru anul universitar 2024-2025: 

1. Comisiei de analiză, evaluare a dosarelor și atribuire a burselor  
Prodecan: prof.dr.ing. Mihaela DÎNȘOREANU 
Secretar șef: Luciana ABRUDANU 
Student: Cristian Mihai FILIP  - an IV Ca ro 
Student: Aurelia Georgiana DUȚULESCU - an III Au ro 
 

2. Comisia de specialiști pentru burse de performanță științifică: 
Prof.dr.ing. Gheorghe SEBESTYEN 
Conf.dr.ing. Mihai HULEA 
 

3. Comisia de contestații burse: 
Prodecan: conf.dr.mat. Daniela INOAN 
Dr. ec. Simona SABO-MARȚIȘ 
Student Natalia Georgiana BONCEA - an IV Ca ro 
Student Antonia Maria FILIMON - an IV Au ro 
 
 
 
 
 

DECAN, 

Prof. dr. ing. Vlad MUREȘAN 

 
 



reading content from C:\Users\Asus\Desktop\Bee\gradientDescent-Univariate.xlsx

Sheet1
	w0	w1		x	f(x)													f(x)	h(x)
	0.8	0.3		1	2													2.00000	2.00008
				2	4													4.00000	4.00002
	alpha	0.025		3	6													6.00000	5.99995

																		0.00015	1.99993

	Iter#	w0	w1	h(x1)	err h(x1)	d h(x1)	h(x2)	err h(x2)	d h(x2)	h(x3)	err h(x3)	d h(x3)	Err	sum d	Loss		Loss copy	w0 copy	w1 copy
	0	0.80000	0.30000	1.10000	0.90000	0.90000	1.40000	2.60000	5.20000	1.70000	4.30000	12.90000	7.80000	19.00000	26.06000		26.06000	0.80000	0.30000
	1	0.99500	0.77500	1.77000	0.23000	0.23000	2.54500	1.45500	2.91000	3.32000	2.68000	8.04000	4.36500	11.18000	9.35233		9.35233	0.99500	0.77500
	2	1.10413	1.05450	2.15863	-0.15863	-0.15863	3.21313	0.78688	1.57375	4.26763	1.73238	5.19713	2.36063	6.61225	3.64546		3.64546	1.10413	1.05450
	3	1.16314	1.21981	2.38295	-0.38295	-0.38295	3.60275	0.39725	0.79449	4.82256	1.17744	3.53232	1.19174	3.94387	1.69082		1.69082	1.16314	1.21981
	4	1.19293	1.31840	2.51134	-0.51134	-0.51134	3.82974	0.17026	0.34052	5.14814	0.85186	2.55557	0.51078	2.38475	1.01611		1.01611	1.19293	1.31840
	5	1.20570	1.37802	2.58373	-0.58373	-0.58373	3.96175	0.03825	0.07651	5.33977	0.66023	1.98069	0.11476	1.47347	0.77810		0.77810	1.20570	1.37802
	6	1.20857	1.41486	2.62343	-0.62343	-0.62343	4.03829	-0.03829	-0.07658	5.45315	0.54685	1.64055	-0.11487	0.94054	0.68918		0.68918	1.20857	1.41486
	7	1.20570	1.43837	2.64407	-0.64407	-0.64407	4.08245	-0.08245	-0.16489	5.52082	0.47918	1.43755	-0.24734	0.62858	0.65124		0.65124	1.20570	1.43837
	8	1.19952	1.45409	2.65360	-0.65360	-0.65360	4.10769	-0.10769	-0.21538	5.56178	0.43822	1.31467	-0.32307	0.44568	0.63083		0.63083	1.19952	1.45409
	9	1.19144	1.46523	2.65667	-0.65667	-0.65667	4.12190	-0.12190	-0.24380	5.58713	0.41287	1.23862	-0.36569	0.33815	0.61654		0.61654	1.19144	1.46523
	10	1.18230	1.47368	2.65598	-0.65598	-0.65598	4.12966	-0.12966	-0.25933	5.60335	0.39665	1.18996	-0.38899	0.27465	0.60446		0.60446	1.18230	1.47368
	11	1.17257	1.48055	2.65312	-0.65312	-0.65312	4.13367	-0.13367	-0.26734	5.61422	0.38578	1.15734	-0.40101	0.23687	0.59326		0.59326	1.17257	1.48055
	12	1.16255	1.48647	2.64902	-0.64902	-0.64902	4.13549	-0.13549	-0.27098	5.62196	0.37804	1.13412	-0.40647	0.21412	0.58250		0.58250	1.16255	1.48647
	13	1.15239	1.49182	2.64421	-0.64421	-0.64421	4.13603	-0.13603	-0.27207	5.62786	0.37214	1.11643	-0.40810	0.20015	0.57200		0.57200	1.15239	1.49182
	14	1.14218	1.49683	2.63901	-0.63901	-0.63901	4.13584	-0.13584	-0.27168	5.63267	0.36733	1.10200	-0.40752	0.19131	0.56172		0.56172	1.14218	1.49683
	15	1.13200	1.50161	2.63361	-0.63361	-0.63361	4.13522	-0.13522	-0.27043	5.63683	0.36317	1.08952	-0.40565	0.18548	0.55164		0.55164	1.13200	1.50161
	16	1.12185	1.50625	2.62810	-0.62810	-0.62810	4.13435	-0.13435	-0.26870	5.64060	0.35940	1.07821	-0.40305	0.18141	0.54173		0.54173	1.12185	1.50625
	17	1.11178	1.51078	2.62256	-0.62256	-0.62256	4.13334	-0.13334	-0.26669	5.64413	0.35587	1.06762	-0.40003	0.17837	0.53201		0.53201	1.11178	1.51078
	18	1.10178	1.51524	2.61702	-0.61702	-0.61702	4.13226	-0.13226	-0.26452	5.64750	0.35250	1.05749	-0.39678	0.17595	0.52246		0.52246	1.10178	1.51524
	19	1.09186	1.51964	2.61150	-0.61150	-0.61150	4.13114	-0.13114	-0.26228	5.65078	0.34922	1.04766	-0.39342	0.17388	0.51308		0.51308	1.09186	1.51964
	20	1.08202	1.52399	2.60601	-0.60601	-0.60601	4.13000	-0.13000	-0.26000	5.65399	0.34601	1.03804	-0.38999	0.17204	0.50387		0.50387	1.08202	1.52399
	21	1.07227	1.52829	2.60056	-0.60056	-0.60056	4.12885	-0.12885	-0.25770	5.65714	0.34286	1.02858	-0.38655	0.17032	0.49483		0.49483	1.07227	1.52829
	22	1.06261	1.53255	2.59516	-0.59516	-0.59516	4.12770	-0.12770	-0.25540	5.66025	0.33975	1.01925	-0.38311	0.16869	0.48595		0.48595	1.06261	1.53255
	23	1.05303	1.53676	2.58980	-0.58980	-0.58980	4.12656	-0.12656	-0.25312	5.66332	0.33668	1.01003	-0.37968	0.16712	0.47723		0.47723	1.05303	1.53676
	24	1.04354	1.54094	2.58448	-0.58448	-0.58448	4.12542	-0.12542	-0.25085	5.66637	0.33363	1.00090	-0.37627	0.16558	0.46866		0.46866	1.04354	1.54094
	25	1.03413	1.54508	2.57921	-0.57921	-0.57921	4.12430	-0.12430	-0.24859	5.66938	0.33062	0.99187	-0.37289	0.16407	0.46025		0.46025	1.03413	1.54508
	26	1.02481	1.54918	2.57399	-0.57399	-0.57399	4.12318	-0.12318	-0.24635	5.67236	0.32764	0.98292	-0.36953	0.16258	0.45199		0.45199	1.02481	1.54918
	27	1.01557	1.55325	2.56882	-0.56882	-0.56882	4.12207	-0.12207	-0.24413	5.67531	0.32469	0.97406	-0.36620	0.16110	0.44388		0.44388	1.01557	1.55325
	28	1.00642	1.55727	2.56369	-0.56369	-0.56369	4.12097	-0.12097	-0.24193	5.67824	0.32176	0.96527	-0.36290	0.15965	0.43591		0.43591	1.00642	1.55727
	29	0.99734	1.56127	2.55861	-0.55861	-0.55861	4.11988	-0.11988	-0.23975	5.68114	0.31886	0.95657	-0.35963	0.15821	0.42809		0.42809	0.99734	1.56127
	30	0.98835	1.56522	2.55358	-0.55358	-0.55358	4.11880	-0.11880	-0.23759	5.68402	0.31598	0.94795	-0.35639	0.15678	0.42040		0.42040	0.98835	1.56522
	31	0.97944	1.56914	2.54858	-0.54858	-0.54858	4.11773	-0.11773	-0.23545	5.68687	0.31313	0.93940	-0.35318	0.15536	0.41286		0.41286	0.97944	1.56914
	32	0.97061	1.57302	2.54364	-0.54364	-0.54364	4.11666	-0.11666	-0.23333	5.68969	0.31031	0.93093	-0.34999	0.15396	0.40545		0.40545	0.97061	1.57302
	33	0.96187	1.57687	2.53874	-0.53874	-0.53874	4.11561	-0.11561	-0.23123	5.69249	0.30751	0.92254	-0.34684	0.15258	0.39817		0.39817	0.96187	1.57687
	34	0.95319	1.58069	2.53388	-0.53388	-0.53388	4.11457	-0.11457	-0.22914	5.69526	0.30474	0.91422	-0.34371	0.15120	0.39102		0.39102	0.95319	1.58069
	35	0.94460	1.58447	2.52907	-0.52907	-0.52907	4.11354	-0.11354	-0.22708	5.69801	0.30199	0.90598	-0.34061	0.14984	0.38401		0.38401	0.94460	1.58447
	36	0.93609	1.58821	2.52430	-0.52430	-0.52430	4.11251	-0.11251	-0.22503	5.70073	0.29927	0.89781	-0.33754	0.14849	0.37711		0.37711	0.93609	1.58821
	37	0.92765	1.59193	2.51957	-0.51957	-0.51957	4.11150	-0.11150	-0.22300	5.70343	0.29657	0.88972	-0.33450	0.14715	0.37034		0.37034	0.92765	1.59193
	38	0.91928	1.59561	2.51489	-0.51489	-0.51489	4.11049	-0.11049	-0.22099	5.70610	0.29390	0.88170	-0.33148	0.14582	0.36370		0.36370	0.91928	1.59561
	39	0.91100	1.59925	2.51025	-0.51025	-0.51025	4.10950	-0.10950	-0.21900	5.70875	0.29125	0.87375	-0.32850	0.14451	0.35717		0.35717	0.91100	1.59925
	40	0.90279	1.60286	2.50565	-0.50565	-0.50565	4.10851	-0.10851	-0.21702	5.71137	0.28863	0.86588	-0.32554	0.14320	0.35076		0.35076	0.90279	1.60286
	41	0.89465	1.60644	2.50109	-0.50109	-0.50109	4.10753	-0.10753	-0.21507	5.71398	0.28602	0.85807	-0.32260	0.14191	0.34446		0.34446	0.89465	1.60644
	42	0.88658	1.60999	2.49657	-0.49657	-0.49657	4.10656	-0.10656	-0.21313	5.71656	0.28344	0.85033	-0.31969	0.14063	0.33828		0.33828	0.88658	1.60999
	43	0.87859	1.61351	2.49210	-0.49210	-0.49210	4.10560	-0.10560	-0.21121	5.71911	0.28089	0.84267	-0.31681	0.13937	0.33221		0.33221	0.87859	1.61351
	44	0.87067	1.61699	2.48766	-0.48766	-0.48766	4.10465	-0.10465	-0.20930	5.72164	0.27836	0.83507	-0.31395	0.13811	0.32625		0.32625	0.87067	1.61699
	45	0.86282	1.62044	2.48326	-0.48326	-0.48326	4.10371	-0.10371	-0.20742	5.72415	0.27585	0.82754	-0.31112	0.13686	0.32039		0.32039	0.86282	1.62044
	46	0.85504	1.62387	2.47891	-0.47891	-0.47891	4.10277	-0.10277	-0.20555	5.72664	0.27336	0.82008	-0.30832	0.13563	0.31464		0.31464	0.85504	1.62387
	47	0.84733	1.62726	2.47459	-0.47459	-0.47459	4.10185	-0.10185	-0.20369	5.72910	0.27090	0.81269	-0.30554	0.13441	0.30899		0.30899	0.84733	1.62726
	48	0.83970	1.63062	2.47031	-0.47031	-0.47031	4.10093	-0.10093	-0.20186	5.73154	0.26846	0.80537	-0.30279	0.13320	0.30345		0.30345	0.83970	1.63062
	49	0.83213	1.63395	2.46607	-0.46607	-0.46607	4.10002	-0.10002	-0.20004	5.73396	0.26604	0.79811	-0.30006	0.13200	0.29800		0.29800	0.83213	1.63395
	50	0.82462	1.63725	2.46187	-0.46187	-0.46187	4.09912	-0.09912	-0.19823	5.73636	0.26364	0.79091	-0.29735	0.13081	0.29265		0.29265	0.82462	1.63725
	51	0.81719	1.64052	2.45771	-0.45771	-0.45771	4.09822	-0.09822	-0.19645	5.73874	0.26126	0.78378	-0.29467	0.12963	0.28740		0.28740	0.81719	1.64052
	52	0.80982	1.64376	2.45358	-0.45358	-0.45358	4.09734	-0.09734	-0.19468	5.74109	0.25891	0.77672	-0.29201	0.12846	0.28224		0.28224	0.80982	1.64376
	53	0.80252	1.64697	2.44949	-0.44949	-0.44949	4.09646	-0.09646	-0.19292	5.74343	0.25657	0.76971	-0.28938	0.12730	0.27718		0.27718	0.80252	1.64697
	54	0.79529	1.65015	2.44544	-0.44544	-0.44544	4.09559	-0.09559	-0.19118	5.74574	0.25426	0.76277	-0.28677	0.12615	0.27220		0.27220	0.79529	1.65015
	55	0.78812	1.65330	2.44142	-0.44142	-0.44142	4.09473	-0.09473	-0.18946	5.74803	0.25197	0.75590	-0.28419	0.12501	0.26732		0.26732	0.78812	1.65330
	56	0.78102	1.65643	2.43745	-0.43745	-0.43745	4.09388	-0.09388	-0.18775	5.75031	0.24969	0.74908	-0.28163	0.12389	0.26252		0.26252	0.78102	1.65643
	57	0.77397	1.65953	2.43350	-0.43350	-0.43350	4.09303	-0.09303	-0.18606	5.75256	0.24744	0.74233	-0.27909	0.12277	0.25781		0.25781	0.77397	1.65953
	58	0.76700	1.66260	2.42959	-0.42959	-0.42959	4.09219	-0.09219	-0.18438	5.75479	0.24521	0.73564	-0.27657	0.12166	0.25318		0.25318	0.76700	1.66260
	59	0.76008	1.66564	2.42572	-0.42572	-0.42572	4.09136	-0.09136	-0.18272	5.75700	0.24300	0.72901	-0.27408	0.12057	0.24864		0.24864	0.76008	1.66564
	60	0.75323	1.66865	2.42188	-0.42188	-0.42188	4.09054	-0.09054	-0.18107	5.75919	0.24081	0.72244	-0.27161	0.11948	0.24417		0.24417	0.75323	1.66865
	61	0.74644	1.67164	2.41808	-0.41808	-0.41808	4.08972	-0.08972	-0.17944	5.76136	0.23864	0.71592	-0.26916	0.11840	0.23979		0.23979	0.74644	1.67164
	62	0.73971	1.67460	2.41431	-0.41431	-0.41431	4.08891	-0.08891	-0.17782	5.76351	0.23649	0.70947	-0.26673	0.11734	0.23549		0.23549	0.73971	1.67460
	63	0.73304	1.67753	2.41058	-0.41058	-0.41058	4.08811	-0.08811	-0.17622	5.76564	0.23436	0.70307	-0.26433	0.11628	0.23126		0.23126	0.73304	1.67753
	64	0.72644	1.68044	2.40688	-0.40688	-0.40688	4.08732	-0.08732	-0.17463	5.76775	0.23225	0.69674	-0.26195	0.11523	0.22711		0.22711	0.72644	1.68044
	65	0.71989	1.68332	2.40321	-0.40321	-0.40321	4.08653	-0.08653	-0.17306	5.76985	0.23015	0.69045	-0.25958	0.11419	0.22303		0.22303	0.71989	1.68332
	66	0.71340	1.68618	2.39957	-0.39957	-0.39957	4.08575	-0.08575	-0.17150	5.77192	0.22808	0.68423	-0.25724	0.11316	0.21903		0.21903	0.71340	1.68618
	67	0.70697	1.68900	2.39597	-0.39597	-0.39597	4.08497	-0.08497	-0.16995	5.77398	0.22602	0.67806	-0.25492	0.11214	0.21510		0.21510	0.70697	1.68900
	68	0.70059	1.69181	2.39240	-0.39240	-0.39240	4.08421	-0.08421	-0.16842	5.77602	0.22398	0.67195	-0.25263	0.11113	0.21124		0.21124	0.70059	1.69181
	69	0.69428	1.69459	2.38886	-0.38886	-0.38886	4.08345	-0.08345	-0.16690	5.77804	0.22196	0.66589	-0.25035	0.11013	0.20745		0.20745	0.69428	1.69459
	70	0.68802	1.69734	2.38536	-0.38536	-0.38536	4.08270	-0.08270	-0.16539	5.78004	0.21996	0.65989	-0.24809	0.10914	0.20372		0.20372	0.68802	1.69734
	71	0.68182	1.70007	2.38188	-0.38188	-0.38188	4.08195	-0.08195	-0.16390	5.78202	0.21798	0.65394	-0.24586	0.10815	0.20007		0.20007	0.68182	1.70007
	72	0.67567	1.70277	2.37844	-0.37844	-0.37844	4.08121	-0.08121	-0.16243	5.78398	0.21602	0.64805	-0.24364	0.10718	0.19648		0.19648	0.67567	1.70277
	73	0.66958	1.70545	2.37503	-0.37503	-0.37503	4.08048	-0.08048	-0.16096	5.78593	0.21407	0.64220	-0.24144	0.10621	0.19295		0.19295	0.66958	1.70545
	74	0.66354	1.70811	2.37165	-0.37165	-0.37165	4.07976	-0.07976	-0.15951	5.78786	0.21214	0.63641	-0.23927	0.10525	0.18949		0.18949	0.66354	1.70811
	75	0.65756	1.71074	2.36830	-0.36830	-0.36830	4.07904	-0.07904	-0.15807	5.78977	0.21023	0.63068	-0.23711	0.10431	0.18609		0.18609	0.65756	1.71074
	76	0.65163	1.71335	2.36498	-0.36498	-0.36498	4.07832	-0.07832	-0.15665	5.79167	0.20833	0.62499	-0.23497	0.10336	0.18275		0.18275	0.65163	1.71335
	77	0.64576	1.71593	2.36169	-0.36169	-0.36169	4.07762	-0.07762	-0.15524	5.79355	0.20645	0.61936	-0.23285	0.10243	0.17947		0.17947	0.64576	1.71593
	78	0.63994	1.71849	2.35843	-0.35843	-0.35843	4.07692	-0.07692	-0.15384	5.79541	0.20459	0.61377	-0.23076	0.10151	0.17624		0.17624	0.63994	1.71849
	79	0.63417	1.72103	2.35520	-0.35520	-0.35520	4.07622	-0.07622	-0.15245	5.79725	0.20275	0.60824	-0.22867	0.10059	0.17308		0.17308	0.63417	1.72103
	80	0.62845	1.72354	2.35199	-0.35199	-0.35199	4.07554	-0.07554	-0.15108	5.79908	0.20092	0.60276	-0.22661	0.09969	0.16998		0.16998	0.62845	1.72354
	81	0.62279	1.72604	2.34882	-0.34882	-0.34882	4.07486	-0.07486	-0.14971	5.80089	0.19911	0.59732	-0.22457	0.09879	0.16692		0.16692	0.62279	1.72604
	82	0.61717	1.72850	2.34568	-0.34568	-0.34568	4.07418	-0.07418	-0.14836	5.80269	0.19731	0.59194	-0.22255	0.09790	0.16393		0.16393	0.61717	1.72850
	83	0.61161	1.73095	2.34256	-0.34256	-0.34256	4.07351	-0.07351	-0.14703	5.80447	0.19553	0.58660	-0.22054	0.09702	0.16099		0.16099	0.61161	1.73095
	84	0.60610	1.73338	2.33947	-0.33947	-0.33947	4.07285	-0.07285	-0.14570	5.80623	0.19377	0.58132	-0.21855	0.09614	0.15810		0.15810	0.60610	1.73338
	85	0.60063	1.73578	2.33641	-0.33641	-0.33641	4.07219	-0.07219	-0.14439	5.80797	0.19203	0.57608	-0.21658	0.09527	0.15526		0.15526	0.60063	1.73578
	86	0.59522	1.73816	2.33338	-0.33338	-0.33338	4.07154	-0.07154	-0.14309	5.80971	0.19029	0.57088	-0.21463	0.09442	0.15247		0.15247	0.59522	1.73816
	87	0.58985	1.74052	2.33037	-0.33037	-0.33037	4.07090	-0.07090	-0.14180	5.81142	0.18858	0.56574	-0.21269	0.09356	0.14974		0.14974	0.58985	1.74052
	88	0.58453	1.74286	2.32740	-0.32740	-0.32740	4.07026	-0.07026	-0.14052	5.81312	0.18688	0.56064	-0.21078	0.09272	0.14705		0.14705	0.58453	1.74286
	89	0.57926	1.74518	2.32445	-0.32445	-0.32445	4.06963	-0.06963	-0.13925	5.81481	0.18519	0.55558	-0.20888	0.09189	0.14441		0.14441	0.57926	1.74518
	90	0.57404	1.74748	2.32152	-0.32152	-0.32152	4.06900	-0.06900	-0.13800	5.81648	0.18352	0.55057	-0.20699	0.09106	0.14182		0.14182	0.57404	1.74748
	91	0.56887	1.74975	2.31862	-0.31862	-0.31862	4.06838	-0.06838	-0.13675	5.81813	0.18187	0.54561	-0.20513	0.09024	0.13927		0.13927	0.56887	1.74975
	92	0.56374	1.75201	2.31575	-0.31575	-0.31575	4.06776	-0.06776	-0.13552	5.81977	0.18023	0.54069	-0.20328	0.08942	0.13677		0.13677	0.56374	1.75201
	93	0.55866	1.75425	2.31290	-0.31290	-0.31290	4.06715	-0.06715	-0.13430	5.82139	0.17861	0.53582	-0.20145	0.08862	0.13432		0.13432	0.55866	1.75425
	94	0.55362	1.75646	2.31008	-0.31008	-0.31008	4.06654	-0.06654	-0.13309	5.82300	0.17700	0.53099	-0.19963	0.08782	0.13191		0.13191	0.55362	1.75646
	95	0.54863	1.75866	2.30729	-0.30729	-0.30729	4.06594	-0.06594	-0.13189	5.82460	0.17540	0.52620	-0.19783	0.08703	0.12954		0.12954	0.54863	1.75866
	96	0.54368	1.76083	2.30452	-0.30452	-0.30452	4.06535	-0.06535	-0.13070	5.82618	0.17382	0.52146	-0.19605	0.08624	0.12721		0.12721	0.54368	1.76083
	97	0.53878	1.76299	2.30177	-0.30177	-0.30177	4.06476	-0.06476	-0.12952	5.82775	0.17225	0.51676	-0.19428	0.08546	0.12493		0.12493	0.53878	1.76299
	98	0.53393	1.76512	2.29905	-0.29905	-0.29905	4.06418	-0.06418	-0.12835	5.82930	0.17070	0.51210	-0.19253	0.08469	0.12269		0.12269	0.53393	1.76512
	99	0.52911	1.76724	2.29636	-0.29636	-0.29636	4.06360	-0.06360	-0.12720	5.83084	0.16916	0.50748	-0.19079	0.08393	0.12049		0.12049	0.52911	1.76724
	100	0.52434	1.76934	2.29368	-0.29368	-0.29368	4.06302	-0.06302	-0.12605	5.83236	0.16764	0.50291	-0.18907	0.08317	0.11832		0.11832	0.52434	1.76934
	101	0.51962	1.77142	2.29104	-0.29104	-0.29104	4.06246	-0.06246	-0.12491	5.83388	0.16612	0.49837	-0.18737	0.08242	0.11620		0.11620	0.51962	1.77142
	102	0.51493	1.77348	2.28841	-0.28841	-0.28841	4.06189	-0.06189	-0.12379	5.83537	0.16463	0.49388	-0.18568	0.08168	0.11411		0.11411	0.51493	1.77348
	103	0.51029	1.77552	2.28581	-0.28581	-0.28581	4.06134	-0.06134	-0.12267	5.83686	0.16314	0.48943	-0.18401	0.08094	0.11207		0.11207	0.51029	1.77552
	104	0.50569	1.77755	2.28324	-0.28324	-0.28324	4.06078	-0.06078	-0.12156	5.83833	0.16167	0.48502	-0.18235	0.08021	0.11006		0.11006	0.50569	1.77755
	105	0.50113	1.77955	2.28068	-0.28068	-0.28068	4.06023	-0.06023	-0.12047	5.83979	0.16021	0.48064	-0.18070	0.07949	0.10808		0.10808	0.50113	1.77955
	106	0.49661	1.78154	2.27815	-0.27815	-0.27815	4.05969	-0.05969	-0.11938	5.84123	0.15877	0.47631	-0.17907	0.07877	0.10614		0.10614	0.49661	1.78154
	107	0.49214	1.78351	2.27565	-0.27565	-0.27565	4.05915	-0.05915	-0.11831	5.84266	0.15734	0.47202	-0.17746	0.07806	0.10424		0.10424	0.49214	1.78351
	108	0.48770	1.78546	2.27316	-0.27316	-0.27316	4.05862	-0.05862	-0.11724	5.84408	0.15592	0.46776	-0.17586	0.07736	0.10236		0.10236	0.48770	1.78546
	109	0.48330	1.78739	2.27070	-0.27070	-0.27070	4.05809	-0.05809	-0.11618	5.84549	0.15451	0.46354	-0.17427	0.07666	0.10053		0.10053	0.48330	1.78739
	110	0.47895	1.78931	2.26826	-0.26826	-0.26826	4.05757	-0.05757	-0.11514	5.84688	0.15312	0.45937	-0.17270	0.07597	0.09872		0.09872	0.47895	1.78931
	111	0.47463	1.79121	2.26584	-0.26584	-0.26584	4.05705	-0.05705	-0.11410	5.84826	0.15174	0.45523	-0.17115	0.07529	0.09695		0.09695	0.47463	1.79121
	112	0.47035	1.79309	2.26344	-0.26344	-0.26344	4.05653	-0.05653	-0.11307	5.84963	0.15037	0.45112	-0.16960	0.07461	0.09521		0.09521	0.47035	1.79309
	113	0.46611	1.79496	2.26107	-0.26107	-0.26107	4.05602	-0.05602	-0.11205	5.85098	0.14902	0.44705	-0.16807	0.07394	0.09350		0.09350	0.46611	1.79496
	114	0.46191	1.79681	2.25871	-0.25871	-0.25871	4.05552	-0.05552	-0.11104	5.85233	0.14767	0.44302	-0.16656	0.07327	0.09182		0.09182	0.46191	1.79681
	115	0.45775	1.79864	2.25638	-0.25638	-0.25638	4.05502	-0.05502	-0.11004	5.85366	0.14634	0.43903	-0.16506	0.07261	0.09018		0.09018	0.45775	1.79864
	116	0.45362	1.80045	2.25407	-0.25407	-0.25407	4.05452	-0.05452	-0.10905	5.85498	0.14502	0.43507	-0.16357	0.07195	0.08856		0.08856	0.45362	1.80045
	117	0.44953	1.80225	2.25178	-0.25178	-0.25178	4.05403	-0.05403	-0.10806	5.85628	0.14372	0.43115	-0.16210	0.07131	0.08697		0.08697	0.44953	1.80225
	118	0.44548	1.80403	2.24951	-0.24951	-0.24951	4.05354	-0.05354	-0.10709	5.85758	0.14242	0.42726	-0.16063	0.07066	0.08541		0.08541	0.44548	1.80403
	119	0.44146	1.80580	2.24726	-0.24726	-0.24726	4.05306	-0.05306	-0.10612	5.85886	0.14114	0.42341	-0.15919	0.07003	0.08387		0.08387	0.44146	1.80580
	120	0.43748	1.80755	2.24503	-0.24503	-0.24503	4.05258	-0.05258	-0.10517	5.86013	0.13987	0.41960	-0.15775	0.06940	0.08237		0.08237	0.43748	1.80755
	121	0.43354	1.80929	2.24282	-0.24282	-0.24282	4.05211	-0.05211	-0.10422	5.86140	0.13860	0.41581	-0.15633	0.06877	0.08089		0.08089	0.43354	1.80929
	122	0.42963	1.81101	2.24063	-0.24063	-0.24063	4.05164	-0.05164	-0.10328	5.86265	0.13735	0.41206	-0.15492	0.06815	0.07944		0.07944	0.42963	1.81101
	123	0.42576	1.81271	2.23847	-0.23847	-0.23847	4.05117	-0.05117	-0.10235	5.86388	0.13612	0.40835	-0.15352	0.06754	0.07801		0.07801	0.42576	1.81271
	124	0.42192	1.81440	2.23632	-0.23632	-0.23632	4.05071	-0.05071	-0.10143	5.86511	0.13489	0.40467	-0.15214	0.06693	0.07661		0.07661	0.42192	1.81440
	125	0.41812	1.81607	2.23419	-0.23419	-0.23419	4.05026	-0.05026	-0.10051	5.86633	0.13367	0.40102	-0.15077	0.06632	0.07524		0.07524	0.41812	1.81607
	126	0.41435	1.81773	2.23207	-0.23207	-0.23207	4.04980	-0.04980	-0.09961	5.86753	0.13247	0.39741	-0.14941	0.06573	0.07389		0.07389	0.41435	1.81773
	127	0.41061	1.81937	2.22998	-0.22998	-0.22998	4.04935	-0.04935	-0.09871	5.86873	0.13127	0.39382	-0.14806	0.06513	0.07256		0.07256	0.41061	1.81937
	128	0.40691	1.82100	2.22791	-0.22791	-0.22791	4.04891	-0.04891	-0.09782	5.86991	0.13009	0.39027	-0.14673	0.06455	0.07126		0.07126	0.40691	1.82100
	129	0.40324	1.82261	2.22585	-0.22585	-0.22585	4.04847	-0.04847	-0.09694	5.87108	0.12892	0.38675	-0.14540	0.06396	0.06998		0.06998	0.40324	1.82261
	130	0.39961	1.82421	2.22382	-0.22382	-0.22382	4.04803	-0.04803	-0.09606	5.87224	0.12776	0.38327	-0.14409	0.06339	0.06872		0.06872	0.39961	1.82421
	131	0.39600	1.82580	2.22180	-0.22180	-0.22180	4.04760	-0.04760	-0.09520	5.87340	0.12660	0.37981	-0.14279	0.06282	0.06749		0.06749	0.39600	1.82580
	132	0.39243	1.82737	2.21980	-0.21980	-0.21980	4.04717	-0.04717	-0.09434	5.87454	0.12546	0.37639	-0.14151	0.06225	0.06628		0.06628	0.39243	1.82737
	133	0.38890	1.82892	2.21782	-0.21782	-0.21782	4.04674	-0.04674	-0.09349	5.87567	0.12433	0.37300	-0.14023	0.06169	0.06509		0.06509	0.38890	1.82892
	134	0.38539	1.83047	2.21586	-0.21586	-0.21586	4.04632	-0.04632	-0.09265	5.87679	0.12321	0.36963	-0.13897	0.06113	0.06392		0.06392	0.38539	1.83047
	135	0.38192	1.83199	2.21391	-0.21391	-0.21391	4.04590	-0.04590	-0.09181	5.87790	0.12210	0.36630	-0.13771	0.06058	0.06277		0.06277	0.38192	1.83199
	136	0.37847	1.83351	2.21198	-0.21198	-0.21198	4.04549	-0.04549	-0.09098	5.87900	0.12100	0.36300	-0.13647	0.06003	0.06165		0.06165	0.37847	1.83351
	137	0.37506	1.83501	2.21007	-0.21007	-0.21007	4.04508	-0.04508	-0.09016	5.88009	0.11991	0.35973	-0.13524	0.05949	0.06054		0.06054	0.37506	1.83501
	138	0.37168	1.83650	2.20818	-0.20818	-0.20818	4.04467	-0.04467	-0.08935	5.88117	0.11883	0.35648	-0.13402	0.05896	0.05945		0.05945	0.37168	1.83650
	139	0.36833	1.83797	2.20630	-0.20630	-0.20630	4.04427	-0.04427	-0.08854	5.88224	0.11776	0.35327	-0.13282	0.05843	0.05839		0.05839	0.36833	1.83797
	140	0.36501	1.83943	2.20444	-0.20444	-0.20444	4.04387	-0.04387	-0.08775	5.88330	0.11670	0.35009	-0.13162	0.05790	0.05734		0.05734	0.36501	1.83943
	141	0.36172	1.84088	2.20260	-0.20260	-0.20260	4.04348	-0.04348	-0.08695	5.88436	0.11564	0.34693	-0.13043	0.05738	0.05631		0.05631	0.36172	1.84088
	142	0.35846	1.84231	2.20077	-0.20077	-0.20077	4.04309	-0.04309	-0.08617	5.88540	0.11460	0.34380	-0.12926	0.05686	0.05530		0.05530	0.35846	1.84231
	143	0.35523	1.84374	2.19896	-0.19896	-0.19896	4.04270	-0.04270	-0.08539	5.88643	0.11357	0.34070	-0.12809	0.05635	0.05431		0.05431	0.35523	1.84374
	144	0.35202	1.84514	2.19717	-0.19717	-0.19717	4.04231	-0.04231	-0.08462	5.88746	0.11254	0.33763	-0.12694	0.05584	0.05333		0.05333	0.35202	1.84514
	145	0.34885	1.84654	2.19539	-0.19539	-0.19539	4.04193	-0.04193	-0.08386	5.88847	0.11153	0.33459	-0.12579	0.05534	0.05237		0.05237	0.34885	1.84654
	146	0.34571	1.84792	2.19363	-0.19363	-0.19363	4.04155	-0.04155	-0.08311	5.88948	0.11052	0.33157	-0.12466	0.05484	0.05143		0.05143	0.34571	1.84792
	147	0.34259	1.84929	2.19188	-0.19188	-0.19188	4.04118	-0.04118	-0.08236	5.89047	0.10953	0.32858	-0.12353	0.05434	0.05051		0.05051	0.34259	1.84929
	148	0.33950	1.85065	2.19015	-0.19015	-0.19015	4.04081	-0.04081	-0.08161	5.89146	0.10854	0.32562	-0.12242	0.05385	0.04960		0.04960	0.33950	1.85065
	149	0.33644	1.85200	2.18844	-0.18844	-0.18844	4.04044	-0.04044	-0.08088	5.89244	0.10756	0.32269	-0.12132	0.05337	0.04871		0.04871	0.33644	1.85200
	150	0.33341	1.85333	2.18674	-0.18674	-0.18674	4.04007	-0.04007	-0.08015	5.89341	0.10659	0.31978	-0.12022	0.05289	0.04784		0.04784	0.33341	1.85333
	151	0.33040	1.85466	2.18506	-0.18506	-0.18506	4.03971	-0.03971	-0.07943	5.89437	0.10563	0.31689	-0.11914	0.05241	0.04698		0.04698	0.33040	1.85466
	152	0.32742	1.85597	2.18339	-0.18339	-0.18339	4.03936	-0.03936	-0.07871	5.89532	0.10468	0.31404	-0.11807	0.05194	0.04614		0.04614	0.32742	1.85597
	153	0.32447	1.85726	2.18174	-0.18174	-0.18174	4.03900	-0.03900	-0.07800	5.89626	0.10374	0.31121	-0.11700	0.05147	0.04531		0.04531	0.32447	1.85726
	154	0.32155	1.85855	2.18010	-0.18010	-0.18010	4.03865	-0.03865	-0.07730	5.89720	0.10280	0.30840	-0.11595	0.05101	0.04450		0.04450	0.32155	1.85855
	155	0.31865	1.85983	2.17847	-0.17847	-0.17847	4.03830	-0.03830	-0.07660	5.89813	0.10187	0.30562	-0.11490	0.05055	0.04370		0.04370	0.31865	1.85983
	156	0.31578	1.86109	2.17687	-0.17687	-0.17687	4.03796	-0.03796	-0.07591	5.89904	0.10096	0.30287	-0.11387	0.05009	0.04291		0.04291	0.31578	1.86109
	157	0.31293	1.86234	2.17527	-0.17527	-0.17527	4.03761	-0.03761	-0.07523	5.89995	0.10005	0.30014	-0.11284	0.04964	0.04214		0.04214	0.31293	1.86234
	158	0.31011	1.86358	2.17369	-0.17369	-0.17369	4.03727	-0.03727	-0.07455	5.90086	0.09914	0.29743	-0.11182	0.04919	0.04139		0.04139	0.31011	1.86358
	159	0.30731	1.86481	2.17213	-0.17213	-0.17213	4.03694	-0.03694	-0.07388	5.90175	0.09825	0.29475	-0.11081	0.04875	0.04064		0.04064	0.30731	1.86481
	160	0.30454	1.86603	2.17057	-0.17057	-0.17057	4.03660	-0.03660	-0.07321	5.90264	0.09736	0.29209	-0.10981	0.04831	0.03991		0.03991	0.30454	1.86603
	161	0.30180	1.86724	2.16904	-0.16904	-0.16904	4.03627	-0.03627	-0.07255	5.90351	0.09649	0.28946	-0.10882	0.04787	0.03920		0.03920	0.30180	1.86724
	162	0.29908	1.86844	2.16751	-0.16751	-0.16751	4.03595	-0.03595	-0.07190	5.90438	0.09562	0.28685	-0.10784	0.04744	0.03850		0.03850	0.29908	1.86844
	163	0.29638	1.86962	2.16600	-0.16600	-0.16600	4.03562	-0.03562	-0.07125	5.90525	0.09475	0.28426	-0.10687	0.04701	0.03780		0.03780	0.29638	1.86962
	164	0.29371	1.87080	2.16451	-0.16451	-0.16451	4.03530	-0.03530	-0.07061	5.90610	0.09390	0.28170	-0.10591	0.04659	0.03713		0.03713	0.29371	1.87080
	165	0.29106	1.87196	2.16302	-0.16302	-0.16302	4.03498	-0.03498	-0.06997	5.90695	0.09305	0.27916	-0.10495	0.04617	0.03646		0.03646	0.29106	1.87196
	166	0.28844	1.87312	2.16155	-0.16155	-0.16155	4.03467	-0.03467	-0.06934	5.90779	0.09221	0.27664	-0.10401	0.04575	0.03580		0.03580	0.28844	1.87312
	167	0.28584	1.87426	2.16010	-0.16010	-0.16010	4.03436	-0.03436	-0.06871	5.90862	0.09138	0.27415	-0.10307	0.04534	0.03516		0.03516	0.28584	1.87426
	168	0.28326	1.87539	2.15865	-0.15865	-0.15865	4.03405	-0.03405	-0.06809	5.90944	0.09056	0.27168	-0.10214	0.04493	0.03453		0.03453	0.28326	1.87539
	169	0.28071	1.87652	2.15722	-0.15722	-0.15722	4.03374	-0.03374	-0.06748	5.91026	0.08974	0.26923	-0.10122	0.04453	0.03391		0.03391	0.28071	1.87652
	170	0.27818	1.87763	2.15581	-0.15581	-0.15581	4.03344	-0.03344	-0.06687	5.91107	0.08893	0.26680	-0.10031	0.04413	0.03330		0.03330	0.27818	1.87763
	171	0.27567	1.87873	2.15440	-0.15440	-0.15440	4.03313	-0.03313	-0.06627	5.91187	0.08813	0.26440	-0.09940	0.04373	0.03271		0.03271	0.27567	1.87873
	172	0.27318	1.87983	2.15301	-0.15301	-0.15301	4.03284	-0.03284	-0.06567	5.91266	0.08734	0.26201	-0.09851	0.04333	0.03212		0.03212	0.27318	1.87983
	173	0.27072	1.88091	2.15163	-0.15163	-0.15163	4.03254	-0.03254	-0.06508	5.91345	0.08655	0.25965	-0.09762	0.04294	0.03154		0.03154	0.27072	1.88091
	174	0.26828	1.88198	2.15026	-0.15026	-0.15026	4.03225	-0.03225	-0.06449	5.91423	0.08577	0.25731	-0.09674	0.04256	0.03098		0.03098	0.26828	1.88198
	175	0.26586	1.88305	2.14891	-0.14891	-0.14891	4.03196	-0.03196	-0.06391	5.91500	0.08500	0.25499	-0.09587	0.04217	0.03042		0.03042	0.26586	1.88305
	176	0.26346	1.88410	2.14757	-0.14757	-0.14757	4.03167	-0.03167	-0.06334	5.91577	0.08423	0.25269	-0.09500	0.04179	0.02987		0.02987	0.26346	1.88410
	177	0.26109	1.88515	2.14624	-0.14624	-0.14624	4.03138	-0.03138	-0.06276	5.91653	0.08347	0.25042	-0.09415	0.04142	0.02934		0.02934	0.26109	1.88515
	178	0.25874	1.88618	2.14492	-0.14492	-0.14492	4.03110	-0.03110	-0.06220	5.91728	0.08272	0.24816	-0.09330	0.04104	0.02881		0.02881	0.25874	1.88618
	179	0.25640	1.88721	2.14361	-0.14361	-0.14361	4.03082	-0.03082	-0.06164	5.91803	0.08197	0.24592	-0.09246	0.04067	0.02829		0.02829	0.25640	1.88721
	180	0.25409	1.88822	2.14232	-0.14232	-0.14232	4.03054	-0.03054	-0.06108	5.91877	0.08123	0.24370	-0.09162	0.04031	0.02779		0.02779	0.25409	1.88822
	181	0.25180	1.88923	2.14103	-0.14103	-0.14103	4.03027	-0.03027	-0.06053	5.91950	0.08050	0.24151	-0.09080	0.03994	0.02729		0.02729	0.25180	1.88923
	182	0.24953	1.89023	2.13976	-0.13976	-0.13976	4.02999	-0.02999	-0.05999	5.92022	0.07978	0.23933	-0.08998	0.03958	0.02680		0.02680	0.24953	1.89023
	183	0.24728	1.89122	2.13850	-0.13850	-0.13850	4.02972	-0.02972	-0.05944	5.92094	0.07906	0.23717	-0.08917	0.03922	0.02632		0.02632	0.24728	1.89122
	184	0.24505	1.89220	2.13725	-0.13725	-0.13725	4.02945	-0.02945	-0.05891	5.92166	0.07834	0.23503	-0.08836	0.03887	0.02584		0.02584	0.24505	1.89220
	185	0.24284	1.89317	2.13602	-0.13602	-0.13602	4.02919	-0.02919	-0.05838	5.92236	0.07764	0.23292	-0.08757	0.03852	0.02538		0.02538	0.24284	1.89317
	186	0.24065	1.89414	2.13479	-0.13479	-0.13479	4.02893	-0.02893	-0.05785	5.92306	0.07694	0.23082	-0.08678	0.03817	0.02492		0.02492	0.24065	1.89414
	187	0.23849	1.89509	2.13358	-0.13358	-0.13358	4.02867	-0.02867	-0.05733	5.92375	0.07625	0.22874	-0.08600	0.03783	0.02448		0.02448	0.23849	1.89509
	188	0.23634	1.89604	2.13237	-0.13237	-0.13237	4.02841	-0.02841	-0.05681	5.92444	0.07556	0.22667	-0.08522	0.03749	0.02404		0.02404	0.23634	1.89604
	189	0.23421	1.89697	2.13118	-0.13118	-0.13118	4.02815	-0.02815	-0.05630	5.92512	0.07488	0.22463	-0.08445	0.03715	0.02361		0.02361	0.23421	1.89697
	190	0.23209	1.89790	2.13000	-0.13000	-0.13000	4.02790	-0.02790	-0.05579	5.92580	0.07420	0.22260	-0.08369	0.03682	0.02318		0.02318	0.23209	1.89790
	191	0.23000	1.89882	2.12882	-0.12882	-0.12882	4.02765	-0.02765	-0.05529	5.92647	0.07353	0.22060	-0.08294	0.03648	0.02277		0.02277	0.23000	1.89882
	192	0.22793	1.89973	2.12766	-0.12766	-0.12766	4.02740	-0.02740	-0.05479	5.92713	0.07287	0.21861	-0.08219	0.03615	0.02236		0.02236	0.22793	1.89973
	193	0.22587	1.90064	2.12651	-0.12651	-0.12651	4.02715	-0.02715	-0.05430	5.92779	0.07221	0.21664	-0.08145	0.03583	0.02196		0.02196	0.22587	1.90064
	194	0.22384	1.90153	2.12537	-0.12537	-0.12537	4.02690	-0.02690	-0.05381	5.92844	0.07156	0.21469	-0.08071	0.03551	0.02156		0.02156	0.22384	1.90153
	195	0.22182	1.90242	2.12424	-0.12424	-0.12424	4.02666	-0.02666	-0.05332	5.92908	0.07092	0.21275	-0.07999	0.03519	0.02118		0.02118	0.22182	1.90242
	196	0.21982	1.90330	2.12312	-0.12312	-0.12312	4.02642	-0.02642	-0.05284	5.92972	0.07028	0.21083	-0.07926	0.03487	0.02080		0.02080	0.21982	1.90330
	197	0.21784	1.90417	2.12201	-0.12201	-0.12201	4.02618	-0.02618	-0.05237	5.93036	0.06964	0.20893	-0.07855	0.03455	0.02042		0.02042	0.21784	1.90417
	198	0.21587	1.90504	2.12091	-0.12091	-0.12091	4.02595	-0.02595	-0.05189	5.93098	0.06902	0.20705	-0.07784	0.03424	0.02006		0.02006	0.21587	1.90504
	199	0.21393	1.90589	2.11982	-0.11982	-0.11982	4.02571	-0.02571	-0.05143	5.93161	0.06839	0.20518	-0.07714	0.03393	0.01970		0.01970	0.21393	1.90589
	200	0.21200	1.90674	2.11874	-0.11874	-0.11874	4.02548	-0.02548	-0.05096	5.93222	0.06778	0.20333	-0.07644	0.03363	0.01934		0.01934	0.21200	1.90674
	201	0.21009	1.90758	2.11767	-0.11767	-0.11767	4.02525	-0.02525	-0.05050	5.93283	0.06717	0.20150	-0.07576	0.03333	0.01900		0.01900	0.21009	1.90758
	202	0.20819	1.90841	2.11661	-0.11661	-0.11661	4.02502	-0.02502	-0.05005	5.93344	0.06656	0.19968	-0.07507	0.03302	0.01865		0.01865	0.20819	1.90841
	203	0.20632	1.90924	2.11556	-0.11556	-0.11556	4.02480	-0.02480	-0.04960	5.93404	0.06596	0.19788	-0.07440	0.03273	0.01832		0.01832	0.20632	1.90924
	204	0.20446	1.91006	2.11452	-0.11452	-0.11452	4.02458	-0.02458	-0.04915	5.93463	0.06537	0.19610	-0.07373	0.03243	0.01799		0.01799	0.20446	1.91006
	205	0.20261	1.91087	2.11348	-0.11348	-0.11348	4.02435	-0.02435	-0.04871	5.93522	0.06478	0.19433	-0.07306	0.03214	0.01767		0.01767	0.20261	1.91087
	206	0.20079	1.91167	2.11246	-0.11246	-0.11246	4.02413	-0.02413	-0.04827	5.93581	0.06419	0.19258	-0.07240	0.03185	0.01735		0.01735	0.20079	1.91167
	207	0.19898	1.91247	2.11145	-0.11145	-0.11145	4.02392	-0.02392	-0.04783	5.93639	0.06361	0.19084	-0.07175	0.03156	0.01704		0.01704	0.19898	1.91247
	208	0.19718	1.91326	2.11044	-0.11044	-0.11044	4.02370	-0.02370	-0.04740	5.93696	0.06304	0.18912	-0.07110	0.03128	0.01673		0.01673	0.19718	1.91326
	209	0.19541	1.91404	2.10945	-0.10945	-0.10945	4.02349	-0.02349	-0.04697	5.93753	0.06247	0.18742	-0.07046	0.03100	0.01643		0.01643	0.19541	1.91404
	210	0.19365	1.91482	2.10846	-0.10846	-0.10846	4.02328	-0.02328	-0.04655	5.93809	0.06191	0.18573	-0.06983	0.03072	0.01614		0.01614	0.19365	1.91482
	211	0.19190	1.91558	2.10748	-0.10748	-0.10748	4.02307	-0.02307	-0.04613	5.93865	0.06135	0.18405	-0.06920	0.03044	0.01585		0.01585	0.19190	1.91558
	212	0.19017	1.91634	2.10651	-0.10651	-0.10651	4.02286	-0.02286	-0.04572	5.93920	0.06080	0.18239	-0.06857	0.03017	0.01556		0.01556	0.19017	1.91634
	213	0.18846	1.91710	2.10555	-0.10555	-0.10555	4.02265	-0.02265	-0.04530	5.93975	0.06025	0.18075	-0.06796	0.02989	0.01528		0.01528	0.18846	1.91710
	214	0.18676	1.91785	2.10460	-0.10460	-0.10460	4.02245	-0.02245	-0.04490	5.94029	0.05971	0.17912	-0.06734	0.02962	0.01501		0.01501	0.18676	1.91785
	215	0.18507	1.91859	2.10366	-0.10366	-0.10366	4.02225	-0.02225	-0.04449	5.94083	0.05917	0.17751	-0.06674	0.02936	0.01474		0.01474	0.18507	1.91859
	216	0.18340	1.91932	2.10272	-0.10272	-0.10272	4.02204	-0.02204	-0.04409	5.94136	0.05864	0.17591	-0.06613	0.02909	0.01448		0.01448	0.18340	1.91932
	217	0.18175	1.92005	2.10180	-0.10180	-0.10180	4.02185	-0.02185	-0.04369	5.94189	0.05811	0.17432	-0.06554	0.02883	0.01422		0.01422	0.18175	1.92005
	218	0.18011	1.92077	2.10088	-0.10088	-0.10088	4.02165	-0.02165	-0.04330	5.94242	0.05758	0.17275	-0.06495	0.02857	0.01396		0.01396	0.18011	1.92077
	219	0.17849	1.92148	2.09997	-0.09997	-0.09997	4.02145	-0.02145	-0.04291	5.94294	0.05706	0.17119	-0.06436	0.02831	0.01371		0.01371	0.17849	1.92148
	220	0.17688	1.92219	2.09907	-0.09907	-0.09907	4.02126	-0.02126	-0.04252	5.94345	0.05655	0.16965	-0.06378	0.02806	0.01346		0.01346	0.17688	1.92219
	221	0.17529	1.92289	2.09818	-0.09818	-0.09818	4.02107	-0.02107	-0.04214	5.94396	0.05604	0.16812	-0.06321	0.02780	0.01322		0.01322	0.17529	1.92289
	222	0.17371	1.92359	2.09729	-0.09729	-0.09729	4.02088	-0.02088	-0.04176	5.94447	0.05553	0.16660	-0.06264	0.02755	0.01299		0.01299	0.17371	1.92359
	223	0.17214	1.92428	2.09642	-0.09642	-0.09642	4.02069	-0.02069	-0.04138	5.94497	0.05503	0.16510	-0.06207	0.02731	0.01275		0.01275	0.17214	1.92428
	224	0.17059	1.92496	2.09555	-0.09555	-0.09555	4.02050	-0.02050	-0.04101	5.94546	0.05454	0.16361	-0.06151	0.02706	0.01252		0.01252	0.17059	1.92496
	225	0.16905	1.92563	2.09468	-0.09468	-0.09468	4.02032	-0.02032	-0.04064	5.94595	0.05405	0.16214	-0.06096	0.02682	0.01230		0.01230	0.16905	1.92563
	226	0.16753	1.92630	2.09383	-0.09383	-0.09383	4.02014	-0.02014	-0.04027	5.94644	0.05356	0.16068	-0.06041	0.02657	0.01208		0.01208	0.16753	1.92630
	227	0.16602	1.92697	2.09299	-0.09299	-0.09299	4.01995	-0.01995	-0.03991	5.94692	0.05308	0.15923	-0.05986	0.02633	0.01186		0.01186	0.16602	1.92697
	228	0.16452	1.92763	2.09215	-0.09215	-0.09215	4.01977	-0.01977	-0.03955	5.94740	0.05260	0.15779	-0.05932	0.02610	0.01165		0.01165	0.16452	1.92763
	229	0.16304	1.92828	2.09132	-0.09132	-0.09132	4.01960	-0.01960	-0.03919	5.94788	0.05212	0.15637	-0.05879	0.02586	0.01144		0.01144	0.16304	1.92828
	230	0.16157	1.92893	2.09049	-0.09049	-0.09049	4.01942	-0.01942	-0.03884	5.94835	0.05165	0.15496	-0.05826	0.02563	0.01123		0.01123	0.16157	1.92893
	231	0.16011	1.92957	2.08968	-0.08968	-0.08968	4.01924	-0.01924	-0.03849	5.94881	0.05119	0.15356	-0.05773	0.02540	0.01103		0.01103	0.16011	1.92957
	232	0.15867	1.93020	2.08887	-0.08887	-0.08887	4.01907	-0.01907	-0.03814	5.94927	0.05073	0.15218	-0.05721	0.02517	0.01083		0.01083	0.15867	1.93020
	233	0.15724	1.93083	2.08807	-0.08807	-0.08807	4.01890	-0.01890	-0.03780	5.94973	0.05027	0.15081	-0.05670	0.02494	0.01064		0.01064	0.15724	1.93083
	234	0.15582	1.93146	2.08727	-0.08727	-0.08727	4.01873	-0.01873	-0.03746	5.95018	0.04982	0.14945	-0.05619	0.02472	0.01045		0.01045	0.15582	1.93146
	235	0.15441	1.93207	2.08649	-0.08649	-0.08649	4.01856	-0.01856	-0.03712	5.95063	0.04937	0.14810	-0.05568	0.02449	0.01026		0.01026	0.15441	1.93207
	236	0.15302	1.93269	2.08571	-0.08571	-0.08571	4.01839	-0.01839	-0.03679	5.95108	0.04892	0.14677	-0.05518	0.02427	0.01008		0.01008	0.15302	1.93269
	237	0.15164	1.93329	2.08493	-0.08493	-0.08493	4.01823	-0.01823	-0.03645	5.95152	0.04848	0.14544	-0.05468	0.02405	0.00990		0.00990	0.15164	1.93329
	238	0.15028	1.93389	2.08417	-0.08417	-0.08417	4.01806	-0.01806	-0.03613	5.95196	0.04804	0.14413	-0.05419	0.02384	0.00972		0.00972	0.15028	1.93389
	239	0.14892	1.93449	2.08341	-0.08341	-0.08341	4.01790	-0.01790	-0.03580	5.95239	0.04761	0.14283	-0.05370	0.02362	0.00954		0.00954	0.14892	1.93449
	240	0.14758	1.93508	2.08266	-0.08266	-0.08266	4.01774	-0.01774	-0.03548	5.95282	0.04718	0.14154	-0.05322	0.02341	0.00937		0.00937	0.14758	1.93508
	241	0.14625	1.93567	2.08191	-0.08191	-0.08191	4.01758	-0.01758	-0.03516	5.95324	0.04676	0.14027	-0.05274	0.02320	0.00920		0.00920	0.14625	1.93567
	242	0.14493	1.93625	2.08117	-0.08117	-0.08117	4.01742	-0.01742	-0.03484	5.95367	0.04633	0.13900	-0.05226	0.02299	0.00904		0.00904	0.14493	1.93625
	243	0.14362	1.93682	2.08044	-0.08044	-0.08044	4.01726	-0.01726	-0.03453	5.95408	0.04592	0.13775	-0.05179	0.02278	0.00888		0.00888	0.14362	1.93682
	244	0.14233	1.93739	2.07972	-0.07972	-0.07972	4.01711	-0.01711	-0.03421	5.95450	0.04550	0.13651	-0.05132	0.02258	0.00872		0.00872	0.14233	1.93739
	245	0.14105	1.93795	2.07900	-0.07900	-0.07900	4.01695	-0.01695	-0.03391	5.95491	0.04509	0.13528	-0.05086	0.02237	0.00856		0.00856	0.14105	1.93795
	246	0.13977	1.93851	2.07829	-0.07829	-0.07829	4.01680	-0.01680	-0.03360	5.95531	0.04469	0.13406	-0.05040	0.02217	0.00841		0.00841	0.13977	1.93851
	247	0.13851	1.93907	2.07758	-0.07758	-0.07758	4.01665	-0.01665	-0.03330	5.95572	0.04428	0.13285	-0.04995	0.02197	0.00826		0.00826	0.13851	1.93907
	248	0.13727	1.93962	2.07688	-0.07688	-0.07688	4.01650	-0.01650	-0.03300	5.95612	0.04388	0.13165	-0.04950	0.02177	0.00811		0.00811	0.13727	1.93962
	249	0.13603	1.94016	2.07619	-0.07619	-0.07619	4.01635	-0.01635	-0.03270	5.95651	0.04349	0.13047	-0.04905	0.02158	0.00796		0.00796	0.13603	1.94016
	250	0.13480	1.94070	2.07550	-0.07550	-0.07550	4.01620	-0.01620	-0.03241	5.95690	0.04310	0.12929	-0.04861	0.02138	0.00782		0.00782	0.13480	1.94070
	251	0.13359	1.94124	2.07482	-0.07482	-0.07482	4.01606	-0.01606	-0.03211	5.95729	0.04271	0.12812	-0.04817	0.02119	0.00768		0.00768	0.13359	1.94124
	252	0.13238	1.94176	2.07415	-0.07415	-0.07415	4.01591	-0.01591	-0.03182	5.95768	0.04232	0.12697	-0.04774	0.02100	0.00754		0.00754	0.13238	1.94176
	253	0.13119	1.94229	2.07348	-0.07348	-0.07348	4.01577	-0.01577	-0.03154	5.95806	0.04194	0.12583	-0.04731	0.02081	0.00741		0.00741	0.13119	1.94229
	254	0.13001	1.94281	2.07282	-0.07282	-0.07282	4.01563	-0.01563	-0.03125	5.95844	0.04156	0.12469	-0.04688	0.02062	0.00727		0.00727	0.13001	1.94281
	255	0.12883	1.94333	2.07216	-0.07216	-0.07216	4.01549	-0.01549	-0.03097	5.95881	0.04119	0.12357	-0.04646	0.02044	0.00714		0.00714	0.12883	1.94333
	256	0.12767	1.94384	2.07151	-0.07151	-0.07151	4.01535	-0.01535	-0.03069	5.95918	0.04082	0.12245	-0.04604	0.02025	0.00702		0.00702	0.12767	1.94384
	257	0.12652	1.94434	2.07086	-0.07086	-0.07086	4.01521	-0.01521	-0.03041	5.95955	0.04045	0.12135	-0.04562	0.02007	0.00689		0.00689	0.12652	1.94434
	258	0.12538	1.94484	2.07023	-0.07023	-0.07023	4.01507	-0.01507	-0.03014	5.95991	0.04009	0.12026	-0.04521	0.01989	0.00677		0.00677	0.12538	1.94484
	259	0.12425	1.94534	2.06959	-0.06959	-0.06959	4.01493	-0.01493	-0.02987	5.96028	0.03972	0.11917	-0.04480	0.01971	0.00664		0.00664	0.12425	1.94534
	260	0.12313	1.94583	2.06897	-0.06897	-0.06897	4.01480	-0.01480	-0.02960	5.96063	0.03937	0.11810	-0.04440	0.01953	0.00652		0.00652	0.12313	1.94583
	261	0.12202	1.94632	2.06834	-0.06834	-0.06834	4.01467	-0.01467	-0.02933	5.96099	0.03901	0.11703	-0.04400	0.01936	0.00641		0.00641	0.12202	1.94632
	262	0.12092	1.94681	2.06773	-0.06773	-0.06773	4.01453	-0.01453	-0.02907	5.96134	0.03866	0.11598	-0.04360	0.01918	0.00629		0.00629	0.12092	1.94681
	263	0.11983	1.94729	2.06712	-0.06712	-0.06712	4.01440	-0.01440	-0.02881	5.96169	0.03831	0.11493	-0.04321	0.01901	0.00618		0.00618	0.11983	1.94729
	264	0.11875	1.94776	2.06651	-0.06651	-0.06651	4.01427	-0.01427	-0.02855	5.96203	0.03797	0.11390	-0.04282	0.01884	0.00607		0.00607	0.11875	1.94776
	265	0.11768	1.94823	2.06591	-0.06591	-0.06591	4.01414	-0.01414	-0.02829	5.96238	0.03762	0.11287	-0.04243	0.01867	0.00596		0.00596	0.11768	1.94823
	266	0.11662	1.94870	2.06532	-0.06532	-0.06532	4.01402	-0.01402	-0.02803	5.96272	0.03728	0.11185	-0.04205	0.01850	0.00585		0.00585	0.11662	1.94870
	267	0.11557	1.94916	2.06473	-0.06473	-0.06473	4.01389	-0.01389	-0.02778	5.96305	0.03695	0.11084	-0.04167	0.01833	0.00575		0.00575	0.11557	1.94916
	268	0.11453	1.94962	2.06415	-0.06415	-0.06415	4.01377	-0.01377	-0.02753	5.96339	0.03661	0.10984	-0.04130	0.01817	0.00564		0.00564	0.11453	1.94962
	269	0.11349	1.95007	2.06357	-0.06357	-0.06357	4.01364	-0.01364	-0.02728	5.96372	0.03628	0.10885	-0.04092	0.01800	0.00554		0.00554	0.11349	1.95007
	270	0.11247	1.95052	2.06299	-0.06299	-0.06299	4.01352	-0.01352	-0.02704	5.96404	0.03596	0.10787	-0.04056	0.01784	0.00544		0.00544	0.11247	1.95052
	271	0.11146	1.95097	2.06243	-0.06243	-0.06243	4.01340	-0.01340	-0.02679	5.96437	0.03563	0.10690	-0.04019	0.01768	0.00535		0.00535	0.11146	1.95097
	272	0.11045	1.95141	2.06186	-0.06186	-0.06186	4.01328	-0.01328	-0.02655	5.96469	0.03531	0.10594	-0.03983	0.01752	0.00525		0.00525	0.11045	1.95141
	273	0.10946	1.95185	2.06131	-0.06131	-0.06131	4.01316	-0.01316	-0.02631	5.96501	0.03499	0.10498	-0.03947	0.01736	0.00516		0.00516	0.10946	1.95185
	274	0.10847	1.95228	2.06075	-0.06075	-0.06075	4.01304	-0.01304	-0.02608	5.96532	0.03468	0.10403	-0.03911	0.01721	0.00506		0.00506	0.10847	1.95228
	275	0.10749	1.95271	2.06021	-0.06021	-0.06021	4.01292	-0.01292	-0.02584	5.96563	0.03437	0.10310	-0.03876	0.01705	0.00497		0.00497	0.10749	1.95271
	276	0.10652	1.95314	2.05966	-0.05966	-0.05966	4.01280	-0.01280	-0.02561	5.96594	0.03406	0.10217	-0.03841	0.01690	0.00488		0.00488	0.10652	1.95314
	277	0.10556	1.95356	2.05913	-0.05913	-0.05913	4.01269	-0.01269	-0.02538	5.96625	0.03375	0.10125	-0.03806	0.01674	0.00480		0.00480	0.10556	1.95356
	278	0.10461	1.95398	2.05859	-0.05859	-0.05859	4.01257	-0.01257	-0.02515	5.96656	0.03344	0.10033	-0.03772	0.01659	0.00471		0.00471	0.10461	1.95398
	279	0.10367	1.95440	2.05806	-0.05806	-0.05806	4.01246	-0.01246	-0.02492	5.96686	0.03314	0.09943	-0.03738	0.01644	0.00463		0.00463	0.10367	1.95440
	280	0.10273	1.95481	2.05754	-0.05754	-0.05754	4.01235	-0.01235	-0.02470	5.96716	0.03284	0.09853	-0.03704	0.01630	0.00454		0.00454	0.10273	1.95481
	281	0.10181	1.95521	2.05702	-0.05702	-0.05702	4.01224	-0.01224	-0.02447	5.96745	0.03255	0.09764	-0.03671	0.01615	0.00446		0.00446	0.10181	1.95521
	282	0.10089	1.95562	2.05651	-0.05651	-0.05651	4.01213	-0.01213	-0.02425	5.96775	0.03225	0.09676	-0.03638	0.01600	0.00438		0.00438	0.10089	1.95562
	283	0.09998	1.95602	2.05600	-0.05600	-0.05600	4.01202	-0.01202	-0.02403	5.96804	0.03196	0.09589	-0.03605	0.01586	0.00430		0.00430	0.09998	1.95602
	284	0.09908	1.95642	2.05549	-0.05549	-0.05549	4.01191	-0.01191	-0.02382	5.96832	0.03168	0.09503	-0.03573	0.01572	0.00422		0.00422	0.09908	1.95642
	285	0.09819	1.95681	2.05499	-0.05499	-0.05499	4.01180	-0.01180	-0.02360	5.96861	0.03139	0.09417	-0.03540	0.01557	0.00415		0.00415	0.09819	1.95681
	286	0.09730	1.95720	2.05450	-0.05450	-0.05450	4.01170	-0.01170	-0.02339	5.96889	0.03111	0.09332	-0.03509	0.01543	0.00407		0.00407	0.09730	1.95720
	287	0.09642	1.95758	2.05401	-0.05401	-0.05401	4.01159	-0.01159	-0.02318	5.96917	0.03083	0.09248	-0.03477	0.01530	0.00400		0.00400	0.09642	1.95758
	288	0.09555	1.95797	2.05352	-0.05352	-0.05352	4.01149	-0.01149	-0.02297	5.96945	0.03055	0.09165	-0.03446	0.01516	0.00393		0.00393	0.09555	1.95797
	289	0.09469	1.95834	2.05304	-0.05304	-0.05304	4.01138	-0.01138	-0.02276	5.96973	0.03027	0.09082	-0.03415	0.01502	0.00386		0.00386	0.09469	1.95834
	290	0.09384	1.95872	2.05256	-0.05256	-0.05256	4.01128	-0.01128	-0.02256	5.97000	0.03000	0.09000	-0.03384	0.01489	0.00379		0.00379	0.09384	1.95872
	291	0.09299	1.95909	2.05209	-0.05209	-0.05209	4.01118	-0.01118	-0.02235	5.97027	0.02973	0.08919	-0.03353	0.01475	0.00372		0.00372	0.09299	1.95909
	292	0.09215	1.95946	2.05162	-0.05162	-0.05162	4.01108	-0.01108	-0.02215	5.97054	0.02946	0.08839	-0.03323	0.01462	0.00365		0.00365	0.09215	1.95946
	293	0.09132	1.95983	2.05115	-0.05115	-0.05115	4.01098	-0.01098	-0.02195	5.97080	0.02920	0.08759	-0.03293	0.01449	0.00359		0.00359	0.09132	1.95983
	294	0.09050	1.96019	2.05069	-0.05069	-0.05069	4.01088	-0.01088	-0.02176	5.97107	0.02893	0.08680	-0.03263	0.01436	0.00352		0.00352	0.09050	1.96019
	295	0.08968	1.96055	2.05023	-0.05023	-0.05023	4.01078	-0.01078	-0.02156	5.97133	0.02867	0.08602	-0.03234	0.01423	0.00346		0.00346	0.08968	1.96055
	296	0.08888	1.96090	2.04978	-0.04978	-0.04978	4.01068	-0.01068	-0.02137	5.97159	0.02841	0.08524	-0.03205	0.01410	0.00340		0.00340	0.08888	1.96090
	297	0.08808	1.96126	2.04933	-0.04933	-0.04933	4.01059	-0.01059	-0.02117	5.97184	0.02816	0.08447	-0.03176	0.01397	0.00334		0.00334	0.08808	1.96126
	298	0.08728	1.96160	2.04889	-0.04889	-0.04889	4.01049	-0.01049	-0.02098	5.97210	0.02790	0.08371	-0.03147	0.01384	0.00328		0.00328	0.08728	1.96160
	299	0.08649	1.96195	2.04845	-0.04845	-0.04845	4.01040	-0.01040	-0.02079	5.97235	0.02765	0.08296	-0.03119	0.01372	0.00322		0.00322	0.08649	1.96195
	300	0.08571	1.96229	2.04801	-0.04801	-0.04801	4.01030	-0.01030	-0.02061	5.97260	0.02740	0.08221	-0.03091	0.01360	0.00316		0.00316	0.08571	1.96229
	301	0.08494	1.96263	2.04758	-0.04758	-0.04758	4.01021	-0.01021	-0.02042	5.97284	0.02716	0.08147	-0.03063	0.01347	0.00311		0.00311	0.08494	1.96263
	302	0.08418	1.96297	2.04715	-0.04715	-0.04715	4.01012	-0.01012	-0.02024	5.97309	0.02691	0.08073	-0.03035	0.01335	0.00305		0.00305	0.08418	1.96297
	303	0.08342	1.96330	2.04672	-0.04672	-0.04672	4.01003	-0.01003	-0.02005	5.97333	0.02667	0.08001	-0.03008	0.01323	0.00299		0.00299	0.08342	1.96330
	304	0.08267	1.96364	2.04630	-0.04630	-0.04630	4.00994	-0.00994	-0.01987	5.97357	0.02643	0.07929	-0.02981	0.01311	0.00294		0.00294	0.08267	1.96364
	305	0.08192	1.96396	2.04588	-0.04588	-0.04588	4.00985	-0.00985	-0.01969	5.97381	0.02619	0.07857	-0.02954	0.01299	0.00289		0.00289	0.08192	1.96396
	306	0.08118	1.96429	2.04547	-0.04547	-0.04547	4.00976	-0.00976	-0.01952	5.97405	0.02595	0.07786	-0.02927	0.01288	0.00284		0.00284	0.08118	1.96429
	307	0.08045	1.96461	2.04506	-0.04506	-0.04506	4.00967	-0.00967	-0.01934	5.97428	0.02572	0.07716	-0.02901	0.01276	0.00279		0.00279	0.08045	1.96461
	308	0.07972	1.96493	2.04465	-0.04465	-0.04465	4.00958	-0.00958	-0.01917	5.97451	0.02549	0.07647	-0.02875	0.01265	0.00274		0.00274	0.07972	1.96493
	309	0.07901	1.96525	2.04425	-0.04425	-0.04425	4.00950	-0.00950	-0.01899	5.97474	0.02526	0.07578	-0.02849	0.01253	0.00269		0.00269	0.07901	1.96525
	310	0.07829	1.96556	2.04385	-0.04385	-0.04385	4.00941	-0.00941	-0.01882	5.97497	0.02503	0.07509	-0.02823	0.01242	0.00264		0.00264	0.07829	1.96556
	311	0.07759	1.96587	2.04346	-0.04346	-0.04346	4.00933	-0.00933	-0.01865	5.97519	0.02481	0.07442	-0.02798	0.01231	0.00259		0.00259	0.07759	1.96587
	312	0.07689	1.96618	2.04307	-0.04307	-0.04307	4.00924	-0.00924	-0.01848	5.97542	0.02458	0.07374	-0.02773	0.01220	0.00254		0.00254	0.07689	1.96618
	313	0.07620	1.96648	2.04268	-0.04268	-0.04268	4.00916	-0.00916	-0.01832	5.97564	0.02436	0.07308	-0.02748	0.01209	0.00250		0.00250	0.07620	1.96648
	314	0.07551	1.96678	2.04229	-0.04229	-0.04229	4.00908	-0.00908	-0.01815	5.97586	0.02414	0.07242	-0.02723	0.01198	0.00245		0.00245	0.07551	1.96678
	315	0.07483	1.96708	2.04191	-0.04191	-0.04191	4.00899	-0.00899	-0.01799	5.97608	0.02392	0.07177	-0.02698	0.01187	0.00241		0.00241	0.07483	1.96708
	316	0.07415	1.96738	2.04153	-0.04153	-0.04153	4.00891	-0.00891	-0.01783	5.97629	0.02371	0.07112	-0.02674	0.01176	0.00237		0.00237	0.07415	1.96738
	317	0.07348	1.96767	2.04116	-0.04116	-0.04116	4.00883	-0.00883	-0.01767	5.97651	0.02349	0.07048	-0.02650	0.01166	0.00232		0.00232	0.07348	1.96767
	318	0.07282	1.96797	2.04079	-0.04079	-0.04079	4.00875	-0.00875	-0.01751	5.97672	0.02328	0.06984	-0.02626	0.01155	0.00228		0.00228	0.07282	1.96797
	319	0.07217	1.96825	2.04042	-0.04042	-0.04042	4.00867	-0.00867	-0.01735	5.97693	0.02307	0.06922	-0.02602	0.01145	0.00224		0.00224	0.07217	1.96825
	320	0.07152	1.96854	2.04006	-0.04006	-0.04006	4.00860	-0.00860	-0.01719	5.97714	0.02286	0.06859	-0.02579	0.01134	0.00220		0.00220	0.07152	1.96854
	321	0.07087	1.96882	2.03969	-0.03969	-0.03969	4.00852	-0.00852	-0.01704	5.97734	0.02266	0.06797	-0.02556	0.01124	0.00216		0.00216	0.07087	1.96882
	322	0.07023	1.96910	2.03934	-0.03934	-0.03934	4.00844	-0.00844	-0.01688	5.97755	0.02245	0.06736	-0.02532	0.01114	0.00212		0.00212	0.07023	1.96910
	323	0.06960	1.96938	2.03898	-0.03898	-0.03898	4.00837	-0.00837	-0.01673	5.97775	0.02225	0.06675	-0.02510	0.01104	0.00208		0.00208	0.06960	1.96938
	324	0.06897	1.96966	2.03863	-0.03863	-0.03863	4.00829	-0.00829	-0.01658	5.97795	0.02205	0.06615	-0.02487	0.01094	0.00205		0.00205	0.06897	1.96966
	325	0.06835	1.96993	2.03828	-0.03828	-0.03828	4.00822	-0.00822	-0.01643	5.97815	0.02185	0.06555	-0.02465	0.01084	0.00201		0.00201	0.06835	1.96993
	326	0.06773	1.97020	2.03794	-0.03794	-0.03794	4.00814	-0.00814	-0.01628	5.97835	0.02165	0.06496	-0.02442	0.01074	0.00197		0.00197	0.06773	1.97020
	327	0.06712	1.97047	2.03760	-0.03760	-0.03760	4.00807	-0.00807	-0.01614	5.97854	0.02146	0.06438	-0.02420	0.01065	0.00194		0.00194	0.06712	1.97047
	328	0.06652	1.97074	2.03726	-0.03726	-0.03726	4.00800	-0.00800	-0.01599	5.97873	0.02127	0.06380	-0.02399	0.01055	0.00190		0.00190	0.06652	1.97074
	329	0.06592	1.97100	2.03692	-0.03692	-0.03692	4.00792	-0.00792	-0.01585	5.97893	0.02107	0.06322	-0.02377	0.01046	0.00187		0.00187	0.06592	1.97100
	330	0.06532	1.97126	2.03659	-0.03659	-0.03659	4.00785	-0.00785	-0.01570	5.97912	0.02088	0.06265	-0.02356	0.01036	0.00184		0.00184	0.06532	1.97126
	331	0.06473	1.97152	2.03626	-0.03626	-0.03626	4.00778	-0.00778	-0.01556	5.97930	0.02070	0.06209	-0.02334	0.01027	0.00180		0.00180	0.06473	1.97152
	332	0.06415	1.97178	2.03593	-0.03593	-0.03593	4.00771	-0.00771	-0.01542	5.97949	0.02051	0.06153	-0.02313	0.01018	0.00177		0.00177	0.06415	1.97178
	333	0.06357	1.97203	2.03561	-0.03561	-0.03561	4.00764	-0.00764	-0.01528	5.97968	0.02032	0.06097	-0.02292	0.01008	0.00174		0.00174	0.06357	1.97203
	334	0.06300	1.97229	2.03529	-0.03529	-0.03529	4.00757	-0.00757	-0.01514	5.97986	0.02014	0.06042	-0.02272	0.00999	0.00171		0.00171	0.06300	1.97229
	335	0.06243	1.97254	2.03497	-0.03497	-0.03497	4.00750	-0.00750	-0.01501	5.98004	0.01996	0.05988	-0.02251	0.00990	0.00168		0.00168	0.06243	1.97254
	336	0.06187	1.97278	2.03465	-0.03465	-0.03465	4.00744	-0.00744	-0.01487	5.98022	0.01978	0.05934	-0.02231	0.00981	0.00165		0.00165	0.06187	1.97278
	337	0.06131	1.97303	2.03434	-0.03434	-0.03434	4.00737	-0.00737	-0.01474	5.98040	0.01960	0.05880	-0.02211	0.00973	0.00162		0.00162	0.06131	1.97303
	338	0.06076	1.97327	2.03403	-0.03403	-0.03403	4.00730	-0.00730	-0.01461	5.98058	0.01942	0.05827	-0.02191	0.00964	0.00159		0.00159	0.06076	1.97327
	339	0.06021	1.97351	2.03372	-0.03372	-0.03372	4.00724	-0.00724	-0.01447	5.98075	0.01925	0.05775	-0.02171	0.00955	0.00156		0.00156	0.06021	1.97351
	340	0.05967	1.97375	2.03342	-0.03342	-0.03342	4.00717	-0.00717	-0.01434	5.98092	0.01908	0.05723	-0.02152	0.00946	0.00153		0.00153	0.05967	1.97375
	341	0.05913	1.97399	2.03312	-0.03312	-0.03312	4.00711	-0.00711	-0.01421	5.98110	0.01890	0.05671	-0.02132	0.00938	0.00150		0.00150	0.05913	1.97399
	342	0.05860	1.97422	2.03282	-0.03282	-0.03282	4.00704	-0.00704	-0.01409	5.98127	0.01873	0.05620	-0.02113	0.00929	0.00148		0.00148	0.05860	1.97422
	343	0.05807	1.97446	2.03252	-0.03252	-0.03252	4.00698	-0.00698	-0.01396	5.98144	0.01856	0.05569	-0.02094	0.00921	0.00145		0.00145	0.05807	1.97446
	344	0.05755	1.97469	2.03223	-0.03223	-0.03223	4.00692	-0.00692	-0.01383	5.98160	0.01840	0.05519	-0.02075	0.00913	0.00143		0.00143	0.05755	1.97469
	345	0.05703	1.97491	2.03194	-0.03194	-0.03194	4.00685	-0.00685	-0.01371	5.98177	0.01823	0.05470	-0.02056	0.00905	0.00140		0.00140	0.05703	1.97491
	346	0.05651	1.97514	2.03165	-0.03165	-0.03165	4.00679	-0.00679	-0.01359	5.98193	0.01807	0.05420	-0.02038	0.00896	0.00137		0.00137	0.05651	1.97514
	347	0.05600	1.97536	2.03137	-0.03137	-0.03137	4.00673	-0.00673	-0.01346	5.98210	0.01790	0.05371	-0.02019	0.00888	0.00135		0.00135	0.05600	1.97536
	348	0.05550	1.97559	2.03108	-0.03108	-0.03108	4.00667	-0.00667	-0.01334	5.98226	0.01774	0.05323	-0.02001	0.00880	0.00133		0.00133	0.05550	1.97559
	349	0.05500	1.97581	2.03080	-0.03080	-0.03080	4.00661	-0.00661	-0.01322	5.98242	0.01758	0.05275	-0.01983	0.00872	0.00130		0.00130	0.05500	1.97581
	350	0.05450	1.97602	2.03053	-0.03053	-0.03053	4.00655	-0.00655	-0.01310	5.98258	0.01742	0.05227	-0.01965	0.00865	0.00128		0.00128	0.05450	1.97602
	351	0.05401	1.97624	2.03025	-0.03025	-0.03025	4.00649	-0.00649	-0.01298	5.98273	0.01727	0.05180	-0.01948	0.00857	0.00126		0.00126	0.05401	1.97624
	352	0.05352	1.97645	2.02998	-0.02998	-0.02998	4.00643	-0.00643	-0.01287	5.98289	0.01711	0.05134	-0.01930	0.00849	0.00123		0.00123	0.05352	1.97645
	353	0.05304	1.97667	2.02971	-0.02971	-0.02971	4.00638	-0.00638	-0.01275	5.98304	0.01696	0.05087	-0.01913	0.00841	0.00121		0.00121	0.05304	1.97667
	354	0.05256	1.97688	2.02944	-0.02944	-0.02944	4.00632	-0.00632	-0.01264	5.98320	0.01680	0.05041	-0.01895	0.00834	0.00119		0.00119	0.05256	1.97688
	355	0.05209	1.97709	2.02918	-0.02918	-0.02918	4.00626	-0.00626	-0.01252	5.98335	0.01665	0.04996	-0.01878	0.00826	0.00117		0.00117	0.05209	1.97709
	356	0.05162	1.97729	2.02891	-0.02891	-0.02891	4.00620	-0.00620	-0.01241	5.98350	0.01650	0.04951	-0.01861	0.00819	0.00115		0.00115	0.05162	1.97729
	357	0.05115	1.97750	2.02865	-0.02865	-0.02865	4.00615	-0.00615	-0.01230	5.98365	0.01635	0.04906	-0.01845	0.00811	0.00113		0.00113	0.05115	1.97750
	358	0.05069	1.97770	2.02839	-0.02839	-0.02839	4.00609	-0.00609	-0.01219	5.98379	0.01621	0.04862	-0.01828	0.00804	0.00111		0.00111	0.05069	1.97770
	359	0.05024	1.97790	2.02814	-0.02814	-0.02814	4.00604	-0.00604	-0.01208	5.98394	0.01606	0.04818	-0.01811	0.00797	0.00109		0.00109	0.05024	1.97790
	360	0.04978	1.97810	2.02788	-0.02788	-0.02788	4.00598	-0.00598	-0.01197	5.98408	0.01592	0.04775	-0.01795	0.00790	0.00107		0.00107	0.04978	1.97810
	361	0.04933	1.97830	2.02763	-0.02763	-0.02763	4.00593	-0.00593	-0.01186	5.98423	0.01577	0.04732	-0.01779	0.00783	0.00105		0.00105	0.04933	1.97830
	362	0.04889	1.97849	2.02738	-0.02738	-0.02738	4.00588	-0.00588	-0.01175	5.98437	0.01563	0.04689	-0.01763	0.00776	0.00103		0.00103	0.04889	1.97849
	363	0.04845	1.97869	2.02714	-0.02714	-0.02714	4.00582	-0.00582	-0.01165	5.98451	0.01549	0.04647	-0.01747	0.00769	0.00101		0.00101	0.04845	1.97869
	364	0.04801	1.97888	2.02689	-0.02689	-0.02689	4.00577	-0.00577	-0.01154	5.98465	0.01535	0.04605	-0.01731	0.00762	0.00099		0.00099	0.04801	1.97888
	365	0.04758	1.97907	2.02665	-0.02665	-0.02665	4.00572	-0.00572	-0.01144	5.98479	0.01521	0.04563	-0.01716	0.00755	0.00097		0.00097	0.04758	1.97907
	366	0.04715	1.97926	2.02641	-0.02641	-0.02641	4.00567	-0.00567	-0.01133	5.98493	0.01507	0.04522	-0.01700	0.00748	0.00096		0.00096	0.04715	1.97926
	367	0.04673	1.97945	2.02617	-0.02617	-0.02617	4.00562	-0.00562	-0.01123	5.98506	0.01494	0.04482	-0.01685	0.00741	0.00094		0.00094	0.04673	1.97945
	368	0.04630	1.97963	2.02594	-0.02594	-0.02594	4.00557	-0.00557	-0.01113	5.98520	0.01480	0.04441	-0.01670	0.00735	0.00092		0.00092	0.04630	1.97963
	369	0.04589	1.97981	2.02570	-0.02570	-0.02570	4.00552	-0.00552	-0.01103	5.98533	0.01467	0.04401	-0.01655	0.00728	0.00091		0.00091	0.04589	1.97981
	370	0.04547	1.98000	2.02547	-0.02547	-0.02547	4.00547	-0.00547	-0.01093	5.98546	0.01454	0.04361	-0.01640	0.00721	0.00089		0.00089	0.04547	1.98000
	371	0.04506	1.98018	2.02524	-0.02524	-0.02524	4.00542	-0.00542	-0.01083	5.98559	0.01441	0.04322	-0.01625	0.00715	0.00087		0.00087	0.04506	1.98018
	372	0.04466	1.98036	2.02501	-0.02501	-0.02501	4.00537	-0.00537	-0.01074	5.98572	0.01428	0.04283	-0.01610	0.00708	0.00086		0.00086	0.04466	1.98036
	373	0.04425	1.98053	2.02479	-0.02479	-0.02479	4.00532	-0.00532	-0.01064	5.98585	0.01415	0.04245	-0.01596	0.00702	0.00084		0.00084	0.04425	1.98053
	374	0.04386	1.98071	2.02456	-0.02456	-0.02456	4.00527	-0.00527	-0.01054	5.98598	0.01402	0.04206	-0.01581	0.00696	0.00083		0.00083	0.04386	1.98071
	375	0.04346	1.98088	2.02434	-0.02434	-0.02434	4.00522	-0.00522	-0.01045	5.98611	0.01389	0.04168	-0.01567	0.00689	0.00081		0.00081	0.04346	1.98088
	376	0.04307	1.98105	2.02412	-0.02412	-0.02412	4.00518	-0.00518	-0.01035	5.98623	0.01377	0.04131	-0.01553	0.00683	0.00080		0.00080	0.04307	1.98105
	377	0.04268	1.98122	2.02391	-0.02391	-0.02391	4.00513	-0.00513	-0.01026	5.98635	0.01365	0.04094	-0.01539	0.00677	0.00078		0.00078	0.04268	1.98122
	378	0.04230	1.98139	2.02369	-0.02369	-0.02369	4.00508	-0.00508	-0.01017	5.98648	0.01352	0.04057	-0.01525	0.00671	0.00077		0.00077	0.04230	1.98139
	379	0.04191	1.98156	2.02348	-0.02348	-0.02348	4.00504	-0.00504	-0.01008	5.98660	0.01340	0.04020	-0.01511	0.00665	0.00076		0.00076	0.04191	1.98156
	380	0.04154	1.98173	2.02326	-0.02326	-0.02326	4.00499	-0.00499	-0.00999	5.98672	0.01328	0.03984	-0.01498	0.00659	0.00074		0.00074	0.04154	1.98173
	381	0.04116	1.98189	2.02305	-0.02305	-0.02305	4.00495	-0.00495	-0.00990	5.98684	0.01316	0.03948	-0.01484	0.00653	0.00073		0.00073	0.04116	1.98189
	382	0.04079	1.98206	2.02285	-0.02285	-0.02285	4.00490	-0.00490	-0.00981	5.98696	0.01304	0.03912	-0.01471	0.00647	0.00072		0.00072	0.04079	1.98206
	383	0.04042	1.98222	2.02264	-0.02264	-0.02264	4.00486	-0.00486	-0.00972	5.98708	0.01292	0.03877	-0.01458	0.00641	0.00070		0.00070	0.04042	1.98222
	384	0.04006	1.98238	2.02244	-0.02244	-0.02244	4.00481	-0.00481	-0.00963	5.98719	0.01281	0.03842	-0.01444	0.00635	0.00069		0.00069	0.04006	1.98238
	385	0.03970	1.98254	2.02223	-0.02223	-0.02223	4.00477	-0.00477	-0.00954	5.98731	0.01269	0.03807	-0.01431	0.00630	0.00068		0.00068	0.03970	1.98254
	386	0.03934	1.98269	2.02203	-0.02203	-0.02203	4.00473	-0.00473	-0.00946	5.98742	0.01258	0.03773	-0.01419	0.00624	0.00067		0.00067	0.03934	1.98269
	387	0.03899	1.98285	2.02184	-0.02184	-0.02184	4.00469	-0.00469	-0.00937	5.98754	0.01246	0.03739	-0.01406	0.00618	0.00065		0.00065	0.03899	1.98285
	388	0.03863	1.98300	2.02164	-0.02164	-0.02164	4.00464	-0.00464	-0.00929	5.98765	0.01235	0.03705	-0.01393	0.00613	0.00064		0.00064	0.03863	1.98300
	389	0.03829	1.98316	2.02144	-0.02144	-0.02144	4.00460	-0.00460	-0.00920	5.98776	0.01224	0.03672	-0.01381	0.00607	0.00063		0.00063	0.03829	1.98316
	390	0.03794	1.98331	2.02125	-0.02125	-0.02125	4.00456	-0.00456	-0.00912	5.98787	0.01213	0.03639	-0.01368	0.00602	0.00062		0.00062	0.03794	1.98331
	391	0.03760	1.98346	2.02106	-0.02106	-0.02106	4.00452	-0.00452	-0.00904	5.98798	0.01202	0.03606	-0.01356	0.00596	0.00061		0.00061	0.03760	1.98346
	392	0.03726	1.98361	2.02087	-0.02087	-0.02087	4.00448	-0.00448	-0.00896	5.98809	0.01191	0.03574	-0.01344	0.00591	0.00060		0.00060	0.03726	1.98361
	393	0.03692	1.98376	2.02068	-0.02068	-0.02068	4.00444	-0.00444	-0.00888	5.98820	0.01180	0.03541	-0.01331	0.00586	0.00059		0.00059	0.03692	1.98376
	394	0.03659	1.98390	2.02049	-0.02049	-0.02049	4.00440	-0.00440	-0.00880	5.98830	0.01170	0.03509	-0.01319	0.00580	0.00058		0.00058	0.03659	1.98390
	395	0.03626	1.98405	2.02031	-0.02031	-0.02031	4.00436	-0.00436	-0.00872	5.98841	0.01159	0.03478	-0.01308	0.00575	0.00057		0.00057	0.03626	1.98405
	396	0.03593	1.98419	2.02013	-0.02013	-0.02013	4.00432	-0.00432	-0.00864	5.98851	0.01149	0.03446	-0.01296	0.00570	0.00056		0.00056	0.03593	1.98419
	397	0.03561	1.98434	2.01995	-0.01995	-0.01995	4.00428	-0.00428	-0.00856	5.98862	0.01138	0.03415	-0.01284	0.00565	0.00055		0.00055	0.03561	1.98434
	398	0.03529	1.98448	2.01977	-0.01977	-0.01977	4.00424	-0.00424	-0.00848	5.98872	0.01128	0.03385	-0.01272	0.00560	0.00054		0.00054	0.03529	1.98448
	399	0.03497	1.98462	2.01959	-0.01959	-0.01959	4.00420	-0.00420	-0.00841	5.98882	0.01118	0.03354	-0.01261	0.00555	0.00053		0.00053	0.03497	1.98462
	400	0.03466	1.98475	2.01941	-0.01941	-0.01941	4.00417	-0.00417	-0.00833	5.98892	0.01108	0.03324	-0.01250	0.00550	0.00052		0.00052	0.03466	1.98475
	401	0.03434	1.98489	2.01924	-0.01924	-0.01924	4.00413	-0.00413	-0.00826	5.98902	0.01098	0.03294	-0.01238	0.00545	0.00051		0.00051	0.03434	1.98489
	402	0.03403	1.98503	2.01906	-0.01906	-0.01906	4.00409	-0.00409	-0.00818	5.98912	0.01088	0.03264	-0.01227	0.00540	0.00050		0.00050	0.03403	1.98503
	403	0.03373	1.98516	2.01889	-0.01889	-0.01889	4.00405	-0.00405	-0.00811	5.98922	0.01078	0.03235	-0.01216	0.00535	0.00049		0.00049	0.03373	1.98516
	404	0.03342	1.98530	2.01872	-0.01872	-0.01872	4.00402	-0.00402	-0.00803	5.98931	0.01069	0.03206	-0.01205	0.00530	0.00048		0.00048	0.03342	1.98530
	405	0.03312	1.98543	2.01855	-0.01855	-0.01855	4.00398	-0.00398	-0.00796	5.98941	0.01059	0.03177	-0.01194	0.00525	0.00047		0.00047	0.03312	1.98543
	406	0.03282	1.98556	2.01838	-0.01838	-0.01838	4.00395	-0.00395	-0.00789	5.98951	0.01049	0.03148	-0.01184	0.00521	0.00046		0.00046	0.03282	1.98556
	407	0.03253	1.98569	2.01822	-0.01822	-0.01822	4.00391	-0.00391	-0.00782	5.98960	0.01040	0.03120	-0.01173	0.00516	0.00046		0.00046	0.03253	1.98569
	408	0.03223	1.98582	2.01805	-0.01805	-0.01805	4.00387	-0.00387	-0.00775	5.98969	0.01031	0.03092	-0.01162	0.00511	0.00045		0.00045	0.03223	1.98582
	409	0.03194	1.98595	2.01789	-0.01789	-0.01789	4.00384	-0.00384	-0.00768	5.98979	0.01021	0.03064	-0.01152	0.00507	0.00044		0.00044	0.03194	1.98595
	410	0.03166	1.98607	2.01773	-0.01773	-0.01773	4.00380	-0.00380	-0.00761	5.98988	0.01012	0.03036	-0.01141	0.00502	0.00043		0.00043	0.03166	1.98607
	411	0.03137	1.98620	2.01757	-0.01757	-0.01757	4.00377	-0.00377	-0.00754	5.98997	0.01003	0.03009	-0.01131	0.00498	0.00042		0.00042	0.03137	1.98620
	412	0.03109	1.98632	2.01741	-0.01741	-0.01741	4.00374	-0.00374	-0.00747	5.99006	0.00994	0.02982	-0.01121	0.00493	0.00042		0.00042	0.03109	1.98632
	413	0.03081	1.98645	2.01725	-0.01725	-0.01725	4.00370	-0.00370	-0.00741	5.99015	0.00985	0.02955	-0.01111	0.00489	0.00041		0.00041	0.03081	1.98645
	414	0.03053	1.98657	2.01710	-0.01710	-0.01710	4.00367	-0.00367	-0.00734	5.99024	0.00976	0.02928	-0.01101	0.00484	0.00040		0.00040	0.03053	1.98657
	415	0.03025	1.98669	2.01695	-0.01695	-0.01695	4.00364	-0.00364	-0.00727	5.99033	0.00967	0.02902	-0.01091	0.00480	0.00039		0.00039	0.03025	1.98669
	416	0.02998	1.98681	2.01679	-0.01679	-0.01679	4.00360	-0.00360	-0.00721	5.99041	0.00959	0.02876	-0.01081	0.00476	0.00039		0.00039	0.02998	1.98681
	417	0.02971	1.98693	2.01664	-0.01664	-0.01664	4.00357	-0.00357	-0.00714	5.99050	0.00950	0.02850	-0.01071	0.00471	0.00038		0.00038	0.02971	1.98693
	418	0.02944	1.98705	2.01649	-0.01649	-0.01649	4.00354	-0.00354	-0.00708	5.99059	0.00941	0.02824	-0.01062	0.00467	0.00037		0.00037	0.02944	1.98705
	419	0.02918	1.98716	2.01634	-0.01634	-0.01634	4.00351	-0.00351	-0.00701	5.99067	0.00933	0.02798	-0.01052	0.00463	0.00037		0.00037	0.02918	1.98716
	420	0.02891	1.98728	2.01620	-0.01620	-0.01620	4.00348	-0.00348	-0.00695	5.99076	0.00924	0.02773	-0.01043	0.00459	0.00036		0.00036	0.02891	1.98728
	421	0.02865	1.98740	2.01605	-0.01605	-0.01605	4.00344	-0.00344	-0.00689	5.99084	0.00916	0.02748	-0.01033	0.00455	0.00035		0.00035	0.02865	1.98740
	422	0.02840	1.98751	2.01590	-0.01590	-0.01590	4.00341	-0.00341	-0.00683	5.99092	0.00908	0.02723	-0.01024	0.00450	0.00035		0.00035	0.02840	1.98751
	423	0.02814	1.98762	2.01576	-0.01576	-0.01576	4.00338	-0.00338	-0.00676	5.99100	0.00900	0.02699	-0.01015	0.00446	0.00034		0.00034	0.02814	1.98762
	424	0.02789	1.98773	2.01562	-0.01562	-0.01562	4.00335	-0.00335	-0.00670	5.99108	0.00892	0.02675	-0.01006	0.00442	0.00033		0.00033	0.02789	1.98773
	425	0.02763	1.98784	2.01548	-0.01548	-0.01548	4.00332	-0.00332	-0.00664	5.99117	0.00883	0.02650	-0.00996	0.00438	0.00033		0.00033	0.02763	1.98784
	426	0.02739	1.98795	2.01534	-0.01534	-0.01534	4.00329	-0.00329	-0.00658	5.99124	0.00876	0.02627	-0.00987	0.00434	0.00032		0.00032	0.02739	1.98795
	427	0.02714	1.98806	2.01520	-0.01520	-0.01520	4.00326	-0.00326	-0.00652	5.99132	0.00868	0.02603	-0.00979	0.00430	0.00032		0.00032	0.02714	1.98806
	428	0.02689	1.98817	2.01506	-0.01506	-0.01506	4.00323	-0.00323	-0.00647	5.99140	0.00860	0.02579	-0.00970	0.00427	0.00031		0.00031	0.02689	1.98817
	429	0.02665	1.98828	2.01493	-0.01493	-0.01493	4.00320	-0.00320	-0.00641	5.99148	0.00852	0.02556	-0.00961	0.00423	0.00031		0.00031	0.02665	1.98828
	430	0.02641	1.98838	2.01479	-0.01479	-0.01479	4.00317	-0.00317	-0.00635	5.99156	0.00844	0.02533	-0.00952	0.00419	0.00030		0.00030	0.02641	1.98838
	431	0.02617	1.98849	2.01466	-0.01466	-0.01466	4.00315	-0.00315	-0.00629	5.99163	0.00837	0.02510	-0.00944	0.00415	0.00029		0.00029	0.02617	1.98849
	432	0.02594	1.98859	2.01453	-0.01453	-0.01453	4.00312	-0.00312	-0.00624	5.99171	0.00829	0.02488	-0.00935	0.00411	0.00029		0.00029	0.02594	1.98859
	433	0.02570	1.98869	2.01440	-0.01440	-0.01440	4.00309	-0.00309	-0.00618	5.99178	0.00822	0.02465	-0.00927	0.00408	0.00028		0.00028	0.02570	1.98869
	434	0.02547	1.98879	2.01427	-0.01427	-0.01427	4.00306	-0.00306	-0.00612	5.99186	0.00814	0.02443	-0.00918	0.00404	0.00028		0.00028	0.02547	1.98879
	435	0.02524	1.98890	2.01414	-0.01414	-0.01414	4.00303	-0.00303	-0.00607	5.99193	0.00807	0.02421	-0.00910	0.00400	0.00027		0.00027	0.02524	1.98890
	436	0.02501	1.98900	2.01401	-0.01401	-0.01401	4.00301	-0.00301	-0.00601	5.99200	0.00800	0.02399	-0.00902	0.00397	0.00027		0.00027	0.02501	1.98900
	437	0.02479	1.98910	2.01388	-0.01388	-0.01388	4.00298	-0.00298	-0.00596	5.99207	0.00793	0.02378	-0.00894	0.00393	0.00026		0.00026	0.02479	1.98910
	438	0.02457	1.98919	2.01376	-0.01376	-0.01376	4.00295	-0.00295	-0.00591	5.99215	0.00785	0.02356	-0.00886	0.00390	0.00026		0.00026	0.02457	1.98919
	439	0.02434	1.98929	2.01364	-0.01364	-0.01364	4.00293	-0.00293	-0.00585	5.99222	0.00778	0.02335	-0.00878	0.00386	0.00026		0.00026	0.02434	1.98929
	440	0.02412	1.98939	2.01351	-0.01351	-0.01351	4.00290	-0.00290	-0.00580	5.99229	0.00771	0.02314	-0.00870	0.00383	0.00025		0.00025	0.02412	1.98939
	441	0.02391	1.98948	2.01339	-0.01339	-0.01339	4.00287	-0.00287	-0.00575	5.99236	0.00764	0.02293	-0.00862	0.00379	0.00025		0.00025	0.02391	1.98948
	442	0.02369	1.98958	2.01327	-0.01327	-0.01327	4.00285	-0.00285	-0.00570	5.99243	0.00757	0.02272	-0.00854	0.00376	0.00024		0.00024	0.02369	1.98958
	443	0.02348	1.98967	2.01315	-0.01315	-0.01315	4.00282	-0.00282	-0.00564	5.99249	0.00751	0.02252	-0.00847	0.00372	0.00024		0.00024	0.02348	1.98967
	444	0.02327	1.98977	2.01303	-0.01303	-0.01303	4.00280	-0.00280	-0.00559	5.99256	0.00744	0.02232	-0.00839	0.00369	0.00023		0.00023	0.02327	1.98977
	445	0.02306	1.98986	2.01291	-0.01291	-0.01291	4.00277	-0.00277	-0.00554	5.99263	0.00737	0.02211	-0.00831	0.00366	0.00023		0.00023	0.02306	1.98986
	446	0.02285	1.98995	2.01280	-0.01280	-0.01280	4.00275	-0.00275	-0.00549	5.99270	0.00730	0.02191	-0.00824	0.00362	0.00022		0.00022	0.02285	1.98995
	447	0.02264	1.99004	2.01268	-0.01268	-0.01268	4.00272	-0.00272	-0.00544	5.99276	0.00724	0.02172	-0.00816	0.00359	0.00022		0.00022	0.02264	1.99004
	448	0.02244	1.99013	2.01257	-0.01257	-0.01257	4.00270	-0.00270	-0.00539	5.99283	0.00717	0.02152	-0.00809	0.00356	0.00022		0.00022	0.02244	1.99013
	449	0.02224	1.99022	2.01245	-0.01245	-0.01245	4.00267	-0.00267	-0.00535	5.99289	0.00711	0.02133	-0.00802	0.00353	0.00021		0.00021	0.02224	1.99022
	450	0.02204	1.99031	2.01234	-0.01234	-0.01234	4.00265	-0.00265	-0.00530	5.99295	0.00705	0.02114	-0.00795	0.00350	0.00021		0.00021	0.02204	1.99031
	451	0.02184	1.99039	2.01223	-0.01223	-0.01223	4.00262	-0.00262	-0.00525	5.99302	0.00698	0.02094	-0.00787	0.00346	0.00021		0.00021	0.02184	1.99039
	452	0.02164	1.99048	2.01212	-0.01212	-0.01212	4.00260	-0.00260	-0.00520	5.99308	0.00692	0.02076	-0.00780	0.00343	0.00020		0.00020	0.02164	1.99048
	453	0.02145	1.99057	2.01201	-0.01201	-0.01201	4.00258	-0.00258	-0.00516	5.99314	0.00686	0.02057	-0.00773	0.00340	0.00020		0.00020	0.02145	1.99057
	454	0.02125	1.99065	2.01190	-0.01190	-0.01190	4.00255	-0.00255	-0.00511	5.99321	0.00679	0.02038	-0.00766	0.00337	0.00019		0.00019	0.02125	1.99065
	455	0.02106	1.99074	2.01180	-0.01180	-0.01180	4.00253	-0.00253	-0.00506	5.99327	0.00673	0.02020	-0.00759	0.00334	0.00019		0.00019	0.02106	1.99074
	456	0.02087	1.99082	2.01169	-0.01169	-0.01169	4.00251	-0.00251	-0.00502	5.99333	0.00667	0.02002	-0.00753	0.00331	0.00019		0.00019	0.02087	1.99082
	457	0.02068	1.99090	2.01158	-0.01158	-0.01158	4.00249	-0.00249	-0.00497	5.99339	0.00661	0.01984	-0.00746	0.00328	0.00018		0.00018	0.02068	1.99090
	458	0.02050	1.99098	2.01148	-0.01148	-0.01148	4.00246	-0.00246	-0.00493	5.99345	0.00655	0.01966	-0.00739	0.00325	0.00018		0.00018	0.02050	1.99098
	459	0.02031	1.99107	2.01138	-0.01138	-0.01138	4.00244	-0.00244	-0.00488	5.99351	0.00649	0.01948	-0.00732	0.00322	0.00018		0.00018	0.02031	1.99107
	460	0.02013	1.99115	2.01127	-0.01127	-0.01127	4.00242	-0.00242	-0.00484	5.99356	0.00644	0.01931	-0.00726	0.00319	0.00017		0.00017	0.02013	1.99115
	461	0.01995	1.99123	2.01117	-0.01117	-0.01117	4.00240	-0.00240	-0.00480	5.99362	0.00638	0.01913	-0.00719	0.00316	0.00017		0.00017	0.01995	1.99123
	462	0.01977	1.99130	2.01107	-0.01107	-0.01107	4.00238	-0.00238	-0.00475	5.99368	0.00632	0.01896	-0.00713	0.00314	0.00017		0.00017	0.01977	1.99130
	463	0.01959	1.99138	2.01097	-0.01097	-0.01097	4.00235	-0.00235	-0.00471	5.99374	0.00626	0.01879	-0.00706	0.00311	0.00017		0.00017	0.01959	1.99138
	464	0.01941	1.99146	2.01087	-0.01087	-0.01087	4.00233	-0.00233	-0.00467	5.99379	0.00621	0.01862	-0.00700	0.00308	0.00016		0.00016	0.01941	1.99146
	465	0.01924	1.99154	2.01077	-0.01077	-0.01077	4.00231	-0.00231	-0.00462	5.99385	0.00615	0.01845	-0.00694	0.00305	0.00016		0.00016	0.01924	1.99154
	466	0.01906	1.99161	2.01068	-0.01068	-0.01068	4.00229	-0.00229	-0.00458	5.99391	0.00609	0.01828	-0.00687	0.00302	0.00016		0.00016	0.01906	1.99161
	467	0.01889	1.99169	2.01058	-0.01058	-0.01058	4.00227	-0.00227	-0.00454	5.99396	0.00604	0.01812	-0.00681	0.00300	0.00015		0.00015	0.01889	1.99169
	468	0.01872	1.99176	2.01049	-0.01049	-0.01049	4.00225	-0.00225	-0.00450	5.99401	0.00599	0.01796	-0.00675	0.00297	0.00015		0.00015	0.01872	1.99176
	469	0.01855	1.99184	2.01039	-0.01039	-0.01039	4.00223	-0.00223	-0.00446	5.99407	0.00593	0.01779	-0.00669	0.00294	0.00015		0.00015	0.01855	1.99184
	470	0.01839	1.99191	2.01030	-0.01030	-0.01030	4.00221	-0.00221	-0.00442	5.99412	0.00588	0.01763	-0.00663	0.00292	0.00015		0.00015	0.01839	1.99191
	471	0.01822	1.99199	2.01020	-0.01020	-0.01020	4.00219	-0.00219	-0.00438	5.99418	0.00582	0.01747	-0.00657	0.00289	0.00014		0.00014	0.01822	1.99199
	472	0.01806	1.99206	2.01011	-0.01011	-0.01011	4.00217	-0.00217	-0.00434	5.99423	0.00577	0.01732	-0.00651	0.00286	0.00014		0.00014	0.01806	1.99206
	473	0.01789	1.99213	2.01002	-0.01002	-0.01002	4.00215	-0.00215	-0.00430	5.99428	0.00572	0.01716	-0.00645	0.00284	0.00014		0.00014	0.01789	1.99213
	474	0.01773	1.99220	2.00993	-0.00993	-0.00993	4.00213	-0.00213	-0.00426	5.99433	0.00567	0.01701	-0.00639	0.00281	0.00014		0.00014	0.01773	1.99220
	475	0.01757	1.99227	2.00984	-0.00984	-0.00984	4.00211	-0.00211	-0.00422	5.99438	0.00562	0.01685	-0.00634	0.00279	0.00013		0.00013	0.01757	1.99227
	476	0.01741	1.99234	2.00975	-0.00975	-0.00975	4.00209	-0.00209	-0.00419	5.99443	0.00557	0.01670	-0.00628	0.00276	0.00013		0.00013	0.01741	1.99234
	477	0.01726	1.99241	2.00967	-0.00967	-0.00967	4.00207	-0.00207	-0.00415	5.99448	0.00552	0.01655	-0.00622	0.00274	0.00013		0.00013	0.01726	1.99241
	478	0.01710	1.99248	2.00958	-0.00958	-0.00958	4.00206	-0.00206	-0.00411	5.99453	0.00547	0.01640	-0.00617	0.00271	0.00013		0.00013	0.01710	1.99248
	479	0.01695	1.99255	2.00949	-0.00949	-0.00949	4.00204	-0.00204	-0.00407	5.99458	0.00542	0.01625	-0.00611	0.00269	0.00012		0.00012	0.01695	1.99255
	480	0.01679	1.99261	2.00941	-0.00941	-0.00941	4.00202	-0.00202	-0.00404	5.99463	0.00537	0.01611	-0.00606	0.00266	0.00012		0.00012	0.01679	1.99261
	481	0.01664	1.99268	2.00932	-0.00932	-0.00932	4.00200	-0.00200	-0.00400	5.99468	0.00532	0.01596	-0.00600	0.00264	0.00012		0.00012	0.01664	1.99268
	482	0.01649	1.99274	2.00924	-0.00924	-0.00924	4.00198	-0.00198	-0.00396	5.99473	0.00527	0.01582	-0.00595	0.00262	0.00012		0.00012	0.01649	1.99274
	483	0.01634	1.99281	2.00915	-0.00915	-0.00915	4.00196	-0.00196	-0.00393	5.99477	0.00523	0.01568	-0.00589	0.00259	0.00011		0.00011	0.01634	1.99281
	484	0.01620	1.99288	2.00907	-0.00907	-0.00907	4.00195	-0.00195	-0.00389	5.99482	0.00518	0.01553	-0.00584	0.00257	0.00011		0.00011	0.01620	1.99288
	485	0.01605	1.99294	2.00899	-0.00899	-0.00899	4.00193	-0.00193	-0.00386	5.99487	0.00513	0.01539	-0.00579	0.00255	0.00011		0.00011	0.01605	1.99294
	486	0.01591	1.99300	2.00891	-0.00891	-0.00891	4.00191	-0.00191	-0.00382	5.99491	0.00509	0.01526	-0.00574	0.00252	0.00011		0.00011	0.01591	1.99300
	487	0.01576	1.99307	2.00883	-0.00883	-0.00883	4.00189	-0.00189	-0.00379	5.99496	0.00504	0.01512	-0.00568	0.00250	0.00011		0.00011	0.01576	1.99307
	488	0.01562	1.99313	2.00875	-0.00875	-0.00875	4.00188	-0.00188	-0.00375	5.99501	0.00499	0.01498	-0.00563	0.00248	0.00011		0.00011	0.01562	1.99313
	489	0.01548	1.99319	2.00867	-0.00867	-0.00867	4.00186	-0.00186	-0.00372	5.99505	0.00495	0.01485	-0.00558	0.00246	0.00010		0.00010	0.01548	1.99319
	490	0.01534	1.99325	2.00859	-0.00859	-0.00859	4.00184	-0.00184	-0.00369	5.99510	0.00490	0.01471	-0.00553	0.00243	0.00010		0.00010	0.01534	1.99325
	491	0.01520	1.99331	2.00851	-0.00851	-0.00851	4.00183	-0.00183	-0.00365	5.99514	0.00486	0.01458	-0.00548	0.00241	0.00010		0.00010	0.01520	1.99331
	492	0.01506	1.99337	2.00844	-0.00844	-0.00844	4.00181	-0.00181	-0.00362	5.99518	0.00482	0.01445	-0.00543	0.00239	0.00010		0.00010	0.01506	1.99337
	493	0.01493	1.99343	2.00836	-0.00836	-0.00836	4.00179	-0.00179	-0.00359	5.99523	0.00477	0.01432	-0.00538	0.00237	0.00010		0.00010	0.01493	1.99343
	494	0.01479	1.99349	2.00829	-0.00829	-0.00829	4.00178	-0.00178	-0.00356	5.99527	0.00473	0.01419	-0.00533	0.00235	0.00009		0.00009	0.01479	1.99349
	495	0.01466	1.99355	2.00821	-0.00821	-0.00821	4.00176	-0.00176	-0.00352	5.99531	0.00469	0.01406	-0.00529	0.00233	0.00009		0.00009	0.01466	1.99355
	496	0.01453	1.99361	2.00814	-0.00814	-0.00814	4.00175	-0.00175	-0.00349	5.99536	0.00464	0.01393	-0.00524	0.00230	0.00009		0.00009	0.01453	1.99361
	497	0.01440	1.99367	2.00806	-0.00806	-0.00806	4.00173	-0.00173	-0.00346	5.99540	0.00460	0.01381	-0.00519	0.00228	0.00009		0.00009	0.01440	1.99367
	498	0.01427	1.99372	2.00799	-0.00799	-0.00799	4.00171	-0.00171	-0.00343	5.99544	0.00456	0.01368	-0.00514	0.00226	0.00009		0.00009	0.01427	1.99372
	499	0.01414	1.99378	2.00792	-0.00792	-0.00792	4.00170	-0.00170	-0.00340	5.99548	0.00452	0.01356	-0.00510	0.00224	0.00009		0.00009	0.01414	1.99378
	500	0.01401	1.99384	2.00785	-0.00785	-0.00785	4.00168	-0.00168	-0.00337	5.99552	0.00448	0.01344	-0.00505	0.00222	0.00008		0.00008	0.01401	1.99384
	501	0.01389	1.99389	2.00778	-0.00778	-0.00778	4.00167	-0.00167	-0.00334	5.99556	0.00444	0.01332	-0.00501	0.00220	0.00008		0.00008	0.01389	1.99389
	502	0.01376	1.99395	2.00771	-0.00771	-0.00771	4.00165	-0.00165	-0.00331	5.99560	0.00440	0.01320	-0.00496	0.00218	0.00008		0.00008	0.01376	1.99395
	503	0.01364	1.99400	2.00764	-0.00764	-0.00764	4.00164	-0.00164	-0.00328	5.99564	0.00436	0.01308	-0.00492	0.00216	0.00008		0.00008	0.01364	1.99400
	504	0.01351	1.99406	2.00757	-0.00757	-0.00757	4.00162	-0.00162	-0.00325	5.99568	0.00432	0.01296	-0.00487	0.00214	0.00008		0.00008	0.01351	1.99406
	505	0.01339	1.99411	2.00750	-0.00750	-0.00750	4.00161	-0.00161	-0.00322	5.99572	0.00428	0.01284	-0.00483	0.00212	0.00008		0.00008	0.01339	1.99411
	506	0.01327	1.99416	2.00743	-0.00743	-0.00743	4.00160	-0.00160	-0.00319	5.99576	0.00424	0.01273	-0.00479	0.00211	0.00008		0.00008	0.01327	1.99416
	507	0.01315	1.99421	2.00737	-0.00737	-0.00737	4.00158	-0.00158	-0.00316	5.99580	0.00420	0.01261	-0.00474	0.00209	0.00007		0.00007	0.01315	1.99421
	508	0.01303	1.99427	2.00730	-0.00730	-0.00730	4.00157	-0.00157	-0.00313	5.99583	0.00417	0.01250	-0.00470	0.00207	0.00007		0.00007	0.01303	1.99427
	509	0.01292	1.99432	2.00723	-0.00723	-0.00723	4.00155	-0.00155	-0.00310	5.99587	0.00413	0.01239	-0.00466	0.00205	0.00007		0.00007	0.01292	1.99432
	510	0.01280	1.99437	2.00717	-0.00717	-0.00717	4.00154	-0.00154	-0.00308	5.99591	0.00409	0.01228	-0.00462	0.00203	0.00007		0.00007	0.01280	1.99437
	511	0.01268	1.99442	2.00710	-0.00710	-0.00710	4.00152	-0.00152	-0.00305	5.99595	0.00405	0.01216	-0.00457	0.00201	0.00007		0.00007	0.01268	1.99442
	512	0.01257	1.99447	2.00704	-0.00704	-0.00704	4.00151	-0.00151	-0.00302	5.99598	0.00402	0.01206	-0.00453	0.00199	0.00007		0.00007	0.01257	1.99447
	513	0.01246	1.99452	2.00698	-0.00698	-0.00698	4.00150	-0.00150	-0.00299	5.99602	0.00398	0.01195	-0.00449	0.00198	0.00007		0.00007	0.01246	1.99452
	514	0.01234	1.99457	2.00691	-0.00691	-0.00691	4.00148	-0.00148	-0.00297	5.99605	0.00395	0.01184	-0.00445	0.00196	0.00007		0.00007	0.01234	1.99457
	515	0.01223	1.99462	2.00685	-0.00685	-0.00685	4.00147	-0.00147	-0.00294	5.99609	0.00391	0.01173	-0.00441	0.00194	0.00006		0.00006	0.01223	1.99462
	516	0.01212	1.99467	2.00679	-0.00679	-0.00679	4.00146	-0.00146	-0.00291	5.99612	0.00388	0.01163	-0.00437	0.00192	0.00006		0.00006	0.01212	1.99467
	517	0.01201	1.99472	2.00673	-0.00673	-0.00673	4.00144	-0.00144	-0.00289	5.99616	0.00384	0.01152	-0.00433	0.00191	0.00006		0.00006	0.01201	1.99472
	518	0.01190	1.99476	2.00667	-0.00667	-0.00667	4.00143	-0.00143	-0.00286	5.99619	0.00381	0.01142	-0.00429	0.00189	0.00006		0.00006	0.01190	1.99476
	519	0.01180	1.99481	2.00661	-0.00661	-0.00661	4.00142	-0.00142	-0.00284	5.99623	0.00377	0.01131	-0.00425	0.00187	0.00006		0.00006	0.01180	1.99481
	520	0.01169	1.99486	2.00655	-0.00655	-0.00655	4.00141	-0.00141	-0.00281	5.99626	0.00374	0.01121	-0.00422	0.00185	0.00006		0.00006	0.01169	1.99486
	521	0.01159	1.99490	2.00649	-0.00649	-0.00649	4.00139	-0.00139	-0.00279	5.99630	0.00370	0.01111	-0.00418	0.00184	0.00006		0.00006	0.01159	1.99490
	522	0.01148	1.99495	2.00643	-0.00643	-0.00643	4.00138	-0.00138	-0.00276	5.99633	0.00367	0.01101	-0.00414	0.00182	0.00006		0.00006	0.01148	1.99495
	523	0.01138	1.99500	2.00637	-0.00637	-0.00637	4.00137	-0.00137	-0.00274	5.99636	0.00364	0.01091	-0.00410	0.00180	0.00006		0.00006	0.01138	1.99500
	524	0.01127	1.99504	2.00631	-0.00631	-0.00631	4.00136	-0.00136	-0.00271	5.99640	0.00360	0.01081	-0.00407	0.00179	0.00005		0.00005	0.01127	1.99504
	525	0.01117	1.99508	2.00626	-0.00626	-0.00626	4.00134	-0.00134	-0.00269	5.99643	0.00357	0.01072	-0.00403	0.00177	0.00005		0.00005	0.01117	1.99508
	526	0.01107	1.99513	2.00620	-0.00620	-0.00620	4.00133	-0.00133	-0.00266	5.99646	0.00354	0.01062	-0.00399	0.00176	0.00005		0.00005	0.01107	1.99513
	527	0.01097	1.99517	2.00615	-0.00615	-0.00615	4.00132	-0.00132	-0.00264	5.99649	0.00351	0.01052	-0.00396	0.00174	0.00005		0.00005	0.01097	1.99517
	528	0.01087	1.99522	2.00609	-0.00609	-0.00609	4.00131	-0.00131	-0.00261	5.99652	0.00348	0.01043	-0.00392	0.00172	0.00005		0.00005	0.01087	1.99522
	529	0.01078	1.99526	2.00604	-0.00604	-0.00604	4.00130	-0.00130	-0.00259	5.99655	0.00345	0.01034	-0.00389	0.00171	0.00005		0.00005	0.01078	1.99526
	530	0.01068	1.99530	2.00598	-0.00598	-0.00598	4.00128	-0.00128	-0.00257	5.99659	0.00341	0.01024	-0.00385	0.00169	0.00005		0.00005	0.01068	1.99530
	531	0.01058	1.99534	2.00593	-0.00593	-0.00593	4.00127	-0.00127	-0.00254	5.99662	0.00338	0.01015	-0.00382	0.00168	0.00005		0.00005	0.01058	1.99534
	532	0.01049	1.99539	2.00587	-0.00587	-0.00587	4.00126	-0.00126	-0.00252	5.99665	0.00335	0.01006	-0.00378	0.00166	0.00005		0.00005	0.01049	1.99539
	533	0.01039	1.99543	2.00582	-0.00582	-0.00582	4.00125	-0.00125	-0.00250	5.99668	0.00332	0.00997	-0.00375	0.00165	0.00005		0.00005	0.01039	1.99543
	534	0.01030	1.99547	2.00577	-0.00577	-0.00577	4.00124	-0.00124	-0.00248	5.99671	0.00329	0.00988	-0.00371	0.00163	0.00005		0.00005	0.01030	1.99547
	535	0.01021	1.99551	2.00572	-0.00572	-0.00572	4.00123	-0.00123	-0.00245	5.99674	0.00326	0.00979	-0.00368	0.00162	0.00004		0.00004	0.01021	1.99551
	536	0.01011	1.99555	2.00566	-0.00566	-0.00566	4.00122	-0.00122	-0.00243	5.99677	0.00323	0.00970	-0.00365	0.00160	0.00004		0.00004	0.01011	1.99555
	537	0.01002	1.99559	2.00561	-0.00561	-0.00561	4.00120	-0.00120	-0.00241	5.99680	0.00320	0.00961	-0.00361	0.00159	0.00004		0.00004	0.01002	1.99559
	538	0.00993	1.99563	2.00556	-0.00556	-0.00556	4.00119	-0.00119	-0.00239	5.99682	0.00318	0.00953	-0.00358	0.00158	0.00004		0.00004	0.00993	1.99563
	539	0.00984	1.99567	2.00551	-0.00551	-0.00551	4.00118	-0.00118	-0.00237	5.99685	0.00315	0.00944	-0.00355	0.00156	0.00004		0.00004	0.00984	1.99567
	540	0.00975	1.99571	2.00546	-0.00546	-0.00546	4.00117	-0.00117	-0.00234	5.99688	0.00312	0.00936	-0.00352	0.00155	0.00004		0.00004	0.00975	1.99571
	541	0.00967	1.99575	2.00541	-0.00541	-0.00541	4.00116	-0.00116	-0.00232	5.99691	0.00309	0.00927	-0.00349	0.00153	0.00004		0.00004	0.00967	1.99575
	542	0.00958	1.99579	2.00537	-0.00537	-0.00537	4.00115	-0.00115	-0.00230	5.99694	0.00306	0.00919	-0.00345	0.00152	0.00004		0.00004	0.00958	1.99579
	543	0.00949	1.99582	2.00532	-0.00532	-0.00532	4.00114	-0.00114	-0.00228	5.99697	0.00303	0.00910	-0.00342	0.00151	0.00004		0.00004	0.00949	1.99582
	544	0.00941	1.99586	2.00527	-0.00527	-0.00527	4.00113	-0.00113	-0.00226	5.99699	0.00301	0.00902	-0.00339	0.00149	0.00004		0.00004	0.00941	1.99586
	545	0.00932	1.99590	2.00522	-0.00522	-0.00522	4.00112	-0.00112	-0.00224	5.99702	0.00298	0.00894	-0.00336	0.00148	0.00004		0.00004	0.00932	1.99590
	546	0.00924	1.99594	2.00517	-0.00517	-0.00517	4.00111	-0.00111	-0.00222	5.99705	0.00295	0.00886	-0.00333	0.00147	0.00004		0.00004	0.00924	1.99594
	547	0.00915	1.99597	2.00513	-0.00513	-0.00513	4.00110	-0.00110	-0.00220	5.99707	0.00293	0.00878	-0.00330	0.00145	0.00004		0.00004	0.00915	1.99597
	548	0.00907	1.99601	2.00508	-0.00508	-0.00508	4.00109	-0.00109	-0.00218	5.99710	0.00290	0.00870	-0.00327	0.00144	0.00004		0.00004	0.00907	1.99601
	549	0.00899	1.99605	2.00504	-0.00504	-0.00504	4.00108	-0.00108	-0.00216	5.99713	0.00287	0.00862	-0.00324	0.00143	0.00003		0.00003	0.00899	1.99605
	550	0.00891	1.99608	2.00499	-0.00499	-0.00499	4.00107	-0.00107	-0.00214	5.99715	0.00285	0.00855	-0.00321	0.00141	0.00003		0.00003	0.00891	1.99608
	551	0.00883	1.99612	2.00495	-0.00495	-0.00495	4.00106	-0.00106	-0.00212	5.99718	0.00282	0.00847	-0.00318	0.00140	0.00003		0.00003	0.00883	1.99612
	552	0.00875	1.99615	2.00490	-0.00490	-0.00490	4.00105	-0.00105	-0.00210	5.99720	0.00280	0.00839	-0.00316	0.00139	0.00003		0.00003	0.00875	1.99615
	553	0.00867	1.99619	2.00486	-0.00486	-0.00486	4.00104	-0.00104	-0.00208	5.99723	0.00277	0.00832	-0.00313	0.00138	0.00003		0.00003	0.00867	1.99619
	554	0.00859	1.99622	2.00481	-0.00481	-0.00481	4.00103	-0.00103	-0.00207	5.99725	0.00275	0.00824	-0.00310	0.00136	0.00003		0.00003	0.00859	1.99622
	555	0.00852	1.99625	2.00477	-0.00477	-0.00477	4.00102	-0.00102	-0.00205	5.99728	0.00272	0.00817	-0.00307	0.00135	0.00003		0.00003	0.00852	1.99625
	556	0.00844	1.99629	2.00473	-0.00473	-0.00473	4.00101	-0.00101	-0.00203	5.99730	0.00270	0.00809	-0.00304	0.00134	0.00003		0.00003	0.00844	1.99629
	557	0.00836	1.99632	2.00468	-0.00468	-0.00468	4.00101	-0.00101	-0.00201	5.99733	0.00267	0.00802	-0.00302	0.00133	0.00003		0.00003	0.00836	1.99632
	558	0.00829	1.99635	2.00464	-0.00464	-0.00464	4.00100	-0.00100	-0.00199	5.99735	0.00265	0.00795	-0.00299	0.00131	0.00003		0.00003	0.00829	1.99635
	559	0.00821	1.99639	2.00460	-0.00460	-0.00460	4.00099	-0.00099	-0.00197	5.99737	0.00263	0.00788	-0.00296	0.00130	0.00003		0.00003	0.00821	1.99639
	560	0.00814	1.99642	2.00456	-0.00456	-0.00456	4.00098	-0.00098	-0.00196	5.99740	0.00260	0.00781	-0.00293	0.00129	0.00003		0.00003	0.00814	1.99642
	561	0.00806	1.99645	2.00452	-0.00452	-0.00452	4.00097	-0.00097	-0.00194	5.99742	0.00258	0.00774	-0.00291	0.00128	0.00003		0.00003	0.00806	1.99645
	562	0.00799	1.99648	2.00448	-0.00448	-0.00448	4.00096	-0.00096	-0.00192	5.99744	0.00256	0.00767	-0.00288	0.00127	0.00003		0.00003	0.00799	1.99648
	563	0.00792	1.99652	2.00444	-0.00444	-0.00444	4.00095	-0.00095	-0.00190	5.99747	0.00253	0.00760	-0.00286	0.00126	0.00003		0.00003	0.00792	1.99652
	564	0.00785	1.99655	2.00440	-0.00440	-0.00440	4.00094	-0.00094	-0.00189	5.99749	0.00251	0.00753	-0.00283	0.00124	0.00003		0.00003	0.00785	1.99655
	565	0.00778	1.99658	2.00436	-0.00436	-0.00436	4.00093	-0.00093	-0.00187	5.99751	0.00249	0.00746	-0.00280	0.00123	0.00003		0.00003	0.00778	1.99658
	566	0.00771	1.99661	2.00432	-0.00432	-0.00432	4.00093	-0.00093	-0.00185	5.99754	0.00246	0.00739	-0.00278	0.00122	0.00003		0.00003	0.00771	1.99661
	567	0.00764	1.99664	2.00428	-0.00428	-0.00428	4.00092	-0.00092	-0.00184	5.99756	0.00244	0.00733	-0.00275	0.00121	0.00003		0.00003	0.00764	1.99664
	568	0.00757	1.99667	2.00424	-0.00424	-0.00424	4.00091	-0.00091	-0.00182	5.99758	0.00242	0.00726	-0.00273	0.00120	0.00002		0.00002	0.00757	1.99667
	569	0.00750	1.99670	2.00420	-0.00420	-0.00420	4.00090	-0.00090	-0.00180	5.99760	0.00240	0.00719	-0.00270	0.00119	0.00002		0.00002	0.00750	1.99670
	570	0.00743	1.99673	2.00416	-0.00416	-0.00416	4.00089	-0.00089	-0.00179	5.99762	0.00238	0.00713	-0.00268	0.00118	0.00002		0.00002	0.00743	1.99673
	571	0.00737	1.99676	2.00413	-0.00413	-0.00413	4.00089	-0.00089	-0.00177	5.99764	0.00236	0.00707	-0.00266	0.00117	0.00002		0.00002	0.00737	1.99676
	572	0.00730	1.99679	2.00409	-0.00409	-0.00409	4.00088	-0.00088	-0.00175	5.99767	0.00233	0.00700	-0.00263	0.00116	0.00002		0.00002	0.00730	1.99679
	573	0.00723	1.99682	2.00405	-0.00405	-0.00405	4.00087	-0.00087	-0.00174	5.99769	0.00231	0.00694	-0.00261	0.00115	0.00002		0.00002	0.00723	1.99682
	574	0.00717	1.99685	2.00402	-0.00402	-0.00402	4.00086	-0.00086	-0.00172	5.99771	0.00229	0.00688	-0.00259	0.00114	0.00002		0.00002	0.00717	1.99685
	575	0.00710	1.99687	2.00398	-0.00398	-0.00398	4.00085	-0.00085	-0.00171	5.99773	0.00227	0.00681	-0.00256	0.00113	0.00002		0.00002	0.00710	1.99687
	576	0.00704	1.99690	2.00394	-0.00394	-0.00394	4.00085	-0.00085	-0.00169	5.99775	0.00225	0.00675	-0.00254	0.00112	0.00002		0.00002	0.00704	1.99690
	577	0.00698	1.99693	2.00391	-0.00391	-0.00391	4.00084	-0.00084	-0.00168	5.99777	0.00223	0.00669	-0.00252	0.00111	0.00002		0.00002	0.00698	1.99693
	578	0.00691	1.99696	2.00387	-0.00387	-0.00387	4.00083	-0.00083	-0.00166	5.99779	0.00221	0.00663	-0.00249	0.00110	0.00002		0.00002	0.00691	1.99696
	579	0.00685	1.99699	2.00384	-0.00384	-0.00384	4.00082	-0.00082	-0.00165	5.99781	0.00219	0.00657	-0.00247	0.00109	0.00002		0.00002	0.00685	1.99699
	580	0.00679	1.99701	2.00380	-0.00380	-0.00380	4.00082	-0.00082	-0.00163	5.99783	0.00217	0.00651	-0.00245	0.00108	0.00002		0.00002	0.00679	1.99701
	581	0.00673	1.99704	2.00377	-0.00377	-0.00377	4.00081	-0.00081	-0.00162	5.99785	0.00215	0.00645	-0.00243	0.00107	0.00002		0.00002	0.00673	1.99704
	582	0.00667	1.99707	2.00373	-0.00373	-0.00373	4.00080	-0.00080	-0.00160	5.99787	0.00213	0.00640	-0.00240	0.00106	0.00002		0.00002	0.00667	1.99707
	583	0.00661	1.99709	2.00370	-0.00370	-0.00370	4.00079	-0.00079	-0.00159	5.99789	0.00211	0.00634	-0.00238	0.00105	0.00002		0.00002	0.00661	1.99709
	584	0.00655	1.99712	2.00367	-0.00367	-0.00367	4.00079	-0.00079	-0.00157	5.99791	0.00209	0.00628	-0.00236	0.00104	0.00002		0.00002	0.00655	1.99712
	585	0.00649	1.99715	2.00363	-0.00363	-0.00363	4.00078	-0.00078	-0.00156	5.99793	0.00207	0.00622	-0.00234	0.00103	0.00002		0.00002	0.00649	1.99715
	586	0.00643	1.99717	2.00360	-0.00360	-0.00360	4.00077	-0.00077	-0.00155	5.99794	0.00206	0.00617	-0.00232	0.00102	0.00002		0.00002	0.00643	1.99717
	587	0.00637	1.99720	2.00357	-0.00357	-0.00357	4.00077	-0.00077	-0.00153	5.99796	0.00204	0.00611	-0.00230	0.00101	0.00002		0.00002	0.00637	1.99720
	588	0.00632	1.99722	2.00354	-0.00354	-0.00354	4.00076	-0.00076	-0.00152	5.99798	0.00202	0.00606	-0.00228	0.00100	0.00002		0.00002	0.00632	1.99722
	589	0.00626	1.99725	2.00351	-0.00351	-0.00351	4.00075	-0.00075	-0.00150	5.99800	0.00200	0.00600	-0.00226	0.00099	0.00002		0.00002	0.00626	1.99725
	590	0.00620	1.99727	2.00347	-0.00347	-0.00347	4.00075	-0.00075	-0.00149	5.99802	0.00198	0.00595	-0.00224	0.00098	0.00002		0.00002	0.00620	1.99727
	591	0.00615	1.99730	2.00344	-0.00344	-0.00344	4.00074	-0.00074	-0.00148	5.99804	0.00196	0.00589	-0.00222	0.00097	0.00002		0.00002	0.00615	1.99730
	592	0.00609	1.99732	2.00341	-0.00341	-0.00341	4.00073	-0.00073	-0.00146	5.99805	0.00195	0.00584	-0.00220	0.00097	0.00002		0.00002	0.00609	1.99732
	593	0.00604	1.99734	2.00338	-0.00338	-0.00338	4.00073	-0.00073	-0.00145	5.99807	0.00193	0.00579	-0.00218	0.00096	0.00002		0.00002	0.00604	1.99734
	594	0.00598	1.99737	2.00335	-0.00335	-0.00335	4.00072	-0.00072	-0.00144	5.99809	0.00191	0.00574	-0.00216	0.00095	0.00002		0.00002	0.00598	1.99737
	595	0.00593	1.99739	2.00332	-0.00332	-0.00332	4.00071	-0.00071	-0.00142	5.99810	0.00190	0.00569	-0.00214	0.00094	0.00002		0.00002	0.00593	1.99739
	596	0.00587	1.99742	2.00329	-0.00329	-0.00329	4.00071	-0.00071	-0.00141	5.99812	0.00188	0.00563	-0.00212	0.00093	0.00001		0.00001	0.00587	1.99742
	597	0.00582	1.99744	2.00326	-0.00326	-0.00326	4.00070	-0.00070	-0.00140	5.99814	0.00186	0.00558	-0.00210	0.00092	0.00001		0.00001	0.00582	1.99744
	598	0.00577	1.99746	2.00323	-0.00323	-0.00323	4.00069	-0.00069	-0.00139	5.99816	0.00184	0.00553	-0.00208	0.00092	0.00001		0.00001	0.00577	1.99746
	599	0.00572	1.99749	2.00320	-0.00320	-0.00320	4.00069	-0.00069	-0.00137	5.99817	0.00183	0.00548	-0.00206	0.00091	0.00001		0.00001	0.00572	1.99749
	600	0.00567	1.99751	2.00317	-0.00317	-0.00317	4.00068	-0.00068	-0.00136	5.99819	0.00181	0.00543	-0.00204	0.00090	0.00001		0.00001	0.00567	1.99751
	601	0.00561	1.99753	2.00314	-0.00314	-0.00314	4.00067	-0.00067	-0.00135	5.99821	0.00179	0.00538	-0.00202	0.00089	0.00001		0.00001	0.00561	1.99753
	602	0.00556	1.99755	2.00312	-0.00312	-0.00312	4.00067	-0.00067	-0.00134	5.99822	0.00178	0.00534	-0.00201	0.00088	0.00001		0.00001	0.00556	1.99755
	603	0.00551	1.99757	2.00309	-0.00309	-0.00309	4.00066	-0.00066	-0.00133	5.99824	0.00176	0.00529	-0.00199	0.00087	0.00001		0.00001	0.00551	1.99757
	604	0.00546	1.99760	2.00306	-0.00306	-0.00306	4.00066	-0.00066	-0.00131	5.99825	0.00175	0.00524	-0.00197	0.00087	0.00001		0.00001	0.00546	1.99760
	605	0.00541	1.99762	2.00303	-0.00303	-0.00303	4.00065	-0.00065	-0.00130	5.99827	0.00173	0.00519	-0.00195	0.00086	0.00001		0.00001	0.00541	1.99762
	606	0.00537	1.99764	2.00301	-0.00301	-0.00301	4.00064	-0.00064	-0.00129	5.99828	0.00172	0.00515	-0.00193	0.00085	0.00001		0.00001	0.00537	1.99764
	607	0.00532	1.99766	2.00298	-0.00298	-0.00298	4.00064	-0.00064	-0.00128	5.99830	0.00170	0.00510	-0.00192	0.00084	0.00001		0.00001	0.00532	1.99766
	608	0.00527	1.99768	2.00295	-0.00295	-0.00295	4.00063	-0.00063	-0.00127	5.99832	0.00168	0.00505	-0.00190	0.00084	0.00001		0.00001	0.00527	1.99768
	609	0.00522	1.99770	2.00292	-0.00292	-0.00292	4.00063	-0.00063	-0.00126	5.99833	0.00167	0.00501	-0.00188	0.00083	0.00001		0.00001	0.00522	1.99770
	610	0.00517	1.99772	2.00290	-0.00290	-0.00290	4.00062	-0.00062	-0.00124	5.99835	0.00165	0.00496	-0.00187	0.00082	0.00001		0.00001	0.00517	1.99772
	611	0.00513	1.99774	2.00287	-0.00287	-0.00287	4.00062	-0.00062	-0.00123	5.99836	0.00164	0.00492	-0.00185	0.00081	0.00001		0.00001	0.00513	1.99774
	612	0.00508	1.99776	2.00285	-0.00285	-0.00285	4.00061	-0.00061	-0.00122	5.99838	0.00162	0.00487	-0.00183	0.00081	0.00001		0.00001	0.00508	1.99776
	613	0.00504	1.99778	2.00282	-0.00282	-0.00282	4.00061	-0.00061	-0.00121	5.99839	0.00161	0.00483	-0.00182	0.00080	0.00001		0.00001	0.00504	1.99778
	614	0.00499	1.99780	2.00280	-0.00280	-0.00280	4.00060	-0.00060	-0.00120	5.99840	0.00160	0.00479	-0.00180	0.00079	0.00001		0.00001	0.00499	1.99780
	615	0.00495	1.99782	2.00277	-0.00277	-0.00277	4.00059	-0.00059	-0.00119	5.99842	0.00158	0.00474	-0.00178	0.00078	0.00001		0.00001	0.00495	1.99782
	616	0.00490	1.99784	2.00275	-0.00275	-0.00275	4.00059	-0.00059	-0.00118	5.99843	0.00157	0.00470	-0.00177	0.00078	0.00001		0.00001	0.00490	1.99784
	617	0.00486	1.99786	2.00272	-0.00272	-0.00272	4.00058	-0.00058	-0.00117	5.99845	0.00155	0.00466	-0.00175	0.00077	0.00001		0.00001	0.00486	1.99786
	618	0.00481	1.99788	2.00270	-0.00270	-0.00270	4.00058	-0.00058	-0.00116	5.99846	0.00154	0.00462	-0.00174	0.00076	0.00001		0.00001	0.00481	1.99788
	619	0.00477	1.99790	2.00267	-0.00267	-0.00267	4.00057	-0.00057	-0.00115	5.99848	0.00152	0.00457	-0.00172	0.00076	0.00001		0.00001	0.00477	1.99790
	620	0.00473	1.99792	2.00265	-0.00265	-0.00265	4.00057	-0.00057	-0.00114	5.99849	0.00151	0.00453	-0.00170	0.00075	0.00001		0.00001	0.00473	1.99792
	621	0.00468	1.99794	2.00262	-0.00262	-0.00262	4.00056	-0.00056	-0.00113	5.99850	0.00150	0.00449	-0.00169	0.00074	0.00001		0.00001	0.00468	1.99794
	622	0.00464	1.99796	2.00260	-0.00260	-0.00260	4.00056	-0.00056	-0.00112	5.99852	0.00148	0.00445	-0.00167	0.00074	0.00001		0.00001	0.00464	1.99796
	623	0.00460	1.99798	2.00258	-0.00258	-0.00258	4.00055	-0.00055	-0.00111	5.99853	0.00147	0.00441	-0.00166	0.00073	0.00001		0.00001	0.00460	1.99798
	624	0.00456	1.99799	2.00255	-0.00255	-0.00255	4.00055	-0.00055	-0.00110	5.99854	0.00146	0.00437	-0.00164	0.00072	0.00001		0.00001	0.00456	1.99799
	625	0.00452	1.99801	2.00253	-0.00253	-0.00253	4.00054	-0.00054	-0.00109	5.99856	0.00144	0.00433	-0.00163	0.00072	0.00001		0.00001	0.00452	1.99801
	626	0.00448	1.99803	2.00251	-0.00251	-0.00251	4.00054	-0.00054	-0.00108	5.99857	0.00143	0.00429	-0.00161	0.00071	0.00001		0.00001	0.00448	1.99803
	627	0.00444	1.99805	2.00248	-0.00248	-0.00248	4.00053	-0.00053	-0.00107	5.99858	0.00142	0.00425	-0.00160	0.00070	0.00001		0.00001	0.00444	1.99805
	628	0.00440	1.99807	2.00246	-0.00246	-0.00246	4.00053	-0.00053	-0.00106	5.99859	0.00141	0.00422	-0.00159	0.00070	0.00001		0.00001	0.00440	1.99807
	629	0.00436	1.99808	2.00244	-0.00244	-0.00244	4.00052	-0.00052	-0.00105	5.99861	0.00139	0.00418	-0.00157	0.00069	0.00001		0.00001	0.00436	1.99808
	630	0.00432	1.99810	2.00242	-0.00242	-0.00242	4.00052	-0.00052	-0.00104	5.99862	0.00138	0.00414	-0.00156	0.00068	0.00001		0.00001	0.00432	1.99810
	631	0.00428	1.99812	2.00240	-0.00240	-0.00240	4.00051	-0.00051	-0.00103	5.99863	0.00137	0.00410	-0.00154	0.00068	0.00001		0.00001	0.00428	1.99812
	632	0.00424	1.99813	2.00237	-0.00237	-0.00237	4.00051	-0.00051	-0.00102	5.99864	0.00136	0.00407	-0.00153	0.00067	0.00001		0.00001	0.00424	1.99813
	633	0.00420	1.99815	2.00235	-0.00235	-0.00235	4.00051	-0.00051	-0.00101	5.99866	0.00134	0.00403	-0.00152	0.00067	0.00001		0.00001	0.00420	1.99815
	634	0.00416	1.99817	2.00233	-0.00233	-0.00233	4.00050	-0.00050	-0.00100	5.99867	0.00133	0.00399	-0.00150	0.00066	0.00001		0.00001	0.00416	1.99817
	635	0.00413	1.99818	2.00231	-0.00231	-0.00231	4.00050	-0.00050	-0.00099	5.99868	0.00132	0.00396	-0.00149	0.00065	0.00001		0.00001	0.00413	1.99818
	636	0.00409	1.99820	2.00229	-0.00229	-0.00229	4.00049	-0.00049	-0.00098	5.99869	0.00131	0.00392	-0.00147	0.00065	0.00001		0.00001	0.00409	1.99820
	637	0.00405	1.99822	2.00227	-0.00227	-0.00227	4.00049	-0.00049	-0.00097	5.99870	0.00130	0.00389	-0.00146	0.00064	0.00001		0.00001	0.00405	1.99822
	638	0.00402	1.99823	2.00225	-0.00225	-0.00225	4.00048	-0.00048	-0.00097	5.99872	0.00128	0.00385	-0.00145	0.00064	0.00001		0.00001	0.00402	1.99823
	639	0.00398	1.99825	2.00223	-0.00223	-0.00223	4.00048	-0.00048	-0.00096	5.99873	0.00127	0.00382	-0.00143	0.00063	0.00001		0.00001	0.00398	1.99825
	640	0.00394	1.99827	2.00221	-0.00221	-0.00221	4.00047	-0.00047	-0.00095	5.99874	0.00126	0.00378	-0.00142	0.00063	0.00001		0.00001	0.00394	1.99827
	641	0.00391	1.99828	2.00219	-0.00219	-0.00219	4.00047	-0.00047	-0.00094	5.99875	0.00125	0.00375	-0.00141	0.00062	0.00001		0.00001	0.00391	1.99828
	642	0.00387	1.99830	2.00217	-0.00217	-0.00217	4.00047	-0.00047	-0.00093	5.99876	0.00124	0.00371	-0.00140	0.00061	0.00001		0.00001	0.00387	1.99830
	643	0.00384	1.99831	2.00215	-0.00215	-0.00215	4.00046	-0.00046	-0.00092	5.99877	0.00123	0.00368	-0.00138	0.00061	0.00001		0.00001	0.00384	1.99831
	644	0.00380	1.99833	2.00213	-0.00213	-0.00213	4.00046	-0.00046	-0.00091	5.99878	0.00122	0.00365	-0.00137	0.00060	0.00001		0.00001	0.00380	1.99833
	645	0.00377	1.99834	2.00211	-0.00211	-0.00211	4.00045	-0.00045	-0.00091	5.99880	0.00120	0.00361	-0.00136	0.00060	0.00001		0.00001	0.00377	1.99834
	646	0.00374	1.99836	2.00209	-0.00209	-0.00209	4.00045	-0.00045	-0.00090	5.99881	0.00119	0.00358	-0.00135	0.00059	0.00001		0.00001	0.00374	1.99836
	647	0.00370	1.99837	2.00207	-0.00207	-0.00207	4.00044	-0.00044	-0.00089	5.99882	0.00118	0.00355	-0.00133	0.00059	0.00001		0.00001	0.00370	1.99837
	648	0.00367	1.99839	2.00205	-0.00205	-0.00205	4.00044	-0.00044	-0.00088	5.99883	0.00117	0.00352	-0.00132	0.00058	0.00001		0.00001	0.00367	1.99839
	649	0.00364	1.99840	2.00204	-0.00204	-0.00204	4.00044	-0.00044	-0.00087	5.99884	0.00116	0.00349	-0.00131	0.00058	0.00001		0.00001	0.00364	1.99840
	650	0.00360	1.99842	2.00202	-0.00202	-0.00202	4.00043	-0.00043	-0.00087	5.99885	0.00115	0.00345	-0.00130	0.00057	0.00001		0.00001	0.00360	1.99842
	651	0.00357	1.99843	2.00200	-0.00200	-0.00200	4.00043	-0.00043	-0.00086	5.99886	0.00114	0.00342	-0.00129	0.00057	0.00001		0.00001	0.00357	1.99843
	652	0.00354	1.99844	2.00198	-0.00198	-0.00198	4.00043	-0.00043	-0.00085	5.99887	0.00113	0.00339	-0.00128	0.00056	0.00001		0.00001	0.00354	1.99844
	653	0.00351	1.99846	2.00196	-0.00196	-0.00196	4.00042	-0.00042	-0.00084	5.99888	0.00112	0.00336	-0.00126	0.00056	0.00001		0.00001	0.00351	1.99846
	654	0.00347	1.99847	2.00195	-0.00195	-0.00195	4.00042	-0.00042	-0.00084	5.99889	0.00111	0.00333	-0.00125	0.00055	0.00001		0.00001	0.00347	1.99847
	655	0.00344	1.99849	2.00193	-0.00193	-0.00193	4.00041	-0.00041	-0.00083	5.99890	0.00110	0.00330	-0.00124	0.00055	0.00001		0.00001	0.00344	1.99849
	656	0.00341	1.99850	2.00191	-0.00191	-0.00191	4.00041	-0.00041	-0.00082	5.99891	0.00109	0.00327	-0.00123	0.00054	0.00001		0.00001	0.00341	1.99850
	657	0.00338	1.99851	2.00189	-0.00189	-0.00189	4.00041	-0.00041	-0.00081	5.99892	0.00108	0.00324	-0.00122	0.00054	0.00000		0.00000	0.00338	1.99851
	658	0.00335	1.99853	2.00188	-0.00188	-0.00188	4.00040	-0.00040	-0.00081	5.99893	0.00107	0.00321	-0.00121	0.00053	0.00000		0.00000	0.00335	1.99853
	659	0.00332	1.99854	2.00186	-0.00186	-0.00186	4.00040	-0.00040	-0.00080	5.99894	0.00106	0.00318	-0.00120	0.00053	0.00000		0.00000	0.00332	1.99854
	660	0.00329	1.99855	2.00184	-0.00184	-0.00184	4.00040	-0.00040	-0.00079	5.99895	0.00105	0.00316	-0.00119	0.00052	0.00000		0.00000	0.00329	1.99855
	661	0.00326	1.99857	2.00183	-0.00183	-0.00183	4.00039	-0.00039	-0.00078	5.99896	0.00104	0.00313	-0.00118	0.00052	0.00000		0.00000	0.00326	1.99857
	662	0.00323	1.99858	2.00181	-0.00181	-0.00181	4.00039	-0.00039	-0.00078	5.99897	0.00103	0.00310	-0.00117	0.00051	0.00000		0.00000	0.00323	1.99858
	663	0.00320	1.99859	2.00179	-0.00179	-0.00179	4.00038	-0.00038	-0.00077	5.99898	0.00102	0.00307	-0.00115	0.00051	0.00000		0.00000	0.00320	1.99859
	664	0.00317	1.99860	2.00178	-0.00178	-0.00178	4.00038	-0.00038	-0.00076	5.99899	0.00101	0.00304	-0.00114	0.00050	0.00000		0.00000	0.00317	1.99860
	665	0.00314	1.99862	2.00176	-0.00176	-0.00176	4.00038	-0.00038	-0.00076	5.99899	0.00101	0.00302	-0.00113	0.00050	0.00000		0.00000	0.00314	1.99862
	666	0.00312	1.99863	2.00175	-0.00175	-0.00175	4.00037	-0.00037	-0.00075	5.99900	0.00100	0.00299	-0.00112	0.00049	0.00000		0.00000	0.00312	1.99863
	667	0.00309	1.99864	2.00173	-0.00173	-0.00173	4.00037	-0.00037	-0.00074	5.99901	0.00099	0.00296	-0.00111	0.00049	0.00000		0.00000	0.00309	1.99864
	668	0.00306	1.99865	2.00171	-0.00171	-0.00171	4.00037	-0.00037	-0.00074	5.99902	0.00098	0.00294	-0.00110	0.00049	0.00000		0.00000	0.00306	1.99865
	669	0.00303	1.99867	2.00170	-0.00170	-0.00170	4.00036	-0.00036	-0.00073	5.99903	0.00097	0.00291	-0.00109	0.00048	0.00000		0.00000	0.00303	1.99867
	670	0.00301	1.99868	2.00168	-0.00168	-0.00168	4.00036	-0.00036	-0.00072	5.99904	0.00096	0.00288	-0.00108	0.00048	0.00000		0.00000	0.00301	1.99868
	671	0.00298	1.99869	2.00167	-0.00167	-0.00167	4.00036	-0.00036	-0.00072	5.99905	0.00095	0.00286	-0.00107	0.00047	0.00000		0.00000	0.00298	1.99869
	672	0.00295	1.99870	2.00165	-0.00165	-0.00165	4.00035	-0.00035	-0.00071	5.99906	0.00094	0.00283	-0.00106	0.00047	0.00000		0.00000	0.00295	1.99870
	673	0.00292	1.99871	2.00164	-0.00164	-0.00164	4.00035	-0.00035	-0.00070	5.99906	0.00094	0.00281	-0.00105	0.00046	0.00000		0.00000	0.00292	1.99871
	674	0.00290	1.99872	2.00162	-0.00162	-0.00162	4.00035	-0.00035	-0.00070	5.99907	0.00093	0.00278	-0.00105	0.00046	0.00000		0.00000	0.00290	1.99872
	675	0.00287	1.99874	2.00161	-0.00161	-0.00161	4.00035	-0.00035	-0.00069	5.99908	0.00092	0.00276	-0.00104	0.00046	0.00000		0.00000	0.00287	1.99874
	676	0.00285	1.99875	2.00159	-0.00159	-0.00159	4.00034	-0.00034	-0.00068	5.99909	0.00091	0.00273	-0.00103	0.00045	0.00000		0.00000	0.00285	1.99875
	677	0.00282	1.99876	2.00158	-0.00158	-0.00158	4.00034	-0.00034	-0.00068	5.99910	0.00090	0.00271	-0.00102	0.00045	0.00000		0.00000	0.00282	1.99876
	678	0.00280	1.99877	2.00157	-0.00157	-0.00157	4.00034	-0.00034	-0.00067	5.99911	0.00089	0.00268	-0.00101	0.00044	0.00000		0.00000	0.00280	1.99877
	679	0.00277	1.99878	2.00155	-0.00155	-0.00155	4.00033	-0.00033	-0.00067	5.99911	0.00089	0.00266	-0.00100	0.00044	0.00000		0.00000	0.00277	1.99878
	680	0.00275	1.99879	2.00154	-0.00154	-0.00154	4.00033	-0.00033	-0.00066	5.99912	0.00088	0.00263	-0.00099	0.00044	0.00000		0.00000	0.00275	1.99879
	681	0.00272	1.99880	2.00152	-0.00152	-0.00152	4.00033	-0.00033	-0.00065	5.99913	0.00087	0.00261	-0.00098	0.00043	0.00000		0.00000	0.00272	1.99880
	682	0.00270	1.99881	2.00151	-0.00151	-0.00151	4.00032	-0.00032	-0.00065	5.99914	0.00086	0.00259	-0.00097	0.00043	0.00000		0.00000	0.00270	1.99881
	683	0.00267	1.99882	2.00150	-0.00150	-0.00150	4.00032	-0.00032	-0.00064	5.99915	0.00085	0.00256	-0.00096	0.00042	0.00000		0.00000	0.00267	1.99882
	684	0.00265	1.99884	2.00148	-0.00148	-0.00148	4.00032	-0.00032	-0.00064	5.99915	0.00085	0.00254	-0.00095	0.00042	0.00000		0.00000	0.00265	1.99884
	685	0.00262	1.99885	2.00147	-0.00147	-0.00147	4.00032	-0.00032	-0.00063	5.99916	0.00084	0.00252	-0.00095	0.00042	0.00000		0.00000	0.00262	1.99885
	686	0.00260	1.99886	2.00146	-0.00146	-0.00146	4.00031	-0.00031	-0.00063	5.99917	0.00083	0.00249	-0.00094	0.00041	0.00000		0.00000	0.00260	1.99886
	687	0.00258	1.99887	2.00144	-0.00144	-0.00144	4.00031	-0.00031	-0.00062	5.99918	0.00082	0.00247	-0.00093	0.00041	0.00000		0.00000	0.00258	1.99887
	688	0.00255	1.99888	2.00143	-0.00143	-0.00143	4.00031	-0.00031	-0.00061	5.99918	0.00082	0.00245	-0.00092	0.00041	0.00000		0.00000	0.00255	1.99888
	689	0.00253	1.99889	2.00142	-0.00142	-0.00142	4.00030	-0.00030	-0.00061	5.99919	0.00081	0.00243	-0.00091	0.00040	0.00000		0.00000	0.00253	1.99889
	690	0.00251	1.99890	2.00140	-0.00140	-0.00140	4.00030	-0.00030	-0.00060	5.99920	0.00080	0.00241	-0.00090	0.00040	0.00000		0.00000	0.00251	1.99890
	691	0.00249	1.99891	2.00139	-0.00139	-0.00139	4.00030	-0.00030	-0.00060	5.99921	0.00079	0.00238	-0.00090	0.00039	0.00000		0.00000	0.00249	1.99891
	692	0.00246	1.99892	2.00138	-0.00138	-0.00138	4.00030	-0.00030	-0.00059	5.99921	0.00079	0.00236	-0.00089	0.00039	0.00000		0.00000	0.00246	1.99892
	693	0.00244	1.99893	2.00137	-0.00137	-0.00137	4.00029	-0.00029	-0.00059	5.99922	0.00078	0.00234	-0.00088	0.00039	0.00000		0.00000	0.00244	1.99893
	694	0.00242	1.99894	2.00135	-0.00135	-0.00135	4.00029	-0.00029	-0.00058	5.99923	0.00077	0.00232	-0.00087	0.00038	0.00000		0.00000	0.00242	1.99894
	695	0.00240	1.99895	2.00134	-0.00134	-0.00134	4.00029	-0.00029	-0.00058	5.99923	0.00077	0.00230	-0.00086	0.00038	0.00000		0.00000	0.00240	1.99895
	696	0.00237	1.99896	2.00133	-0.00133	-0.00133	4.00029	-0.00029	-0.00057	5.99924	0.00076	0.00228	-0.00086	0.00038	0.00000		0.00000	0.00237	1.99896
	697	0.00235	1.99896	2.00132	-0.00132	-0.00132	4.00028	-0.00028	-0.00057	5.99925	0.00075	0.00226	-0.00085	0.00037	0.00000		0.00000	0.00235	1.99896
	698	0.00233	1.99897	2.00131	-0.00131	-0.00131	4.00028	-0.00028	-0.00056	5.99925	0.00075	0.00224	-0.00084	0.00037	0.00000		0.00000	0.00233	1.99897
	699	0.00231	1.99898	2.00129	-0.00129	-0.00129	4.00028	-0.00028	-0.00056	5.99926	0.00074	0.00222	-0.00083	0.00037	0.00000		0.00000	0.00231	1.99898
	700	0.00229	1.99899	2.00128	-0.00128	-0.00128	4.00028	-0.00028	-0.00055	5.99927	0.00073	0.00220	-0.00083	0.00036	0.00000		0.00000	0.00229	1.99899
	701	0.00227	1.99900	2.00127	-0.00127	-0.00127	4.00027	-0.00027	-0.00055	5.99927	0.00073	0.00218	-0.00082	0.00036	0.00000		0.00000	0.00227	1.99900
	702	0.00225	1.99901	2.00126	-0.00126	-0.00126	4.00027	-0.00027	-0.00054	5.99928	0.00072	0.00216	-0.00081	0.00036	0.00000		0.00000	0.00225	1.99901
	703	0.00223	1.99902	2.00125	-0.00125	-0.00125	4.00027	-0.00027	-0.00054	5.99929	0.00071	0.00214	-0.00080	0.00035	0.00000		0.00000	0.00223	1.99902
	704	0.00221	1.99903	2.00124	-0.00124	-0.00124	4.00027	-0.00027	-0.00053	5.99929	0.00071	0.00212	-0.00080	0.00035	0.00000		0.00000	0.00221	1.99903
	705	0.00219	1.99904	2.00123	-0.00123	-0.00123	4.00026	-0.00026	-0.00053	5.99930	0.00070	0.00210	-0.00079	0.00035	0.00000		0.00000	0.00219	1.99904
	706	0.00217	1.99905	2.00122	-0.00122	-0.00122	4.00026	-0.00026	-0.00052	5.99931	0.00069	0.00208	-0.00078	0.00034	0.00000		0.00000	0.00217	1.99905
	707	0.00215	1.99905	2.00120	-0.00120	-0.00120	4.00026	-0.00026	-0.00052	5.99931	0.00069	0.00206	-0.00078	0.00034	0.00000		0.00000	0.00215	1.99905
	708	0.00213	1.99906	2.00119	-0.00119	-0.00119	4.00026	-0.00026	-0.00051	5.99932	0.00068	0.00204	-0.00077	0.00034	0.00000		0.00000	0.00213	1.99906
	709	0.00211	1.99907	2.00118	-0.00118	-0.00118	4.00025	-0.00025	-0.00051	5.99933	0.00067	0.00202	-0.00076	0.00033	0.00000		0.00000	0.00211	1.99907
	710	0.00209	1.99908	2.00117	-0.00117	-0.00117	4.00025	-0.00025	-0.00050	5.99933	0.00067	0.00201	-0.00075	0.00033	0.00000		0.00000	0.00209	1.99908
	711	0.00207	1.99909	2.00116	-0.00116	-0.00116	4.00025	-0.00025	-0.00050	5.99934	0.00066	0.00199	-0.00075	0.00033	0.00000		0.00000	0.00207	1.99909
	712	0.00205	1.99910	2.00115	-0.00115	-0.00115	4.00025	-0.00025	-0.00049	5.99934	0.00066	0.00197	-0.00074	0.00033	0.00000		0.00000	0.00205	1.99910
	713	0.00204	1.99910	2.00114	-0.00114	-0.00114	4.00024	-0.00024	-0.00049	5.99935	0.00065	0.00195	-0.00073	0.00032	0.00000		0.00000	0.00204	1.99910
	714	0.00202	1.99911	2.00113	-0.00113	-0.00113	4.00024	-0.00024	-0.00049	5.99935	0.00065	0.00194	-0.00073	0.00032	0.00000		0.00000	0.00202	1.99911
	715	0.00200	1.99912	2.00112	-0.00112	-0.00112	4.00024	-0.00024	-0.00048	5.99936	0.00064	0.00192	-0.00072	0.00032	0.00000		0.00000	0.00200	1.99912
	716	0.00198	1.99913	2.00111	-0.00111	-0.00111	4.00024	-0.00024	-0.00048	5.99937	0.00063	0.00190	-0.00071	0.00031	0.00000		0.00000	0.00198	1.99913
	717	0.00196	1.99914	2.00110	-0.00110	-0.00110	4.00024	-0.00024	-0.00047	5.99937	0.00063	0.00188	-0.00071	0.00031	0.00000		0.00000	0.00196	1.99914
	718	0.00195	1.99914	2.00109	-0.00109	-0.00109	4.00023	-0.00023	-0.00047	5.99938	0.00062	0.00187	-0.00070	0.00031	0.00000		0.00000	0.00195	1.99914
	719	0.00193	1.99915	2.00108	-0.00108	-0.00108	4.00023	-0.00023	-0.00046	5.99938	0.00062	0.00185	-0.00070	0.00031	0.00000		0.00000	0.00193	1.99915
	720	0.00191	1.99916	2.00107	-0.00107	-0.00107	4.00023	-0.00023	-0.00046	5.99939	0.00061	0.00183	-0.00069	0.00030	0.00000		0.00000	0.00191	1.99916
	721	0.00189	1.99917	2.00106	-0.00106	-0.00106	4.00023	-0.00023	-0.00046	5.99939	0.00061	0.00182	-0.00068	0.00030	0.00000		0.00000	0.00189	1.99917
	722	0.00188	1.99917	2.00105	-0.00105	-0.00105	4.00023	-0.00023	-0.00045	5.99940	0.00060	0.00180	-0.00068	0.00030	0.00000		0.00000	0.00188	1.99917
	723	0.00186	1.99918	2.00104	-0.00104	-0.00104	4.00022	-0.00022	-0.00045	5.99941	0.00059	0.00178	-0.00067	0.00030	0.00000		0.00000	0.00186	1.99918
	724	0.00184	1.99919	2.00103	-0.00103	-0.00103	4.00022	-0.00022	-0.00044	5.99941	0.00059	0.00177	-0.00066	0.00029	0.00000		0.00000	0.00184	1.99919
	725	0.00183	1.99920	2.00102	-0.00102	-0.00102	4.00022	-0.00022	-0.00044	5.99942	0.00058	0.00175	-0.00066	0.00029	0.00000		0.00000	0.00183	1.99920
	726	0.00181	1.99920	2.00101	-0.00101	-0.00101	4.00022	-0.00022	-0.00044	5.99942	0.00058	0.00174	-0.00065	0.00029	0.00000		0.00000	0.00181	1.99920
	727	0.00179	1.99921	2.00100	-0.00100	-0.00100	4.00022	-0.00022	-0.00043	5.99943	0.00057	0.00172	-0.00065	0.00028	0.00000		0.00000	0.00179	1.99921
	728	0.00178	1.99922	2.00100	-0.00100	-0.00100	4.00021	-0.00021	-0.00043	5.99943	0.00057	0.00170	-0.00064	0.00028	0.00000		0.00000	0.00178	1.99922
	729	0.00176	1.99923	2.00099	-0.00099	-0.00099	4.00021	-0.00021	-0.00042	5.99944	0.00056	0.00169	-0.00064	0.00028	0.00000		0.00000	0.00176	1.99923
	730	0.00175	1.99923	2.00098	-0.00098	-0.00098	4.00021	-0.00021	-0.00042	5.99944	0.00056	0.00167	-0.00063	0.00028	0.00000		0.00000	0.00175	1.99923
	731	0.00173	1.99924	2.00097	-0.00097	-0.00097	4.00021	-0.00021	-0.00042	5.99945	0.00055	0.00166	-0.00062	0.00027	0.00000		0.00000	0.00173	1.99924
	732	0.00171	1.99925	2.00096	-0.00096	-0.00096	4.00021	-0.00021	-0.00041	5.99945	0.00055	0.00164	-0.00062	0.00027	0.00000		0.00000	0.00171	1.99925
	733	0.00170	1.99925	2.00095	-0.00095	-0.00095	4.00020	-0.00020	-0.00041	5.99946	0.00054	0.00163	-0.00061	0.00027	0.00000		0.00000	0.00170	1.99925
	734	0.00168	1.99926	2.00094	-0.00094	-0.00094	4.00020	-0.00020	-0.00040	5.99946	0.00054	0.00161	-0.00061	0.00027	0.00000		0.00000	0.00168	1.99926
	735	0.00167	1.99927	2.00093	-0.00093	-0.00093	4.00020	-0.00020	-0.00040	5.99947	0.00053	0.00160	-0.00060	0.00026	0.00000		0.00000	0.00167	1.99927
	736	0.00165	1.99927	2.00093	-0.00093	-0.00093	4.00020	-0.00020	-0.00040	5.99947	0.00053	0.00159	-0.00060	0.00026	0.00000		0.00000	0.00165	1.99927
	737	0.00164	1.99928	2.00092	-0.00092	-0.00092	4.00020	-0.00020	-0.00039	5.99948	0.00052	0.00157	-0.00059	0.00026	0.00000		0.00000	0.00164	1.99928
	738	0.00162	1.99929	2.00091	-0.00091	-0.00091	4.00020	-0.00020	-0.00039	5.99948	0.00052	0.00156	-0.00059	0.00026	0.00000		0.00000	0.00162	1.99929
	739	0.00161	1.99929	2.00090	-0.00090	-0.00090	4.00019	-0.00019	-0.00039	5.99949	0.00051	0.00154	-0.00058	0.00026	0.00000		0.00000	0.00161	1.99929
	740	0.00159	1.99930	2.00089	-0.00089	-0.00089	4.00019	-0.00019	-0.00038	5.99949	0.00051	0.00153	-0.00057	0.00025	0.00000		0.00000	0.00159	1.99930
	741	0.00158	1.99930	2.00089	-0.00089	-0.00089	4.00019	-0.00019	-0.00038	5.99949	0.00051	0.00152	-0.00057	0.00025	0.00000		0.00000	0.00158	1.99930
	742	0.00157	1.99931	2.00088	-0.00088	-0.00088	4.00019	-0.00019	-0.00038	5.99950	0.00050	0.00150	-0.00056	0.00025	0.00000		0.00000	0.00157	1.99931
	743	0.00155	1.99932	2.00087	-0.00087	-0.00087	4.00019	-0.00019	-0.00037	5.99950	0.00050	0.00149	-0.00056	0.00025	0.00000		0.00000	0.00155	1.99932
	744	0.00154	1.99932	2.00086	-0.00086	-0.00086	4.00018	-0.00018	-0.00037	5.99951	0.00049	0.00147	-0.00055	0.00024	0.00000		0.00000	0.00154	1.99932
	745	0.00152	1.99933	2.00085	-0.00085	-0.00085	4.00018	-0.00018	-0.00037	5.99951	0.00049	0.00146	-0.00055	0.00024	0.00000		0.00000	0.00152	1.99933
	746	0.00151	1.99934	2.00085	-0.00085	-0.00085	4.00018	-0.00018	-0.00036	5.99952	0.00048	0.00145	-0.00054	0.00024	0.00000		0.00000	0.00151	1.99934
	747	0.00150	1.99934	2.00084	-0.00084	-0.00084	4.00018	-0.00018	-0.00036	5.99952	0.00048	0.00144	-0.00054	0.00024	0.00000		0.00000	0.00150	1.99934
	748	0.00148	1.99935	2.00083	-0.00083	-0.00083	4.00018	-0.00018	-0.00036	5.99953	0.00047	0.00142	-0.00053	0.00024	0.00000		0.00000	0.00148	1.99935
	749	0.00147	1.99935	2.00082	-0.00082	-0.00082	4.00018	-0.00018	-0.00035	5.99953	0.00047	0.00141	-0.00053	0.00023	0.00000		0.00000	0.00147	1.99935
	750	0.00146	1.99936	2.00082	-0.00082	-0.00082	4.00018	-0.00018	-0.00035	5.99953	0.00047	0.00140	-0.00053	0.00023	0.00000		0.00000	0.00146	1.99936
	751	0.00144	1.99937	2.00081	-0.00081	-0.00081	4.00017	-0.00017	-0.00035	5.99954	0.00046	0.00138	-0.00052	0.00023	0.00000		0.00000	0.00144	1.99937
	752	0.00143	1.99937	2.00080	-0.00080	-0.00080	4.00017	-0.00017	-0.00034	5.99954	0.00046	0.00137	-0.00052	0.00023	0.00000		0.00000	0.00143	1.99937
	753	0.00142	1.99938	2.00079	-0.00079	-0.00079	4.00017	-0.00017	-0.00034	5.99955	0.00045	0.00136	-0.00051	0.00022	0.00000		0.00000	0.00142	1.99938
	754	0.00140	1.99938	2.00079	-0.00079	-0.00079	4.00017	-0.00017	-0.00034	5.99955	0.00045	0.00135	-0.00051	0.00022	0.00000		0.00000	0.00140	1.99938
	755	0.00139	1.99939	2.00078	-0.00078	-0.00078	4.00017	-0.00017	-0.00033	5.99955	0.00045	0.00134	-0.00050	0.00022	0.00000		0.00000	0.00139	1.99939
	756	0.00138	1.99939	2.00077	-0.00077	-0.00077	4.00017	-0.00017	-0.00033	5.99956	0.00044	0.00132	-0.00050	0.00022	0.00000		0.00000	0.00138	1.99939
	757	0.00137	1.99940	2.00077	-0.00077	-0.00077	4.00016	-0.00016	-0.00033	5.99956	0.00044	0.00131	-0.00049	0.00022	0.00000		0.00000	0.00137	1.99940
	758	0.00135	1.99940	2.00076	-0.00076	-0.00076	4.00016	-0.00016	-0.00033	5.99957	0.00043	0.00130	-0.00049	0.00021	0.00000		0.00000	0.00135	1.99940
	759	0.00134	1.99941	2.00075	-0.00075	-0.00075	4.00016	-0.00016	-0.00032	5.99957	0.00043	0.00129	-0.00048	0.00021	0.00000		0.00000	0.00134	1.99941
	760	0.00133	1.99941	2.00075	-0.00075	-0.00075	4.00016	-0.00016	-0.00032	5.99957	0.00043	0.00128	-0.00048	0.00021	0.00000		0.00000	0.00133	1.99941
	761	0.00132	1.99942	2.00074	-0.00074	-0.00074	4.00016	-0.00016	-0.00032	5.99958	0.00042	0.00126	-0.00048	0.00021	0.00000		0.00000	0.00132	1.99942
	762	0.00131	1.99943	2.00073	-0.00073	-0.00073	4.00016	-0.00016	-0.00031	5.99958	0.00042	0.00125	-0.00047	0.00021	0.00000		0.00000	0.00131	1.99943
	763	0.00129	1.99943	2.00073	-0.00073	-0.00073	4.00016	-0.00016	-0.00031	5.99959	0.00041	0.00124	-0.00047	0.00021	0.00000		0.00000	0.00129	1.99943
	764	0.00128	1.99944	2.00072	-0.00072	-0.00072	4.00015	-0.00015	-0.00031	5.99959	0.00041	0.00123	-0.00046	0.00020	0.00000		0.00000	0.00128	1.99944
	765	0.00127	1.99944	2.00071	-0.00071	-0.00071	4.00015	-0.00015	-0.00031	5.99959	0.00041	0.00122	-0.00046	0.00020	0.00000		0.00000	0.00127	1.99944
	766	0.00126	1.99945	2.00071	-0.00071	-0.00071	4.00015	-0.00015	-0.00030	5.99960	0.00040	0.00121	-0.00045	0.00020	0.00000		0.00000	0.00126	1.99945
	767	0.00125	1.99945	2.00070	-0.00070	-0.00070	4.00015	-0.00015	-0.00030	5.99960	0.00040	0.00120	-0.00045	0.00020	0.00000		0.00000	0.00125	1.99945
	768	0.00124	1.99946	2.00069	-0.00069	-0.00069	4.00015	-0.00015	-0.00030	5.99960	0.00040	0.00119	-0.00045	0.00020	0.00000		0.00000	0.00124	1.99946
	769	0.00123	1.99946	2.00069	-0.00069	-0.00069	4.00015	-0.00015	-0.00029	5.99961	0.00039	0.00118	-0.00044	0.00019	0.00000		0.00000	0.00123	1.99946
	770	0.00122	1.99947	2.00068	-0.00068	-0.00068	4.00015	-0.00015	-0.00029	5.99961	0.00039	0.00117	-0.00044	0.00019	0.00000		0.00000	0.00122	1.99947
	771	0.00120	1.99947	2.00067	-0.00067	-0.00067	4.00014	-0.00014	-0.00029	5.99962	0.00038	0.00115	-0.00043	0.00019	0.00000		0.00000	0.00120	1.99947
	772	0.00119	1.99948	2.00067	-0.00067	-0.00067	4.00014	-0.00014	-0.00029	5.99962	0.00038	0.00114	-0.00043	0.00019	0.00000		0.00000	0.00119	1.99948
	773	0.00118	1.99948	2.00066	-0.00066	-0.00066	4.00014	-0.00014	-0.00028	5.99962	0.00038	0.00113	-0.00043	0.00019	0.00000		0.00000	0.00118	1.99948
	774	0.00117	1.99948	2.00066	-0.00066	-0.00066	4.00014	-0.00014	-0.00028	5.99963	0.00037	0.00112	-0.00042	0.00019	0.00000		0.00000	0.00117	1.99948
	775	0.00116	1.99949	2.00065	-0.00065	-0.00065	4.00014	-0.00014	-0.00028	5.99963	0.00037	0.00111	-0.00042	0.00018	0.00000		0.00000	0.00116	1.99949
	776	0.00115	1.99949	2.00064	-0.00064	-0.00064	4.00014	-0.00014	-0.00028	5.99963	0.00037	0.00110	-0.00042	0.00018	0.00000		0.00000	0.00115	1.99949
	777	0.00114	1.99950	2.00064	-0.00064	-0.00064	4.00014	-0.00014	-0.00027	5.99964	0.00036	0.00109	-0.00041	0.00018	0.00000		0.00000	0.00114	1.99950
	778	0.00113	1.99950	2.00063	-0.00063	-0.00063	4.00014	-0.00014	-0.00027	5.99964	0.00036	0.00108	-0.00041	0.00018	0.00000		0.00000	0.00113	1.99950
	779	0.00112	1.99951	2.00063	-0.00063	-0.00063	4.00013	-0.00013	-0.00027	5.99964	0.00036	0.00107	-0.00040	0.00018	0.00000		0.00000	0.00112	1.99951
	780	0.00111	1.99951	2.00062	-0.00062	-0.00062	4.00013	-0.00013	-0.00027	5.99965	0.00035	0.00106	-0.00040	0.00018	0.00000		0.00000	0.00111	1.99951
	781	0.00110	1.99952	2.00062	-0.00062	-0.00062	4.00013	-0.00013	-0.00026	5.99965	0.00035	0.00105	-0.00040	0.00017	0.00000		0.00000	0.00110	1.99952
	782	0.00109	1.99952	2.00061	-0.00061	-0.00061	4.00013	-0.00013	-0.00026	5.99965	0.00035	0.00105	-0.00039	0.00017	0.00000		0.00000	0.00109	1.99952
	783	0.00108	1.99952	2.00061	-0.00061	-0.00061	4.00013	-0.00013	-0.00026	5.99965	0.00035	0.00104	-0.00039	0.00017	0.00000		0.00000	0.00108	1.99952
	784	0.00107	1.99953	2.00060	-0.00060	-0.00060	4.00013	-0.00013	-0.00026	5.99966	0.00034	0.00103	-0.00039	0.00017	0.00000		0.00000	0.00107	1.99953
	785	0.00106	1.99953	2.00059	-0.00059	-0.00059	4.00013	-0.00013	-0.00026	5.99966	0.00034	0.00102	-0.00038	0.00017	0.00000		0.00000	0.00106	1.99953
	786	0.00105	1.99954	2.00059	-0.00059	-0.00059	4.00013	-0.00013	-0.00025	5.99966	0.00034	0.00101	-0.00038	0.00017	0.00000		0.00000	0.00105	1.99954
	787	0.00104	1.99954	2.00058	-0.00058	-0.00058	4.00013	-0.00013	-0.00025	5.99967	0.00033	0.00100	-0.00038	0.00017	0.00000		0.00000	0.00104	1.99954
	788	0.00103	1.99955	2.00058	-0.00058	-0.00058	4.00012	-0.00012	-0.00025	5.99967	0.00033	0.00099	-0.00037	0.00016	0.00000		0.00000	0.00103	1.99955
	789	0.00102	1.99955	2.00057	-0.00057	-0.00057	4.00012	-0.00012	-0.00025	5.99967	0.00033	0.00098	-0.00037	0.00016	0.00000		0.00000	0.00102	1.99955
	790	0.00101	1.99955	2.00057	-0.00057	-0.00057	4.00012	-0.00012	-0.00024	5.99968	0.00032	0.00097	-0.00037	0.00016	0.00000		0.00000	0.00101	1.99955
	791	0.00100	1.99956	2.00056	-0.00056	-0.00056	4.00012	-0.00012	-0.00024	5.99968	0.00032	0.00096	-0.00036	0.00016	0.00000		0.00000	0.00100	1.99956
	792	0.00100	1.99956	2.00056	-0.00056	-0.00056	4.00012	-0.00012	-0.00024	5.99968	0.00032	0.00095	-0.00036	0.00016	0.00000		0.00000	0.00100	1.99956
	793	0.00099	1.99957	2.00055	-0.00055	-0.00055	4.00012	-0.00012	-0.00024	5.99968	0.00032	0.00095	-0.00036	0.00016	0.00000		0.00000	0.00099	1.99957
	794	0.00098	1.99957	2.00055	-0.00055	-0.00055	4.00012	-0.00012	-0.00024	5.99969	0.00031	0.00094	-0.00035	0.00016	0.00000		0.00000	0.00098	1.99957
	795	0.00097	1.99957	2.00054	-0.00054	-0.00054	4.00012	-0.00012	-0.00023	5.99969	0.00031	0.00093	-0.00035	0.00015	0.00000		0.00000	0.00097	1.99957
	796	0.00096	1.99958	2.00054	-0.00054	-0.00054	4.00012	-0.00012	-0.00023	5.99969	0.00031	0.00092	-0.00035	0.00015	0.00000		0.00000	0.00096	1.99958
	797	0.00095	1.99958	2.00053	-0.00053	-0.00053	4.00011	-0.00011	-0.00023	5.99970	0.00030	0.00091	-0.00034	0.00015	0.00000		0.00000	0.00095	1.99958
	798	0.00094	1.99959	2.00053	-0.00053	-0.00053	4.00011	-0.00011	-0.00023	5.99970	0.00030	0.00090	-0.00034	0.00015	0.00000		0.00000	0.00094	1.99959
	799	0.00093	1.99959	2.00052	-0.00052	-0.00052	4.00011	-0.00011	-0.00022	5.99970	0.00030	0.00090	-0.00034	0.00015	0.00000		0.00000	0.00093	1.99959
	800	0.00093	1.99959	2.00052	-0.00052	-0.00052	4.00011	-0.00011	-0.00022	5.99970	0.00030	0.00089	-0.00033	0.00015	0.00000		0.00000	0.00093	1.99959
	801	0.00092	1.99960	2.00051	-0.00051	-0.00051	4.00011	-0.00011	-0.00022	5.99971	0.00029	0.00088	-0.00033	0.00015	0.00000		0.00000	0.00092	1.99960
	802	0.00091	1.99960	2.00051	-0.00051	-0.00051	4.00011	-0.00011	-0.00022	5.99971	0.00029	0.00087	-0.00033	0.00014	0.00000		0.00000	0.00091	1.99960
	803	0.00090	1.99960	2.00050	-0.00050	-0.00050	4.00011	-0.00011	-0.00022	5.99971	0.00029	0.00086	-0.00032	0.00014	0.00000		0.00000	0.00090	1.99960
	804	0.00089	1.99961	2.00050	-0.00050	-0.00050	4.00011	-0.00011	-0.00021	5.99971	0.00029	0.00086	-0.00032	0.00014	0.00000		0.00000	0.00089	1.99961
	805	0.00089	1.99961	2.00050	-0.00050	-0.00050	4.00011	-0.00011	-0.00021	5.99972	0.00028	0.00085	-0.00032	0.00014	0.00000		0.00000	0.00089	1.99961
	806	0.00088	1.99961	2.00049	-0.00049	-0.00049	4.00011	-0.00011	-0.00021	5.99972	0.00028	0.00084	-0.00032	0.00014	0.00000		0.00000	0.00088	1.99961
	807	0.00087	1.99962	2.00049	-0.00049	-0.00049	4.00010	-0.00010	-0.00021	5.99972	0.00028	0.00083	-0.00031	0.00014	0.00000		0.00000	0.00087	1.99962
	808	0.00086	1.99962	2.00048	-0.00048	-0.00048	4.00010	-0.00010	-0.00021	5.99972	0.00028	0.00083	-0.00031	0.00014	0.00000		0.00000	0.00086	1.99962
	809	0.00085	1.99962	2.00048	-0.00048	-0.00048	4.00010	-0.00010	-0.00021	5.99973	0.00027	0.00082	-0.00031	0.00014	0.00000		0.00000	0.00085	1.99962
	810	0.00085	1.99963	2.00047	-0.00047	-0.00047	4.00010	-0.00010	-0.00020	5.99973	0.00027	0.00081	-0.00031	0.00013	0.00000		0.00000	0.00085	1.99963
	811	0.00084	1.99963	2.00047	-0.00047	-0.00047	4.00010	-0.00010	-0.00020	5.99973	0.00027	0.00080	-0.00030	0.00013	0.00000		0.00000	0.00084	1.99963
	812	0.00083	1.99963	2.00047	-0.00047	-0.00047	4.00010	-0.00010	-0.00020	5.99973	0.00027	0.00080	-0.00030	0.00013	0.00000		0.00000	0.00083	1.99963
	813	0.00082	1.99964	2.00046	-0.00046	-0.00046	4.00010	-0.00010	-0.00020	5.99974	0.00026	0.00079	-0.00030	0.00013	0.00000		0.00000	0.00082	1.99964
	814	0.00082	1.99964	2.00046	-0.00046	-0.00046	4.00010	-0.00010	-0.00020	5.99974	0.00026	0.00078	-0.00029	0.00013	0.00000		0.00000	0.00082	1.99964
	815	0.00081	1.99964	2.00045	-0.00045	-0.00045	4.00010	-0.00010	-0.00019	5.99974	0.00026	0.00078	-0.00029	0.00013	0.00000		0.00000	0.00081	1.99964
	816	0.00080	1.99965	2.00045	-0.00045	-0.00045	4.00010	-0.00010	-0.00019	5.99974	0.00026	0.00077	-0.00029	0.00013	0.00000		0.00000	0.00080	1.99965
	817	0.00079	1.99965	2.00044	-0.00044	-0.00044	4.00010	-0.00010	-0.00019	5.99975	0.00025	0.00076	-0.00029	0.00013	0.00000		0.00000	0.00079	1.99965
	818	0.00079	1.99965	2.00044	-0.00044	-0.00044	4.00009	-0.00009	-0.00019	5.99975	0.00025	0.00075	-0.00028	0.00012	0.00000		0.00000	0.00079	1.99965
	819	0.00078	1.99966	2.00044	-0.00044	-0.00044	4.00009	-0.00009	-0.00019	5.99975	0.00025	0.00075	-0.00028	0.00012	0.00000		0.00000	0.00078	1.99966
	820	0.00077	1.99966	2.00043	-0.00043	-0.00043	4.00009	-0.00009	-0.00019	5.99975	0.00025	0.00074	-0.00028	0.00012	0.00000		0.00000	0.00077	1.99966
	821	0.00077	1.99966	2.00043	-0.00043	-0.00043	4.00009	-0.00009	-0.00018	5.99976	0.00024	0.00073	-0.00028	0.00012	0.00000		0.00000	0.00077	1.99966
	822	0.00076	1.99967	2.00043	-0.00043	-0.00043	4.00009	-0.00009	-0.00018	5.99976	0.00024	0.00073	-0.00027	0.00012	0.00000		0.00000	0.00076	1.99967
	823	0.00075	1.99967	2.00042	-0.00042	-0.00042	4.00009	-0.00009	-0.00018	5.99976	0.00024	0.00072	-0.00027	0.00012	0.00000		0.00000	0.00075	1.99967
	824	0.00075	1.99967	2.00042	-0.00042	-0.00042	4.00009	-0.00009	-0.00018	5.99976	0.00024	0.00071	-0.00027	0.00012	0.00000		0.00000	0.00075	1.99967
	825	0.00074	1.99968	2.00041	-0.00041	-0.00041	4.00009	-0.00009	-0.00018	5.99976	0.00024	0.00071	-0.00027	0.00012	0.00000		0.00000	0.00074	1.99968
	826	0.00073	1.99968	2.00041	-0.00041	-0.00041	4.00009	-0.00009	-0.00018	5.99977	0.00023	0.00070	-0.00026	0.00012	0.00000		0.00000	0.00073	1.99968
	827	0.00073	1.99968	2.00041	-0.00041	-0.00041	4.00009	-0.00009	-0.00017	5.99977	0.00023	0.00070	-0.00026	0.00012	0.00000		0.00000	0.00073	1.99968
	828	0.00072	1.99968	2.00040	-0.00040	-0.00040	4.00009	-0.00009	-0.00017	5.99977	0.00023	0.00069	-0.00026	0.00011	0.00000		0.00000	0.00072	1.99968
	829	0.00071	1.99969	2.00040	-0.00040	-0.00040	4.00009	-0.00009	-0.00017	5.99977	0.00023	0.00068	-0.00026	0.00011	0.00000		0.00000	0.00071	1.99969
	830	0.00071	1.99969	2.00040	-0.00040	-0.00040	4.00008	-0.00008	-0.00017	5.99977	0.00023	0.00068	-0.00025	0.00011	0.00000		0.00000	0.00071	1.99969
	831	0.00070	1.99969	2.00039	-0.00039	-0.00039	4.00008	-0.00008	-0.00017	5.99978	0.00022	0.00067	-0.00025	0.00011	0.00000		0.00000	0.00070	1.99969
	832	0.00069	1.99970	2.00039	-0.00039	-0.00039	4.00008	-0.00008	-0.00017	5.99978	0.00022	0.00066	-0.00025	0.00011	0.00000		0.00000	0.00069	1.99970
	833	0.00069	1.99970	2.00038	-0.00038	-0.00038	4.00008	-0.00008	-0.00017	5.99978	0.00022	0.00066	-0.00025	0.00011	0.00000		0.00000	0.00069	1.99970
	834	0.00068	1.99970	2.00038	-0.00038	-0.00038	4.00008	-0.00008	-0.00016	5.99978	0.00022	0.00065	-0.00025	0.00011	0.00000		0.00000	0.00068	1.99970
	835	0.00067	1.99970	2.00038	-0.00038	-0.00038	4.00008	-0.00008	-0.00016	5.99978	0.00022	0.00065	-0.00024	0.00011	0.00000		0.00000	0.00067	1.99970
	836	0.00067	1.99971	2.00037	-0.00037	-0.00037	4.00008	-0.00008	-0.00016	5.99979	0.00021	0.00064	-0.00024	0.00011	0.00000		0.00000	0.00067	1.99971
	837	0.00066	1.99971	2.00037	-0.00037	-0.00037	4.00008	-0.00008	-0.00016	5.99979	0.00021	0.00064	-0.00024	0.00011	0.00000		0.00000	0.00066	1.99971
	838	0.00066	1.99971	2.00037	-0.00037	-0.00037	4.00008	-0.00008	-0.00016	5.99979	0.00021	0.00063	-0.00024	0.00010	0.00000		0.00000	0.00066	1.99971
	839	0.00065	1.99971	2.00036	-0.00036	-0.00036	4.00008	-0.00008	-0.00016	5.99979	0.00021	0.00062	-0.00023	0.00010	0.00000		0.00000	0.00065	1.99971
	840	0.00064	1.99972	2.00036	-0.00036	-0.00036	4.00008	-0.00008	-0.00015	5.99979	0.00021	0.00062	-0.00023	0.00010	0.00000		0.00000	0.00064	1.99972
	841	0.00064	1.99972	2.00036	-0.00036	-0.00036	4.00008	-0.00008	-0.00015	5.99980	0.00020	0.00061	-0.00023	0.00010	0.00000		0.00000	0.00064	1.99972
	842	0.00063	1.99972	2.00035	-0.00035	-0.00035	4.00008	-0.00008	-0.00015	5.99980	0.00020	0.00061	-0.00023	0.00010	0.00000		0.00000	0.00063	1.99972
	843	0.00063	1.99972	2.00035	-0.00035	-0.00035	4.00008	-0.00008	-0.00015	5.99980	0.00020	0.00060	-0.00023	0.00010	0.00000		0.00000	0.00063	1.99972
	844	0.00062	1.99973	2.00035	-0.00035	-0.00035	4.00007	-0.00007	-0.00015	5.99980	0.00020	0.00060	-0.00022	0.00010	0.00000		0.00000	0.00062	1.99973
	845	0.00062	1.99973	2.00035	-0.00035	-0.00035	4.00007	-0.00007	-0.00015	5.99980	0.00020	0.00059	-0.00022	0.00010	0.00000		0.00000	0.00062	1.99973
	846	0.00061	1.99973	2.00034	-0.00034	-0.00034	4.00007	-0.00007	-0.00015	5.99980	0.00020	0.00059	-0.00022	0.00010	0.00000		0.00000	0.00061	1.99973
	847	0.00061	1.99973	2.00034	-0.00034	-0.00034	4.00007	-0.00007	-0.00015	5.99981	0.00019	0.00058	-0.00022	0.00010	0.00000		0.00000	0.00061	1.99973
	848	0.00060	1.99974	2.00034	-0.00034	-0.00034	4.00007	-0.00007	-0.00014	5.99981	0.00019	0.00058	-0.00022	0.00010	0.00000		0.00000	0.00060	1.99974
	849	0.00059	1.99974	2.00033	-0.00033	-0.00033	4.00007	-0.00007	-0.00014	5.99981	0.00019	0.00057	-0.00021	0.00009	0.00000		0.00000	0.00059	1.99974
	850	0.00059	1.99974	2.00033	-0.00033	-0.00033	4.00007	-0.00007	-0.00014	5.99981	0.00019	0.00056	-0.00021	0.00009	0.00000		0.00000	0.00059	1.99974
	851	0.00058	1.99974	2.00033	-0.00033	-0.00033	4.00007	-0.00007	-0.00014	5.99981	0.00019	0.00056	-0.00021	0.00009	0.00000		0.00000	0.00058	1.99974
	852	0.00058	1.99975	2.00032	-0.00032	-0.00032	4.00007	-0.00007	-0.00014	5.99982	0.00018	0.00055	-0.00021	0.00009	0.00000		0.00000	0.00058	1.99975
	853	0.00057	1.99975	2.00032	-0.00032	-0.00032	4.00007	-0.00007	-0.00014	5.99982	0.00018	0.00055	-0.00021	0.00009	0.00000		0.00000	0.00057	1.99975
	854	0.00057	1.99975	2.00032	-0.00032	-0.00032	4.00007	-0.00007	-0.00014	5.99982	0.00018	0.00054	-0.00020	0.00009	0.00000		0.00000	0.00057	1.99975
	855	0.00056	1.99975	2.00032	-0.00032	-0.00032	4.00007	-0.00007	-0.00014	5.99982	0.00018	0.00054	-0.00020	0.00009	0.00000		0.00000	0.00056	1.99975
	856	0.00056	1.99975	2.00031	-0.00031	-0.00031	4.00007	-0.00007	-0.00013	5.99982	0.00018	0.00053	-0.00020	0.00009	0.00000		0.00000	0.00056	1.99975
	857	0.00055	1.99976	2.00031	-0.00031	-0.00031	4.00007	-0.00007	-0.00013	5.99982	0.00018	0.00053	-0.00020	0.00009	0.00000		0.00000	0.00055	1.99976
	858	0.00055	1.99976	2.00031	-0.00031	-0.00031	4.00007	-0.00007	-0.00013	5.99982	0.00018	0.00053	-0.00020	0.00009	0.00000		0.00000	0.00055	1.99976
	859	0.00054	1.99976	2.00030	-0.00030	-0.00030	4.00007	-0.00007	-0.00013	5.99983	0.00017	0.00052	-0.00020	0.00009	0.00000		0.00000	0.00054	1.99976
	860	0.00054	1.99976	2.00030	-0.00030	-0.00030	4.00006	-0.00006	-0.00013	5.99983	0.00017	0.00052	-0.00019	0.00009	0.00000		0.00000	0.00054	1.99976
	861	0.00053	1.99977	2.00030	-0.00030	-0.00030	4.00006	-0.00006	-0.00013	5.99983	0.00017	0.00051	-0.00019	0.00008	0.00000		0.00000	0.00053	1.99977
	862	0.00053	1.99977	2.00030	-0.00030	-0.00030	4.00006	-0.00006	-0.00013	5.99983	0.00017	0.00051	-0.00019	0.00008	0.00000		0.00000	0.00053	1.99977
	863	0.00052	1.99977	2.00029	-0.00029	-0.00029	4.00006	-0.00006	-0.00013	5.99983	0.00017	0.00050	-0.00019	0.00008	0.00000		0.00000	0.00052	1.99977
	864	0.00052	1.99977	2.00029	-0.00029	-0.00029	4.00006	-0.00006	-0.00012	5.99983	0.00017	0.00050	-0.00019	0.00008	0.00000		0.00000	0.00052	1.99977
	865	0.00051	1.99977	2.00029	-0.00029	-0.00029	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00049	-0.00019	0.00008	0.00000		0.00000	0.00051	1.99977
	866	0.00051	1.99978	2.00029	-0.00029	-0.00029	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00049	-0.00018	0.00008	0.00000		0.00000	0.00051	1.99978
	867	0.00050	1.99978	2.00028	-0.00028	-0.00028	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00048	-0.00018	0.00008	0.00000		0.00000	0.00050	1.99978
	868	0.00050	1.99978	2.00028	-0.00028	-0.00028	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00048	-0.00018	0.00008	0.00000		0.00000	0.00050	1.99978
	869	0.00050	1.99978	2.00028	-0.00028	-0.00028	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00048	-0.00018	0.00008	0.00000		0.00000	0.00050	1.99978
	870	0.00049	1.99978	2.00028	-0.00028	-0.00028	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00047	-0.00018	0.00008	0.00000		0.00000	0.00049	1.99978
	871	0.00049	1.99979	2.00027	-0.00027	-0.00027	4.00006	-0.00006	-0.00012	5.99984	0.00016	0.00047	-0.00018	0.00008	0.00000		0.00000	0.00049	1.99979
	872	0.00048	1.99979	2.00027	-0.00027	-0.00027	4.00006	-0.00006	-0.00012	5.99985	0.00015	0.00046	-0.00017	0.00008	0.00000		0.00000	0.00048	1.99979
	873	0.00048	1.99979	2.00027	-0.00027	-0.00027	4.00006	-0.00006	-0.00011	5.99985	0.00015	0.00046	-0.00017	0.00008	0.00000		0.00000	0.00048	1.99979
	874	0.00047	1.99979	2.00027	-0.00027	-0.00027	4.00006	-0.00006	-0.00011	5.99985	0.00015	0.00045	-0.00017	0.00008	0.00000		0.00000	0.00047	1.99979
	875	0.00047	1.99979	2.00026	-0.00026	-0.00026	4.00006	-0.00006	-0.00011	5.99985	0.00015	0.00045	-0.00017	0.00007	0.00000		0.00000	0.00047	1.99979
	876	0.00047	1.99980	2.00026	-0.00026	-0.00026	4.00006	-0.00006	-0.00011	5.99985	0.00015	0.00045	-0.00017	0.00007	0.00000		0.00000	0.00047	1.99980
	877	0.00046	1.99980	2.00026	-0.00026	-0.00026	4.00006	-0.00006	-0.00011	5.99985	0.00015	0.00044	-0.00017	0.00007	0.00000		0.00000	0.00046	1.99980
	878	0.00046	1.99980	2.00026	-0.00026	-0.00026	4.00005	-0.00005	-0.00011	5.99985	0.00015	0.00044	-0.00016	0.00007	0.00000		0.00000	0.00046	1.99980
	879	0.00045	1.99980	2.00025	-0.00025	-0.00025	4.00005	-0.00005	-0.00011	5.99986	0.00014	0.00043	-0.00016	0.00007	0.00000		0.00000	0.00045	1.99980
	880	0.00045	1.99980	2.00025	-0.00025	-0.00025	4.00005	-0.00005	-0.00011	5.99986	0.00014	0.00043	-0.00016	0.00007	0.00000		0.00000	0.00045	1.99980
	881	0.00044	1.99980	2.00025	-0.00025	-0.00025	4.00005	-0.00005	-0.00011	5.99986	0.00014	0.00043	-0.00016	0.00007	0.00000		0.00000	0.00044	1.99980
	882	0.00044	1.99981	2.00025	-0.00025	-0.00025	4.00005	-0.00005	-0.00011	5.99986	0.00014	0.00042	-0.00016	0.00007	0.00000		0.00000	0.00044	1.99981
	883	0.00044	1.99981	2.00024	-0.00024	-0.00024	4.00005	-0.00005	-0.00010	5.99986	0.00014	0.00042	-0.00016	0.00007	0.00000		0.00000	0.00044	1.99981
	884	0.00043	1.99981	2.00024	-0.00024	-0.00024	4.00005	-0.00005	-0.00010	5.99986	0.00014	0.00042	-0.00016	0.00007	0.00000		0.00000	0.00043	1.99981
	885	0.00043	1.99981	2.00024	-0.00024	-0.00024	4.00005	-0.00005	-0.00010	5.99986	0.00014	0.00041	-0.00015	0.00007	0.00000		0.00000	0.00043	1.99981
	886	0.00043	1.99981	2.00024	-0.00024	-0.00024	4.00005	-0.00005	-0.00010	5.99986	0.00014	0.00041	-0.00015	0.00007	0.00000		0.00000	0.00043	1.99981
	887	0.00042	1.99981	2.00024	-0.00024	-0.00024	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00040	-0.00015	0.00007	0.00000		0.00000	0.00042	1.99981
	888	0.00042	1.99982	2.00023	-0.00023	-0.00023	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00040	-0.00015	0.00007	0.00000		0.00000	0.00042	1.99982
	889	0.00041	1.99982	2.00023	-0.00023	-0.00023	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00040	-0.00015	0.00007	0.00000		0.00000	0.00041	1.99982
	890	0.00041	1.99982	2.00023	-0.00023	-0.00023	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00039	-0.00015	0.00007	0.00000		0.00000	0.00041	1.99982
	891	0.00041	1.99982	2.00023	-0.00023	-0.00023	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00039	-0.00015	0.00006	0.00000		0.00000	0.00041	1.99982
	892	0.00040	1.99982	2.00023	-0.00023	-0.00023	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00039	-0.00015	0.00006	0.00000		0.00000	0.00040	1.99982
	893	0.00040	1.99982	2.00022	-0.00022	-0.00022	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00038	-0.00014	0.00006	0.00000		0.00000	0.00040	1.99982
	894	0.00040	1.99983	2.00022	-0.00022	-0.00022	4.00005	-0.00005	-0.00010	5.99987	0.00013	0.00038	-0.00014	0.00006	0.00000		0.00000	0.00040	1.99983
	895	0.00039	1.99983	2.00022	-0.00022	-0.00022	4.00005	-0.00005	-0.00009	5.99987	0.00013	0.00038	-0.00014	0.00006	0.00000		0.00000	0.00039	1.99983
	896	0.00039	1.99983	2.00022	-0.00022	-0.00022	4.00005	-0.00005	-0.00009	5.99988	0.00012	0.00037	-0.00014	0.00006	0.00000		0.00000	0.00039	1.99983
	897	0.00038	1.99983	2.00022	-0.00022	-0.00022	4.00005	-0.00005	-0.00009	5.99988	0.00012	0.00037	-0.00014	0.00006	0.00000		0.00000	0.00038	1.99983
	898	0.00038	1.99983	2.00021	-0.00021	-0.00021	4.00005	-0.00005	-0.00009	5.99988	0.00012	0.00037	-0.00014	0.00006	0.00000		0.00000	0.00038	1.99983
	899	0.00038	1.99983	2.00021	-0.00021	-0.00021	4.00005	-0.00005	-0.00009	5.99988	0.00012	0.00036	-0.00014	0.00006	0.00000		0.00000	0.00038	1.99983
	900	0.00037	1.99984	2.00021	-0.00021	-0.00021	4.00005	-0.00005	-0.00009	5.99988	0.00012	0.00036	-0.00014	0.00006	0.00000		0.00000	0.00037	1.99984
	901	0.00037	1.99984	2.00021	-0.00021	-0.00021	4.00004	-0.00004	-0.00009	5.99988	0.00012	0.00036	-0.00013	0.00006	0.00000		0.00000	0.00037	1.99984
	902	0.00037	1.99984	2.00021	-0.00021	-0.00021	4.00004	-0.00004	-0.00009	5.99988	0.00012	0.00035	-0.00013	0.00006	0.00000		0.00000	0.00037	1.99984
	903	0.00036	1.99984	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00009	5.99988	0.00012	0.00035	-0.00013	0.00006	0.00000		0.00000	0.00036	1.99984
	904	0.00036	1.99984	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00009	5.99988	0.00012	0.00035	-0.00013	0.00006	0.00000		0.00000	0.00036	1.99984
	905	0.00036	1.99984	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00009	5.99989	0.00011	0.00034	-0.00013	0.00006	0.00000		0.00000	0.00036	1.99984
	906	0.00035	1.99984	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00009	5.99989	0.00011	0.00034	-0.00013	0.00006	0.00000		0.00000	0.00035	1.99984
	907	0.00035	1.99985	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00034	-0.00013	0.00006	0.00000		0.00000	0.00035	1.99985
	908	0.00035	1.99985	2.00020	-0.00020	-0.00020	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00033	-0.00013	0.00006	0.00000		0.00000	0.00035	1.99985
	909	0.00035	1.99985	2.00019	-0.00019	-0.00019	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00033	-0.00012	0.00005	0.00000		0.00000	0.00035	1.99985
	910	0.00034	1.99985	2.00019	-0.00019	-0.00019	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00033	-0.00012	0.00005	0.00000		0.00000	0.00034	1.99985
	911	0.00034	1.99985	2.00019	-0.00019	-0.00019	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00033	-0.00012	0.00005	0.00000		0.00000	0.00034	1.99985
	912	0.00034	1.99985	2.00019	-0.00019	-0.00019	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00032	-0.00012	0.00005	0.00000		0.00000	0.00034	1.99985
	913	0.00033	1.99985	2.00019	-0.00019	-0.00019	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00032	-0.00012	0.00005	0.00000		0.00000	0.00033	1.99985
	914	0.00033	1.99985	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99989	0.00011	0.00032	-0.00012	0.00005	0.00000		0.00000	0.00033	1.99985
	915	0.00033	1.99986	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00031	-0.00012	0.00005	0.00000		0.00000	0.00033	1.99986
	916	0.00032	1.99986	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00031	-0.00012	0.00005	0.00000		0.00000	0.00032	1.99986
	917	0.00032	1.99986	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00031	-0.00012	0.00005	0.00000		0.00000	0.00032	1.99986
	918	0.00032	1.99986	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00031	-0.00011	0.00005	0.00000		0.00000	0.00032	1.99986
	919	0.00032	1.99986	2.00018	-0.00018	-0.00018	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00030	-0.00011	0.00005	0.00000		0.00000	0.00032	1.99986
	920	0.00031	1.99986	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00008	5.99990	0.00010	0.00030	-0.00011	0.00005	0.00000		0.00000	0.00031	1.99986
	921	0.00031	1.99986	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99990	0.00010	0.00030	-0.00011	0.00005	0.00000		0.00000	0.00031	1.99986
	922	0.00031	1.99987	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99990	0.00010	0.00029	-0.00011	0.00005	0.00000		0.00000	0.00031	1.99987
	923	0.00030	1.99987	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99990	0.00010	0.00029	-0.00011	0.00005	0.00000		0.00000	0.00030	1.99987
	924	0.00030	1.99987	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99990	0.00010	0.00029	-0.00011	0.00005	0.00000		0.00000	0.00030	1.99987
	925	0.00030	1.99987	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99990	0.00010	0.00029	-0.00011	0.00005	0.00000		0.00000	0.00030	1.99987
	926	0.00030	1.99987	2.00017	-0.00017	-0.00017	4.00004	-0.00004	-0.00007	5.99991	0.00009	0.00028	-0.00011	0.00005	0.00000		0.00000	0.00030	1.99987
	927	0.00029	1.99987	2.00016	-0.00016	-0.00016	4.00004	-0.00004	-0.00007	5.99991	0.00009	0.00028	-0.00011	0.00005	0.00000		0.00000	0.00029	1.99987
	928	0.00029	1.99987	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00028	-0.00010	0.00005	0.00000		0.00000	0.00029	1.99987
	929	0.00029	1.99987	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00028	-0.00010	0.00005	0.00000		0.00000	0.00029	1.99987
	930	0.00029	1.99987	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00027	-0.00010	0.00005	0.00000		0.00000	0.00029	1.99987
	931	0.00028	1.99988	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00027	-0.00010	0.00004	0.00000		0.00000	0.00028	1.99988
	932	0.00028	1.99988	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00027	-0.00010	0.00004	0.00000		0.00000	0.00028	1.99988
	933	0.00028	1.99988	2.00016	-0.00016	-0.00016	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00027	-0.00010	0.00004	0.00000		0.00000	0.00028	1.99988
	934	0.00028	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00026	-0.00010	0.00004	0.00000		0.00000	0.00028	1.99988
	935	0.00027	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00007	5.99991	0.00009	0.00026	-0.00010	0.00004	0.00000		0.00000	0.00027	1.99988
	936	0.00027	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00006	5.99991	0.00009	0.00026	-0.00010	0.00004	0.00000		0.00000	0.00027	1.99988
	937	0.00027	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00006	5.99991	0.00009	0.00026	-0.00010	0.00004	0.00000		0.00000	0.00027	1.99988
	938	0.00027	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00025	-0.00010	0.00004	0.00000		0.00000	0.00027	1.99988
	939	0.00026	1.99988	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00025	-0.00009	0.00004	0.00000		0.00000	0.00026	1.99988
	940	0.00026	1.99989	2.00015	-0.00015	-0.00015	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00025	-0.00009	0.00004	0.00000		0.00000	0.00026	1.99989
	941	0.00026	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00025	-0.00009	0.00004	0.00000		0.00000	0.00026	1.99989
	942	0.00026	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00025	-0.00009	0.00004	0.00000		0.00000	0.00026	1.99989
	943	0.00025	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00024	-0.00009	0.00004	0.00000		0.00000	0.00025	1.99989
	944	0.00025	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00024	-0.00009	0.00004	0.00000		0.00000	0.00025	1.99989
	945	0.00025	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00024	-0.00009	0.00004	0.00000		0.00000	0.00025	1.99989
	946	0.00025	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00024	-0.00009	0.00004	0.00000		0.00000	0.00025	1.99989
	947	0.00024	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00023	-0.00009	0.00004	0.00000		0.00000	0.00024	1.99989
	948	0.00024	1.99989	2.00014	-0.00014	-0.00014	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00023	-0.00009	0.00004	0.00000		0.00000	0.00024	1.99989
	949	0.00024	1.99989	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00023	-0.00009	0.00004	0.00000		0.00000	0.00024	1.99989
	950	0.00024	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00023	-0.00009	0.00004	0.00000		0.00000	0.00024	1.99990
	951	0.00024	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99992	0.00008	0.00023	-0.00009	0.00004	0.00000		0.00000	0.00024	1.99990
	952	0.00023	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99993	0.00007	0.00022	-0.00008	0.00004	0.00000		0.00000	0.00023	1.99990
	953	0.00023	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99993	0.00007	0.00022	-0.00008	0.00004	0.00000		0.00000	0.00023	1.99990
	954	0.00023	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00006	5.99993	0.00007	0.00022	-0.00008	0.00004	0.00000		0.00000	0.00023	1.99990
	955	0.00023	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00022	-0.00008	0.00004	0.00000		0.00000	0.00023	1.99990
	956	0.00023	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00022	-0.00008	0.00004	0.00000		0.00000	0.00023	1.99990
	957	0.00022	1.99990	2.00013	-0.00013	-0.00013	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00021	-0.00008	0.00004	0.00000		0.00000	0.00022	1.99990
	958	0.00022	1.99990	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00021	-0.00008	0.00004	0.00000		0.00000	0.00022	1.99990
	959	0.00022	1.99990	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00021	-0.00008	0.00003	0.00000		0.00000	0.00022	1.99990
	960	0.00022	1.99990	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00021	-0.00008	0.00003	0.00000		0.00000	0.00022	1.99990
	961	0.00022	1.99991	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00021	-0.00008	0.00003	0.00000		0.00000	0.00022	1.99991
	962	0.00021	1.99991	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00020	-0.00008	0.00003	0.00000		0.00000	0.00021	1.99991
	963	0.00021	1.99991	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00020	-0.00008	0.00003	0.00000		0.00000	0.00021	1.99991
	964	0.00021	1.99991	2.00012	-0.00012	-0.00012	4.00003	-0.00003	-0.00005	5.99993	0.00007	0.00020	-0.00008	0.00003	0.00000		0.00000	0.00021	1.99991
	965	0.00021	1.99991	2.00012	-0.00012	-0.00012	4.00002	-0.00002	-0.00005	5.99993	0.00007	0.00020	-0.00007	0.00003	0.00000		0.00000	0.00021	1.99991
	966	0.00021	1.99991	2.00012	-0.00012	-0.00012	4.00002	-0.00002	-0.00005	5.99993	0.00007	0.00020	-0.00007	0.00003	0.00000		0.00000	0.00021	1.99991
	967	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99993	0.00007	0.00020	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	968	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	969	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	970	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	971	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	972	0.00020	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00020	1.99991
	973	0.00019	1.99991	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00019	-0.00007	0.00003	0.00000		0.00000	0.00019	1.99991
	974	0.00019	1.99992	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00019	1.99992
	975	0.00019	1.99992	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00019	1.99992
	976	0.00019	1.99992	2.00011	-0.00011	-0.00011	4.00002	-0.00002	-0.00005	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00019	1.99992
	977	0.00019	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00019	1.99992
	978	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00018	1.99992
	979	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00018	-0.00007	0.00003	0.00000		0.00000	0.00018	1.99992
	980	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00007	0.00003	0.00000		0.00000	0.00018	1.99992
	981	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00006	0.00003	0.00000		0.00000	0.00018	1.99992
	982	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00006	0.00003	0.00000		0.00000	0.00018	1.99992
	983	0.00018	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00006	0.00003	0.00000		0.00000	0.00018	1.99992
	984	0.00017	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99992
	985	0.00017	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99994	0.00006	0.00017	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99992
	986	0.00017	1.99992	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99992
	987	0.00017	1.99993	2.00010	-0.00010	-0.00010	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99993
	988	0.00017	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99993
	989	0.00017	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99993
	990	0.00017	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00017	1.99993
	991	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00016	1.99993
	992	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00016	-0.00006	0.00003	0.00000		0.00000	0.00016	1.99993
	993	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00003	0.00000		0.00000	0.00016	1.99993
	994	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00003	0.00000		0.00000	0.00016	1.99993
	995	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00003	0.00000		0.00000	0.00016	1.99993
	996	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00002	0.00000		0.00000	0.00016	1.99993
	997	0.00016	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00002	0.00000		0.00000	0.00016	1.99993
	998	0.00015	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00002	0.00000		0.00000	0.00015	1.99993
	999	0.00015	1.99993	2.00009	-0.00009	-0.00009	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00006	0.00002	0.00000		0.00000	0.00015	1.99993
	1000	0.00015	1.99993	2.00008	-0.00008	-0.00008	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00015	-0.00005	0.00002	0.00000		0.00000	0.00015	1.99993
	1001	0.00015	1.99993	2.00008	-0.00008	-0.00008	4.00002	-0.00002	-0.00004	5.99995	0.00005	0.00014	-0.00005	0.00002	0.00000		0.00000	0.00015	1.99993

&A	

Page &P	

f(x)	2	4	6	h(x)	2.00008402757959	4.00001803223992	5.99995203690024	




reading content from C:\Users\Asus\Desktop\Bee\IP_labs.pdf#page=28-28-32.pdf


Image Processing - Laboratory 4: Geometrical features of binary objects 

 

 

27 

4. Geometrical features of binary objects 
 

4.1. Introduction 

 
This lab work presents some important geometric properties of binary images and the 

algorithms used for computing them. The properties described are the area, the center of mass, the 

elongation axis, the perimeter, the thinness ratio, the aspect ratio and the projections of the binary 

image.  

 

4.2. Theoretical considerations 
  

After applying segmentation and labeling algorithms, we obtain a new image where each object 

can be referred separately: 

 

𝐼𝑖(𝑟, 𝑐) = {
1,      if 𝐼(𝑟, 𝑐) ∈ object labeled 'i'
0,      otherwise 

 

 

where 𝑟 ∈ [0. . . 𝐻𝑒𝑖𝑔ℎ𝑡 − 1] and 𝑐 ∈ [0. . . 𝑊𝑖𝑑𝑡ℎ − 1]  
 

An object ‘i’ in the image is described by the function:  

The geometric properties of the objects can be classified into two categories:  

• position and orientation properties: the center of mass, the area, the perimeter, the 

elongation axis; 

• shape properties: aspect ratio, thinness ratio, Euler’s number, the projections, the Feret 

diameters of the objects. 

 

4.2.1. Area 

𝐴𝑖 = ∑ ∑ 𝐼𝑖(𝑟, 𝑐)

𝑊−1

𝑐=0

𝐻−1

𝑟=0

 

 

The area Ai is measured in pixels and it indicates the relative size of the object. 

 

4.2.2. The center of mass 
 

�̄�𝑖 =
1

𝐴𝑖
∑ ∑ 𝑟𝐼𝑖(𝑟, 𝑐)

𝑊−1

𝑐=0

𝐻−1

𝑟=0

 

�̄�𝑖 =
1

𝐴𝑖
∑ ∑ 𝑐𝐼𝑖(𝑟, 𝑐)

𝑊−1

𝑐=0

𝐻−1

𝑟=0

 

 

The equations above correspond to the row and column where the center of mass is located. 

This attribute helps us locate the object in a bi-dimensional image. 

 

4.2.3. The axis of elongation (the axis of least second order moment) 

 

𝑡𝑎𝑛( 2𝜑𝑖) =
2 ∑ ∑ (𝑟 − �̄�𝑖)(𝑐 − �̄�𝑖)𝐼𝑖(𝑟, 𝑐)𝑊−1

𝑐=0
𝐻−1
𝑟=0

∑ ∑ (𝑐 − �̄�𝑖)2𝐼𝑖(𝑟, 𝑐) − ∑ ∑ (𝑟 − �̄�𝑖)2𝑊−1
𝑐=0 𝐼𝑖(𝑟, 𝑐)𝐻−1

𝑟=0
𝑊−1
𝑐=0

𝐻−1
𝑟=0

 



Technical University of Cluj-Napoca, Computer Science Department 

 

 

28 

If both the nominator and the denominator of the above equation are equal to zero, then the 

object has a circular symmetry, and any line that passes through the center of mass is a symmetry 

axis. 

For finding the direction of the line (the angle) one must apply the arctangent function. The 

arctangent is defined on the interval (-∞, +∞) and it takes values in the interval  

(-π/2, π/2). The evaluation of the arctangent becomes unstable when the denominator of the fraction 

tends to zero.  

The signs of the numerator and of the denominator are important for determining the right 

quadrant in which the result lays. The arctangent function does not make the difference between 

directions that are opposed. For this reason, the usage of the function “atan2” is suggested. The 

“atan2” function has as arguments the numerator and the denominator of such fraction, and it returns 

a result in the interval (-π, π). 

The axis of elongation gives information about how the object is positioned in the field of 

view, more exactly, its orientation. The axis corresponds to the direction in which the object (seen as 

a plane surface of constant width) can rotate most easily (has a minimum kinetic moment).  

 After the i  angle is found, the correctness of the resulted value can be validated by drawing 

the axis of elongation. The axis of elongation will correspond to the line that passes through the center 

of mass and determines the i  angle with Ox axis.  

   

4.2.4. The perimeter  

 

 The perimeter of the object helps us determine the position of the object in space and it also 

gives information about the shape of the object. The perimeter can be computed by counting the 

number of pixels on the contour (pixels of value 1 and having at least one neighbor pixel of value 0). 

 A first approach to contour detection is the scanning of the image, line by line and counting 

the number of pixels in the object that satisfy the condition mentioned above. A main disadvantage 

of this method is that we cannot distinguish the exterior contour from the interior contours (if they 

exist, they are generated by the holes in the object). As the pixels of digital images represent 

distributions on a rectangular raster, the length of curves and oblique lines in the image cannot be 

correctly estimated by counting the pixels. A first correction is given by the multiplication by π/4 of 

the perimeter that resulted in the previous algorithm. There are other methods for length correction. 

These methods take into account the type of neighborhood used (4 neighbors, 8 neighbors etc.). 

 Another method for detecting the contour of an object involves the usage of an existing 

algorithm for edge detection, the thinning of the edges until they become 1 pixel thick and in the end 

the counting of the resulted edge pixels. 

 Methods of type “chain-codes” represent complex methods for contour detection and offer a 

high accuracy. 

 

4.2.5. The thinness ratio (circularity) 

 

 

 The function above has the maximum value equal to 1, and for this value we obtain a circle. 

The thinness ratio is used for determining how “round” an object is. If the value of T is close to 1, the 

object tends to be round. 









=

2
4

P

A
T 



Image Processing - Laboratory 4: Geometrical features of binary objects 

 

 

29 

 The value of the thinness ratio also offers information on how regular an object is. The objects 

that have a regular contour have a greater value of T than the objects of irregular contours. The value 

1/T is called irregularity factor of the object (or compactness factor). 

 

 

4.2.6. The aspect ratio 

 

 This property is found by scanning the image and keeping the minimum and maximum 

values of the lines and columns that form the rectangle circumscribed to the object. 

 

 

 

4.2.7. The projections of the binary object 

 

 The projections give information about the shape of the object. The horizontal projection 

equals the sum of pixels computed on each line of the image, and the vertical projection is given by 

the sum of the pixels on the columns.  

 

 

ℎ𝑖(𝑟) = ∑ 𝐼𝑖(𝑟, 𝑐)𝑊−1
𝑐=0       𝑣𝑖(𝑐) = ∑ 𝐼𝑖(𝑟, 𝑐)𝐻−1

𝑟=0  

 

 

 The projections are used in applications of text recognition in which the interest object can be 

normalized.  

 

4.3. Implementation details 
 

In order to distinguish between the various objects present in an image, we will suppose that 

each one of them is painted using a different color. These colors may be the result of a previous 

labeling step or may be generated manually (see Fig. 4.1). 

 

 
Fig. 4.1 Example of a labeled image on which the described algorithms could be tested 

1

1

minmax

minmax

+−

+−
=

rr

cc
R



Technical University of Cluj-Napoca, Computer Science Department 

 

 

30 

There are various approaches for implementing the geometrical properties extractors:  

 

4.3.1. Compute the geometrical features for all objects in an image at once 

 

For each object, the compound pixels are selected based on the object unique label (color) and 

the corresponding geometrical features are computed. This procedure is applied to each object from 

the input labeled image. 

 

4.3.2. Compute the geometrical features for a specific object selected with the mouse 

 

The user should position the mouse pointer over a pixel belonging to the desired object and 

click on it. In response to this action, the geometrical features of the desired object should be 

computed and displayed in the standard output. 

 

In order to add an event handler, we will use the setMouseCallback function from OpenCV, 

which has the role to set a handler for the mouse in a specific window.  

 
void setMouseCallback(const string& winname, MouseCallback onMouse, void* userdata=0) 

winname – window title, 

onMouse – callback function name that is called when a mouse event occurs on the winname 

window, 

userdata – optional parameter that may be passed to the callback function. 

 
The computation of the desired features will be implemented in onMouse function. 

 
void onMouse (int event, int x, int y, int flags, void* param) 

event – is the mouse event and can take the following values: 

- EVENT_MOUSEMOVE 

- EVENT_LBUTTONDOWN 

- EVENT_RBUTTONDOWN 

- EVENT_MBUTTONDOWN 

- EVENT_LBUTTONUP 

- EVENT_RBUTTONUP 

- EVENT_MBUTTONUP 

- EVENT_LBUTTONDBLCLK 

- EVENT_RBUTTONDBLCLK 

- EVENT_MBUTTONDBLCLK 

x, y – are the x and y coordinates where the event occurred, 

flags – specific condition whenever a mouse event occurs, 

param – corresponds to the userdata pointer passed through setMouseCallback function. 
 

In OpenCVApplication framework, an example of event handler is presented in the 

testMouseClick() function.  
 

In order to draw the elongation axis, use the line function from OpenCV to draw the line: 
  

void line( Mat img,  Point pStart, Point pEnd, Scalar color, int thickness ) 

 img – image where the line segment is drawn 

 pStart, pEnd – the two points that define the line segment 

 color – line color 

 thickness – line thickness 



Image Processing - Laboratory 4: Geometrical features of binary objects 

 

 

31 

4.4. Practical work 
 

1. For a specific object in a labeled image selected by a mouse click, compute the object’s area, 

center of mass, axis of elongation, perimeter, thinness ratio and aspect ratio.  

a. Display the results in the standard output 

b. In a separate image (source image clone): 

o Draw the contour points of the selected object 

o Display the center of mass of the selected object 

o Display the axis of elongation of the selected object by using the line function from 

OpenCV. 

c. Compute and display the projections of the selected object in a separate image (source 

image clone). 

2. Create a new processing function which takes as input a labeled image and keeps in the output 

image only the objects that: 

a. have their area < TH_area 

b. have a specific orientation phi, where phi_LOW < phi < phi_HIGH  

where TH_area, phi_LOW, phi_HIGH are given by the user.  

3. Save your work. Use the same application in the next laboratories. At the end of the image 

processing laboratory, you should present your own application with the implemented 

algorithms!!! 

 

4.5. Bibliography 
 

[1] Umbaugh Scot E., Computer Vision and Image Processing, Prentice Hall, NJ, 1998, ISBN 0-13-

264599-8.  


	Image processing
	4. Geometrical features of binary objects
	4.1. Introduction
	4.2. Theoretical considerations
	4.2.1. Area
	4.2.2. The center of mass
	4.2.3. The axis of elongation (the axis of least second order moment)
	4.2.4. The perimeter
	4.2.5. The thinness ratio (circularity)
	4.2.6. The aspect ratio
	4.2.7. The projections of the binary object

	4.3. Implementation details
	4.3.1. Compute the geometrical features for all objects in an image at once
	4.3.2. Compute the geometrical features for a specific object selected with the mouse

	4.4. Practical work
	4.5. Bibliography




reading content from C:\Users\Asus\Desktop\Bee\IP_labs.pdf#page=28-34-38.pdf


Image Processing - Laboratory 5: Connected-component labeling 

 

 

33 

5. Connected-component labeling 
 

5.1. Introduction 
 

 This laboratory work presents algorithms for labeling distinct objects from a black and white 

image. As a result, every object will be assigned a unique number. This number, or label, can be used 

to process the objects separately. 

 

5.2. Theoretical foundations 
 

 We will present several algorithms for labeling. The input for the algorithms is a binary image. 

The output is a label matrix which has the same dimensions as the input image. It should be capable 

of storing sufficiently large label values.  

 In the input binary image, the objects are represented as connected components of color black 

(0), the background is assigned the color white (255). To define what a connected component is, we 

need to introduce different neighborhood types. 

 The 4-neighborhood of a position (i,j) is defined to be the set of positions:  

N4(i,j)={(i-1,j), (i,j-1), (i+1,j), (i,j+1)}, 

i.e., the upper, left, lower and right neighbors.  

 The 8-neighborhood consists of all neighboring positions differing by at most 1: 
N8(i,j) = {(k,l) | |k-i|≤1, |l-j|≤1, (k,l)≠(i,j) }, 

so, it includes the 4-neighborhood and the neighbors situated diagonally. 

 When traversing the image in a particular direction we can define the previous neighbors with 

regard to this traversal. The previous neighbors for normal top-down, left-right traversal for a position 

(i,j) is:  

Np(i,j)={(i,j-1), (i-1,j-1), (i-1,j), (i-1,j+1)}. 

 

The presented definitions are illustrated below.  

 

           

 x    x    x  

           
             a) 4-neighborhood          b) 8-neighborhood     c) previous neighbors 

 

We will define a graph generated by a binary image. The set of vertices is formed by all object 

pixel positions. The neighboring object pixels determine the edges of the graph. Two positions are 

neighboring if one is part of the other's neighborhood. We will use N4 and N8, so the generated graph 

is undirected. In this setting a connected component is a set of vertices in which for each pair there is 

path from vertex 1 to vertex 2.  

 

5.2.1. Algorithm 1 - Breadth first traversal 

 

We start the description with a straightforward method for labeling, which relies on breadth 

first traversal of the graph defined on the image. The first step is to initialize the label matrix to zeroes 

which indicates that everything is unlabeled. Then algorithm searches for an unlabeled object pixel. 

If it finds one, it gives it a new label and propagates the label to its neighbors. We repeat this until all 

object pixels are given a label. In the following we present the steps of the algorithm:  



Technical University of Cluj-Napoca, Computer Science Department 

 

 

34 

label = 0    

labels = zeros(height, width) // height x width matrix with 0  

for i = 0:height-1 

 for j = 0:width-1 

  if img(i,j)==0 and labels(i,j)==0 

   label++ 

   Q = queue()  

   labels(i,j) = label 

   Q.push( (i,j) ) 

   while Q not empty 

    q = Q.pop()     

    for each neighbor in N8(q) 

     if img(neighbor)==0 and labels(neighbor)==0 

      labels(neighbor) = label 

      Q.push( neighbor ) 

Algorithm 1. Breadth first traversal for connected-component labeling 

 

The queue data structure maintains the list of points that need to be labeled. Since the queue 

uses a FIFO policy we obtain a breadth first traversal. We mark visited nodes by setting the label for 

their position. Changing the data structure to a stack would result in a depth first traversal of the image 

graph. 

 

5.2.2. Algorithm 2 - Two-pass with equivalence classes 

 

Labeling can be achieved by performing two linear passes over the image and some additional 

processing on a smaller graph. This approach uses less memory. In the previous algorithm we needed 

the store a list of points. If there is a large connected component, the size of the list is roughly the 

same as the size of the image.  

The current algorithm performs the first pass and labels all object pixels with initial labels. 

For each pixel we need to consider the previously visited and labeled pixels, so we use the Np 

neighborhood defined above. After inspecting the labels of the previous positions, we can have the 

following cases: 

• If no previous neighbor was labeled, we create a new label. 

• Otherwise, we take the smallest label, called x, from the neighbors. Afterwards, we mark each 

neighboring label y as equivalent to x. 

We assign the label found in the previous step to the current position and continue. After the 

first pas we have assigned initial labels to each position. However, several labels are equivalent, so 

we need to assign new ones to each equivalence class.  

The equivalence relations define an undirected graph on the labels. This graph is usually much 

smaller than the original graph defined on the whole image. It consists of nodes labeled from 1 to the 

maximum label value. The edges of the graph indicate the equivalence relations. We can apply 

Algorithm 1 on this smaller graph to obtain a new list of labels. All labels equivalent to label 1 get 

relabeled to 1. The next connected component not equivalent to 1 gets relabeled to 2, and so on. A 

new pass over the labels’ matrix is necessary to update the labels. 

  



Image Processing - Laboratory 5: Connected-component labeling 

 

 

35 

label = 0 

labels = zeros(height, width) 

vector<vector<int>> edges(1000) 

for i = 0:height-1 

 for j = 0:width-1 

  if img(i,j)==0 and labels(i,j)==0 

   L = vector() 

   for each neighbor in Np(i,j) 

    if labels(neighbor)>0 

     L.push_back(labels(neighbor)) 

   if L.size() == 0  // assign new label 

    label++ 

    labels(i,j) = label 

   else     // assign smallest neighbor 

    x = min(L) 

    labels(i,j) = x 

    for each y from L 

                    if (y <> x)  

     edges[x].push_back(y) 

     edges[y].push_back(x) 

 

newlabel = 0     

newlabels = zeros(label+1)   // an array of zeroes of length label+1 

for i = 1:label 

 if newlabels[i]==0 

  newlabel++ 

  Q = queue() 

  newlabels[i] = newlabel 

  Q.push( i ) 

  while Q not empty 

   x = Q.pop() 

   for each y in edges[x] 

    if newlabels[y] == 0 

     newlabels[y] = newlabel 

     Q.push( y ) 

           

for i = 0:height-1 

 for j = 0:width-1 

  labels(i,j) = newlabels[labels(i,j)]    

Algorithm 2. Two-pass connected-component labeling 

 

 

 

 

 
Fig. 5.1 Example of a case when the previous neighbors have different labels.  

Labels 1 and 2 are marked as equivalent at this step 

 



Technical University of Cluj-Napoca, Computer Science Department 

 

 

36 

5.3. Implementation details 
 

The following code illustrates how to visit the 4-neighborhood of a pixel. It can be easily 

modified to 8-neighborhood, or to only consider the upper and left neighbors of the pixel. 

 
int di[4] = {-1,0,1,0}; 

int dj[4] = {0,-1,0,1}; 

uchar neighbors[4]; 

for(int k=0; k<4; k++) 

neighbors[k] = img.at<uchar>(i+di[k], j+dj[k]); 

 

Pay attention to stay within the bounds of the image!  

 

Store the labels in a matrix capable of holding the maximum number of labels: 

 

28
 = 256 - uchar (CV_8UC1)  

216 = 65536 - short (CV_16SC1)  

232 ~ 2.1e9 - int (CV_32SC1)  

 

You can use the std∷stack and std∷queue container for storing points for Algorithm 1 

to obtain DFS and BFS traversal, respectively. The points can be instances of structure 

pair<int,int>. Sample code for initializing and performing operations on a queue: 

 
#include <queue> 

queue<pair<int,int>> Q; 

Q.push( pair<int,int>(i,j) ); // add as tail of the queue (newest) 

pair<int,int> p = Q.front();  // access the front element (oldest) 

Q.pop(); // remove the front element 

// access position of p 

i = p.first; j = p.second; 

 

The equivalence relations that define the edges of the smaller graph can be stored using 

adjacency lists in a vector<vector<uchar>>.  Sample code to initialize and insert edges: 

 
// ensure that edges has the proper size 

vector<vector<int>> edges(1000); 

// if u is equivalent to v 

edges[u].push_back(v); 

edges[v].push_back(u); 

 

To display the label matrix as a color image you need to generate a random color for each 

label. You should use the default random generator from the standard library. It is better than a call 

to rand()%256. 

 
#include <random> 

default_random_engine gen; 

uniform_int_distribution<int> d(0,255); 

uchar x = d(gen); 

  



Image Processing - Laboratory 5: Connected-component labeling 

 

 

37 

5.4. Labeling examples 
 

 
 

 
Fig. 5.2 Labeling examples 

 

5.5. Practical Work 
 

1. Implement the breadth first traversal component labeling algorithm (Algorithm 1). You should be 

able to easily switch between the neighborhood types of 4 and 8. 

2. Implement a function which generates a color image from a label matrix by assigning a random 

color to each label. Display the results. 

3. Implement the two-pass component labeling algorithm. Display the intermediate results you get 

after the first pass over the image. Compare this to the final results and to the previous algorithm. 

4. Optionally, visualize the process of labeling by showing intermediate results and pausing after 

each step to illustrate the order of traversal a selected algorithm. 

5. Optionally, change the queue to a stack to perform DFS traversal. 

6. Save your work. Use the same application in the next laboratories. At the end of the image 

processing laboratory, you should present your own application with the implemented 

algorithms!!! 

 

5.6. Bibliography 
 

[1] Umbaugh Scot E., Computer Vision and Image Processing, Prentice Hall, NJ, 1998, ISBN 0-13-

264599-8 

[2] Robert M. Haralick, Linda G. Shapiro, Computer and Robot Vision, Addison-Wesley Publishing 

Company, 1993. 

  


	Image processing
	5. Connected-component labeling
	5.1. Introduction
	5.2. Theoretical foundations
	5.2.1. Algorithm 1 - Breadth first traversal
	5.2.2. Algorithm 2 - Two-pass with equivalence classes

	5.3. Implementation details
	5.4. Labeling examples
	5.5. Practical Work
	5.6. Bibliography




reading content from C:\Users\Asus\Desktop\Bee\Laborator 5 FLT (ro).pdf


Laborator 5 

Arbori dezechilibrați și interpretor de expresii postfix 

 
În laboratorul al treilea am aflat cum se stochează simbolurile pe stivă și cum se 

procesează și se propagă valorile semantice (cu ajutorul pseudo-variabilelor dolari) bottom-up în 

arborele sintactic (parse tree). În cazul expresiilor aritmetice, pe stiva de valori erau stocate doar 

valori de tip întreg, care în urma unei reduceri se substituiau tot cu o valoare întreagă. La o 

reducere, partea dreaptă a unei producții se înlocuia cu (se reducea la) partea stângă. 

În laboratorul al patrulea am lucrat și cu liste, fapt pentru care a fost nevoie să definim un 

%union cu un câmp pentru numere întregi și un câmp pentru liste. Pe stiva de valori ajung să 

coexiste și numere și liste, de aceea trebuie să facem stiva omogenă, cu elemente de același tip, 

și anume union. Acest union, în cazul de față, este un fel de wrapper, care conferă o formă 

comună numerelor și listelor. Deși la citirea unui token din input se pune pe stiva de valori doar 

câte un întreg, în urma unei reduceri (când se recunoaște în input o structură sintactică agregată), 

ajunge să se pună pe stiva de valori o valoare de tip agregat. În cazul de față, structura de date 

agregată este lista. 

Așadar, ne putem imagina cum arată arborele sintactic la citirea și crearea unei liste. La 

fiecare pas, pe stiva de valori se pune câte un element de tip întreg dintr-o listă. Când în stiva de 

valori există un întreg SAU un întreg și o listă, acestea vor fi reduse la o singură listă. În regula 

enum din setul de producții (din laboratorul 4) este descrisă compunerea unei liste intern, ca 

structură de date. Regula poate fi recursivă dreapta sau recursivă stânga. În primul caz, se 

introduce un element la începutul listei, iar arborele este dezechilibrat pe dreapta. În al doilea 

caz, se introduce un element la finalul listei, iar arborele este dezechilibrat pe stânga. 

Introducerea unui element la finalul unei liste este o metodă ineficientă, deoarece trebuie 

parcursă toată lista.  

Recursivitate dreapta:       Recursivitate stânga: 

       

 

enum -> NUMBER enum 

      | NUMBER  

 

enum -> enum NUMBER 

      | NUMBER  

 



În primul caz, pe stiva de valori se stochează la fiecare pas toate elementele citite până 

acum din listă. După stocarea ultimului element, începe extragerea de pe stivă și adăugarea 

efectivă în listă a elementelor, începând cu ultimul (cel mai din dreapta) și terminând cu primul 

(cel mai din stânga). Adică se adaugă elementele în lista finală în ordine, de la dreapta la stânga, 

printr-o simplă adăugare pas cu pas în capul unei liste parțiale. În al doilea caz, se păstrează în 

stiva de valori doar elementul care se introduce în listă la pasul curent.  

Să luăm ca exemplu compunerea listei ‘(1 2 3 4). În tabelul următor putem vedea cum 

evoluează stiva de valori la compunerea unei liste recursiv dreapta, respectiv recursiv stânga.  

Recursivitate dreapta Recursivitate stânga 

Stiva de valori: 
  1 
  1 2 
  1 2 3 
  1 2 3 4 
  1 2 3 
  1 2 
  1 

Stiva de valori: 
  1 
  2 
  3 
  4 

Compunerea listei: 
           4 
       3  4 
     2 3 4 
  1 2 3 4 

Compunerea listei: 
  1 
  1 2 
  1 2 3 
  1 2 3 4 

 Următoarea provocare este să creăm un analizor lexico-sintactic pentru a transforma 

expresii aritmetice din formă infix în formă postfix.  

 Exemple:  

 1 + 2 =>    1 2 + 

 (a – 5 + c) * 2 =>   a 5 – c + 2 * 

  a / 2 + – (a – 5 + c) * 2 ^ b =>     a 2 / a 5 – c + – 2 b ^ * + 

 Observăm că inputul poate să conțină variabile, pe lângă numere și operatori. Având în 

vedere că nu putem calcula expresiile, ci trebuie doar să le modificăm forma, le putem stoca sub 

formă de string-uri. În acest caz, canalul de comunicare semantică între analizorul lexical și 

parserul sintactic, yylval, trebuie să accepte string-uri, deci poate fi reprezentat ca un %union cu 

un câmp de string-uri.  

 În acest exercițiu sunt foarte importante prioritățile operațiilor, pentru a asigura o 

transpunere corectă a expresiilor. Ne amintim din laboratorul al treilea că prioritățile operațiilor 

sunt specificate în partea de declarații a fișierului .y, cu %left, %right sau %nonassoc. Ordinea în 

care sunt declarate indică importanța lor: prima are cea mai mică prioritate, iar ultima are cea 

mai mare prioritate. Dacă asociativitatea este pe stânga (%left), atunci o serie de operații cu 



aceleași priorități va fi tratată de la stânga spre dreapta. Dacă asociativitatea este pe dreapta 

(%right), atunci seria va fi tratată din dreapta spre stânga. Există situații în care este nevoie să 

definim priorități particulare. De exemplu, dacă tratăm numere negative, minusul lor (minus 

unar) nu are aceeași prioritate ca minusul de la scădere (minus binar) și nici nu este tratat la fel. 

Așa că vom defini o prioritate specială pentru minusul unar al numerelor negative.  

 

 În setul de producții trebuie să specificăm că minusul numerelor negative are prioritatea 

specială, definită de noi. Prin “%prec MINUSUNAR” se suprascrie precedența care ar fi fost dată 

implicit de ‘-‘. Știm deja că precedența unei reguli este importantă în conflictele shift-reduce, 

când se compară precedența regulii care s-ar reduce cu precedența simbolului care s-ar shifta. 

 

  

Exerciții propuse: 

1. Creați un analizor lexico-sintactic care să preia din input expresii aritmetice scrise în 

formă postfix și să le transforme în formă prefix. Exemplu:     1 2 +    =>    + 1 2 

2. Creați un analizor lexico-sintactic care să citească din input expresii aritmetice în 

formă postfix, fără variabile, doar cu numere, și să afișeze rezultatul calculului. 

Exemplu:   1  2  +    =>   3 

10  5  –  3  +  2  *   =>  16 

%left '+' '-' 

%left '*' '/' 

%left MINUSUNAR 

%right '^' 

expr : expr '+' expr  

     | expr '-' expr  

     | expr '*' expr  

     | expr '/' expr  

     | expr '^' expr  

     | '-' expr %prec MINUSUNAR 

     | '(' expr ')' 

     | NUMBER 

     | VAR 

     ; 



reading content from C:\Users\Asus\Desktop\Bee\Laborator 6 și 7 FLT (ro).pdf


Laborator 6 și 7 

Prelucrarea matricilor 

 

Pe parcursul laboratoarelor 6 și 7 vom realiza un analizor lexico-sintactic pentru a prelucra 

matrici și operații pe matrici. Așadar, vom crea o nouă pereche de fișiere lex și yacc. 

Inputul poate fi o atribuire de matrice unei variabile sau o operație aritmetică între 

variabile de tip matrice. Exemple: 

A = 1 0 2 

       0 3 1 ; 

B = 6 11 16 

       0  1  2 ; 

C = 0 1 0 

       2 4 2 ; 

A + B + C ; 

> 7 12 18 

   2  8   5  

A + B – C ; 

> 7 10 18 

   -2  0  1 

 Scopul este să reținem matricile citite în variabile, pentru a putea aplica operații pe ele. 

Dacă variabilele sunt scrise în input cu majuscule, putem crea un vector de 26 de poziții în care 

să stocăm matricile atribuite variabilelor. Tradițional, în domeniul compilatoarelor, acest vector 

se numește tabelă de simboluri. Totuși, dintre simboluri (mai exact, dintre simbolurile 

terminale/tokeni), tabela de simboluri stochează doar identificatorii (variabile și nume de funcții) 

împreună cu informații legate de acestea: valoarea curentă păstrată într-o variabilă, respectiv un 

pointer spre începutul codului unei funcții. 

 

 Pentru a stoca o matrice, putem crea două structuri: una pentru a stoca o înșiruire de 

numere întregi compunând un rând dintr-o matrice, iar alta pentru a stoca o înșiruire de rânduri 

care formează o matrice. Fiecare dintre cele două structuri trebuie să conțină și numărul total de 

elemente dintr-un rând (care practic definește numărul total de coloane din matrice), respectiv 

numărul total de rânduri dintr-o matrice.  

 

matr *mem[26]; 

typedef struct _line{ 

 int elems[MAX]; 

 int no_columns_used; 

} line; 

 

typedef struct _matr { 

 line *rows[MAX]; 

 int no_rows_used; 

} matr; 

 



Având în vedere că pe stiva de valori pot să coexiste atât numere, cât și înșiruiri de numere 

sau înșiruiri de rânduri, înseamnă că yylval trebuie să fie declarat drept un %union cu trei câmpuri. 

 

Setul de producții este format dintr-un set de reguli care descriu inputul (stmt), un set de 

reguli care descriu operațiile aritmetice aplicate pe matrici (expr) și reguli pentru construcția 

rândurilor (row) și a matricilor (matrix).  

 

Tokenul (literalul) ‘;’ indică finalul unei instrucțiuni (statement – stmt), după care ar urma 

un ‘\n’. Tokenul ‘\n’ apare și ca un separator între rândurile dintr-o matrice. După ultimul rând 

dintr-o matrice nu urmează direct ‘\n’, ci urmează tokenul ‘;’ și abia apoi ‘\n’ după finalul 

instrucțiunii.  

Putem observa o comparație între gramatica matricilor și gramatica G1 de la curs: 

 

În gramatica G1, o expresie aritmetică E este definită recursiv ca o enumerare de termeni 

aritmetici T, separați prin tokenul ‘+’. Asemănător, în cazul matricilor, o matrice (matrix) este 

definită recursiv ca o enumerare de rânduri (row), separate între ele prin tokenul ‘\n’. Ca și aspect 

vizual, în G1 o expresie E este o sumă de termeni T (separați prin ‘+’) de la stânga la dreapta, iar 

o matrice (matrix) este o succesiune de rânduri (row) de sus în jos, efectul vertical fiind dat de 

‘\n’-urile dintre rânduri. 

În final, în secțiunea de user subroutines a fișierului .y vom defini funcțiile necesare pentru 

lucrul pe matrici.  

%union { 

  struct _matr *mat; 

  struct _line *lin; 

  int ival; 

} 

 

stmt : VAR '=' matrix ';' 

     | expr ';'  

     ; 

expr : expr '+' expr  

     | expr '-' expr  

     | VAR  

     ; 

matrix : matrix '\n' row  

       | row 

       ; 

row : row NUMBER  

    | NUMBER 

    ; 

E -> E + T 

   | T 

 



Exerciții propuse: 

1. Adăugați o funcție pentru calculul determinantului unei matrice. 

2. Adăugați o funcție pentru realizarea înmulțirii a două matrici. 



reading content from C:\Users\Asus\Desktop\Bee\Laborator 8 FLT (ro).pdf


Laborator 8 

Interpretarea arborilor binari în Haskell/ML 

 

Laboratorul 8 constă în crearea unui analizor lexico-sintactic pentru procesarea arborilor 

binari de căutare în sintaxă Haskell și, comparativ, în sintaxă ML. Partea de ML va apărea pe 

fundal color (albastru), iar pentru implementare vom merge pe una dintre cele două sintaxe. Vom 

avea în vedere citirea arborilor și executarea unor operații pe arbori: insert (inserarea unui nod 

într-un arbore) și count (contorizarea nodurilor, diferite de frunzele vide Lf, dintr-un arbore). 

Exemple de input în Haskell: 

 

Exemple de input în ML: 

 

După cum se poate observa în exemple, sintaxa Haskell a unui arbore binar este 

următoarea:  

Iar sintaxa ML a unui arbore binar este: 

  

Node Lf 2 Lf 
> Node Lf 2 Lf 

Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 
> Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

count (insert 16 (Node (Node Lf 2 Lf) 15 Lf)) 
> 3 

insert (count (Node Lf 17 (Node Lf 24 Lf))) (insert 12 (Node Lf 10 Lf)) 
> Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

Node(2, Lf, Lf) 
> Node(2, Lf, Lf) 

Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 
> Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

count(insert(16, Node(15, Node(2, Lf, Lf), Lf))) 
> 3 

insert(count(Node(17, Lf, Node(24, Lf, Lf))), insert(12, Node(10, Lf, Lf))) 
> Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

Node (Tree Int) Int (Tree Int) 

Node (int, int Tree, int Tree) 

 



Să luăm ca exemplu arborele binar din imaginea următoare: 

 

Reprezentarea arborelui în sintaxă Haskell este următoarea: 

 

Iar reprezentarea în sintaxă ML este: 

 

Pentru a reprezenta în memorie arborii binari de căutare, vom crea o structură cu trei 

câmpuri: unul pentru cheia nodului (de tip int) și două pentru fiii nodului (pointeri la subarborele 

stâng și la subarborele drept).  

 

Pe stiva de valori vor coexista două tipuri: int, pentru numerele citite din input și pentru 

cheile nodurilor, și o structură de tip arbore, pentru a reduce numerele din input la arbori în 

forma potrivită (reducând partea dreaptă a producțiilor la partea stângă). Astfel, yylval va fi un 

union cu două câmpuri: 

 

În ceea ce privește setul de producții, vom avea un set de reguli (expr) care descriu 
inputul. Putem separa instrucțiunile din input în două categorii, în funcție de tipul rezultatului. 
Citirile arborilor și comanda insert vor returna arbori, în vreme ce comanda count returnează un 

Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

typedef struct _node { 

int key; 

 struct _node *left, *right;  

} node; 

%union { 

 int ival; 

 struct _node *btree; 

} 



număr întreg. Astfel, reies alte două seturi de reguli, unul pentru situațiile din care rezultă un 
arbore (t_expr) și unul pentru cele din care rezultă numere întregi (i_expr). Cel mai important set 
de reguli este cel care descrie construirea unui arbore binar (tree), cu ajutorul celor doi 
constructori de date Haskell/ML pentru arbori binari: constructorul Node cu trei argumente și 
constructorul Lf cu zero argumente. 

 Setul de producții pentru sintaxă Haskell:

 

Setul de producții pentru sintaxă ML: 

 

  

expr : i_expr 

     | t_expr 

     ; 

i_expr : COUNT t_expr 

  |'(' i_expr ')' 

  | NUMBER 

  ; 

t_expr : INSERT i_expr t_expr 

       | '(' t_expr ')' 

       | tree 

       ; 

tree : NODE tree NUMBER tree 

     | '(' tree ')'    

     | LF    

     ; 

expr : i_expr 

     | t_expr 

     ; 

i_expr : COUNT '(' t_expr ')' 

  | NUMBER 

  ; 

t_expr : INSERT '(' i_expr ',' t_expr ')' 

       | tree 

       ; 

tree : NODE '(' NUMBER ',' tree ',' tree ')' 

     | LF    

     ; 



Exerciții propuse: 

1. Implementați o funcție pentru căutarea unui nod într-un arbore.  

Exemple în Haskell: 

find 12 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> true 
find 17 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> false 

Exemple în ML: 

 

2. Implementați o funcție pentru ștergerea unui nod dintr-un arbore. Verificați întâi dacă 

nodul căutat există în arbore.  

Exemplu în Haskell: 

delete 12 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> Node (Node Lf 2 Lf) 10 Lf 

Exemplu în ML: 

 
 

3. Creați o funcție pentru a verifica dacă un arbore binar este echilibrat.  

Exemple în Haskell: 

balanced (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> true 
balanced (Node (Node Lf 2 Lf) 10 Lf) 
> false 

Exemple în ML: 

 

find(12, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> true 
find(17, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> false 

 

delete(12, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> Node(10, Node(2, Lf, Lf), Lf) 

balanced(Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> true 
balanced(Node(10, Node(2, Lf, Lf), Lf)) 
> false 



reading content from C:\Users\Asus\Desktop\Bee\Model_CV_ro 2v 4.doc

 
Curriculum Vitae 


	INFORMAŢII PERSONALE
	Braica Patricia Maria 

	

	 
	 Satu Mare, Strada Zenit, Z4, cod postal 440174 

	
	 0770644019      

	
	 braica.patricia@yahoo.com 

	
	

	
	Whatsapp, yahoo 

	
	Sexul F | Data naşterii 22/11/2003 | Naţionalitatea Română 


	LOCUL DE MUNCA PENTRU CARE SE CANDIDEAZĂ

POZIŢIA

LOCUL DE MUNCĂ DORIT

STUDIILE PENTRU CARE SE CANDIDEAZĂ

profilul personal
	Participant grup țintă în proiectul „ Studenți motivați în realizarea de stagii de practică corelate cu cerințele pieței muncii - SMART-PRACTICE„


	EXPERIENŢA PROFESIONALĂ
	 


	Scrieţi datele (de la - până la) 
	

	

	

	


	EDUCAŢIE ŞI FORMARE
	 


	Scrieţi datele (de la - până la) 
	Studentă, anul III, Forma de zi
UTCN, specializarea Calculatoare și Tehnologia Informației


	Scrieţi nivelul EQF, dacă îl cunoaşteţi 

	
	Secția: limba engleză 

	
	· OOP on Java and C++
I successfully completed an Object-Oriented Programming (OOP) course using Java, which included a mandatory project.
· SQL programming
Through the completion of an SQL course, I acquired the essential skills required for effective database management.
· Fundamental Algorithms in C
Completing the Fundamental Algorithms and Data Structures in C course set me on the path to efficiency in programming.
· Logic Design of Circuits, Assembly, VHDL
Successfully completing the Logic Design of Circuits course has been instrumental in building a strong foundation for my understanding of hardware systems.
· AI Technologies in Python
Implemented PDDL-like theorem proving to detect deception in Among Us. Designed AI solutions for Sliding Tile Puzzle and All Lights Out using automated planning. Integrated AI into the Pac-Man framework for decision-making and pathfinding, leveraging adversarial search.


	COMPETENΤE PERSONALE
	 


	Limba(i) maternă(e)
	Limba română

	
	

	Alte limbi străine cunoscute
	ΙNΤELEGERE 
	VORBIRE 
	SCRIERE 

	
	Ascultare 
	Citire 
	Participare la conversaţie 
	Discurs oral 
	

	Limba engleză
	Utilizator experimentat 
	Utilizator experimentat
	Utilizator experimentat
	Utilizator experimentat
	Utilizator experimentat

	
	Admiterea la sectia Engleză a UTCN a fost echivalată cu Nivelul C1


	Limba germană
	Utilizator independent
	Utilizator independent
	Utilizator independent
	Utilizator independent
	Utilizator independent

	
	Certificat DSD Nivelul B1 


	
	Niveluri: A1/A2: Utilizator elementar  -  B1/B2: Utilizator independent  -  C1/C2: Utilizator experimentat 

Cadrul european comun de referinţă pentru limbi străine 


	Competenţe digitale
	AUTOEVALUARE

	
	Procesarea informaţiei
	Comunicare
	Creare de conţinut
	Securitate
	Rezolvarea de probleme

	
	Utilizator experimentat 
	Utilizator experimentat
	Utilizator experimentat
	Utilizator experimentat
	Utilizator experimentat

	
	Niveluri: Utilizator elementar  -  Utilizator independent  -  Utilizator experimentat 

Competențele digitale - Grilă de auto-evaluare

	
	Certificat ECDL


	
	În primul rând, mă simt foarte pregătită pentru a aborda  domeniul complex al Web Development. Pregătirea mea se confirmă prin rezultatele foarte bune obținute la materiile vizate în timpul celor 3 ani de studiu.

În al doilea rând, aș vrea să îmi dezvolt abilitățile practice în domeniul tehnic, în special, în ceea ce privește implementarea soluțiilor software. Consider că acest proiect îmi va oferi o oportunitate de a învăța de la profesioniști și de a aplica teoria în practică. Mă motivează oportunitatea de a lucra într-o echipă interdisciplinară și de a contribui la dezvoltarea unui proiect real. 


Consider că este prioritar să amintesc că am lucrat cu acest tip de tehnologie Web Development în cadrul cursului “Inginerie Software”, și am realizat un proiect despre sisteme de recomandare ale resturantelor din apropiere folosind API-urile de la Google Location si de vreme. 

De asemenea, am urmat cursuri de "Object-Oriented Programming (OOP) on Java and C++", unde am realizat un proiect obligatoriu ce mi-a consolidat cunoștințele în dezvoltarea aplicațiilor bazate pe OOP.

 
"SQL Programming" mi-a oferit abilități fundamentale pentru gestionarea bazelor de date, esențiale în orice proiect care implică stocarea și manipularea datelor. 

În cadrul studiilor mele, am urmat cursuri relevante care mi-au oferit abilități esențiale în domeniul informaticii și al tehnologiilor aplicate. De exemplu, prin completarea cursului de "Fundamental Algorithms and Data Structures in C", am învățat tehnici de programare eficiente, pentru dezvoltarea de soluții performante. 

În cadrul cursului "AI Technologies in Python", am implementat soluții AI complexe, cum ar fi theorem proving și PDDL împreună cu colegii mei de echipă. 




	Permis de conducere 
	Dețin permis Categoria B


	INFORMAΤII SUPLIMENTARE
	 


	ANEXE
	 


	
	





 © Uniunea Europeană, 2002-2015 | europass.cedefop.europa.eu 
Pagina 2 / 6 

 © Uniunea Europeană, 2002-2018 | europass.cedefop.europa.eu 
Pagina 1 / 6 


reading content from C:\Users\Asus\Desktop\Bee\morphological_op_images.zip


Morphological_Op_Images/1_Dilate/mon1thr1_bw.bmp


Morphological_Op_Images/1_Dilate/reg1neg1_bw.bmp


Morphological_Op_Images/1_Dilate/wdg2ded1_bw.bmp


Morphological_Op_Images/1_Dilate/wdg2thr3_bw.bmp


Morphological_Op_Images/2_Erode/mon1thr1_bw.bmp


Morphological_Op_Images/2_Erode/mon1_gray.bmp


Morphological_Op_Images/3_Open/art3_bw.bmp


Morphological_Op_Images/3_Open/cel4thr3_bw.bmp


Morphological_Op_Images/3_Open/cel4_gray.bmp


Morphological_Op_Images/3_Open/mon1thr1_bw.bmp


Morphological_Op_Images/4_Close/art4_bw.bmp


Morphological_Op_Images/4_Close/mon1thr1_bw.bmp


Morphological_Op_Images/4_Close/phn1thr1_bw.bmp


Morphological_Op_Images/4_Close/phn1_gray.bmp


Morphological_Op_Images/5_BoundaryExtraction/reg1neg1_bw.bmp


Morphological_Op_Images/5_BoundaryExtraction/wdg2thr3_bw.bmp


Morphological_Op_Images/5_BoundaryExtraction/wdg2_gray.bmp


Morphological_Op_Images/6_RegionFilling/reg1neg1_bw.bmp


Morphological_Op_Images/6_RegionFilling/wdg2ded1_bw.bmp


Morphological_Op_Images/2_Erode/reg1neg1_bw.bmp


reading content from C:\Users\Asus\Desktop\Bee\RC3a_2022.doc

REŢELE DE CALCULATOARE
FIBRE OPTICE ŞI COMPONENTE OPTICE

LUCRAREA NR. 3a
FIBRE OPTICE ŞI COMPONENTE OPTICE
1. Scopul lucrării

Obiectivul acestei lucrări este cunoașterea și înțelegerea fibrelor optice, a componentelor optice, principalele metodelor de testare, precum şi calculul bugetului optic.
2. Consideraţii teoretice

2.1 Fibre şi componente optice
Lucrarea de laborator continuă să se concentreze asupra nivelului fizic al stivei ISO/OSI, oferind cunoștințe despre fibrele optice și componente optice. În plus, în partea 3b sunt prezentate principalele dispozitive de rețea și elementele cablării structurate.

Odată cu scăderea accentuată a preţului fibrei optice, şi a echipamentelor de comunicaţie corespunzătoare, aceasta a devenit mediul preferat pentru noile conexiuni de mare viteza (în mediul exterior, cât şi în interiorul clădirilor).

Pentru transmiterea datelor, fibrele optice trimit semnale luminoase de-a lungul miezurilor de sticlă sau plastic (de ordinul zecilor de microni (μ), care constituie un ghid de undă pentru lumină, obținut dintr-o combinație de dioxid de siliciu și alte elemente).

Un fir de fibră optică (eng. fiber strand) este elementul de bază al unui cablu de fibră optică (un cablu conține mai multe fire). Un fir optic este format din trei straturi: miez, îmbrăcăminte și învelitoare de protecție. Un cablu de fibră optică este format din mai multe componente: fire de fibră, zona tampon/buffer, materiale de protecție și mantaua exterioară.

Miezul este învelit de un material realizat din dioxid de siliciu având un indice de refracţie mai mic decât al miezului numit imbrăcăminte. Pentru a proteja îmbrăcămintea, aceasta este învelită într-un material plastic. Acest inveliş se numeşte protecţie şi este învelit la rândul său de un material întăritor, de obicei Kevlar, care conferă rezistenţă fibrei în momentul instalării. Zonele tampoan ale fibrelor optice sunt de două categorii: strânse (se aplică o acoperire de protecție peste învelișul fiecărui fir de fibră) sau cu tub liber (mai multe fire în interiorul unui tub umplut cu un gel protector). Ultimul inveliş este mantaua care protejează fibra împotriva materialelor abrazive, a solventilor şi a altor factori. Culoarea mantalei în cazul fibrei optice multimod este de obicei portocaliu şi în cazul fibrei optice monomod este de obicei galben. Fiecare cablu de fibră optică este compus din doua fibre invelite separat, o fibră fiind folosită pentru transmisie şi alta pentru recepţie, asigurându-se în acest mod o legatură full-duplex. Un cablu de fibră optică poate contine de la 2 până la sute de fibre separate, învelite într-un strat protector. 
Figura 2.1 prezintă o straturile unei fibre și o secţiune transversală prin fibra optică.

	

	Figure 2.1 a. Straturile unei fibre optice             b. Secţiune transversală prin fibra optică


Pentru ca semnalul luminos să fie reflectat fără pierderi trebuiesc îndeplinite următoarele două condiţii:

· fibra optică trebuie să aibă un indice de refracţie mai mare decât materialul care o înconjoară;
· unghiul de incidenţă al semnalului luminos trebuie să fie mai mare decât unghiul critic al fibrei şi al materialului care o inconjoară. Unghiul de incidenta al semnalului luminos poate fi controlat cu ajutorul următorilor doi factori:

· apertura numerică a fibrei este gama unghiurilor semnalului luminos pentru care reflexia este totală;
· modurile reprezintă căile pe care semnalul luminos le poate urma.

Spre deosebire de mediile de transmisie bazate de cupru, fibra optică nu este susceptibilă la și nu generează interferențe electromagnetice sau probleme de diafonie.
Două tipuri principale de fibre optice sunt utilizate în mod obișnuit în rețele LAN și WAN: monomod (eng. single-mode) și multimod (eng. multimode). Fibra optică monomod este utilizată pentru conexiuni pe distanțe lungi și pentru cablarea verticală în clădiri (coloana vertebrală a clădirii). Fibra optică multimod este utilizată în cablarea orizontală și verticală. Fibra multimod are un diametru miezului mai mare în comparație cu cel al fibrei monomod. Astfel, fibra multimod nu necesită aceeași precizie ca în cazul fibrei monomod, rezultând astfel elemente optice (conectori, transmițători etc) mai puțin costisitoare.

Miezul fibrei monomod are diametrul suficient de mic încât să permită doar un singur mod (o singură cale) semnalului luminos, acesta fiind transmis în linie dreaptă prin mijlocul miezului. Cablurile de fibră optică monomod folosesc miezul cu diametrul între 8μ şi 10μ. Cele mai folosite fibre optice monomod au diametrul de 9μ şi îmbrăcămintea cu diametrul de 125μ. Acestea sunt de obicei referite ca şi fibre optice de 9/125μ. Sursa de lumină folosită la fibra monomod este laserul infraroşu. Se recomandă precauţie atunci când se foloseşte laserul ca şi sursă de lumină deoarece acesta poate afecta ochii. Fibra monomod poate transmite date la distanţe de peste 100km. Pierderea pe km de fibră optică monomod este specificată de către producator. În cazul fibrei monomod indicele de refracţie al sticlei este constant. Acest tip de sticlă se numeşte sticlă cu index pas.

Miezul fibrei multimod are diametrul suficient de mare încât să permită mai multe moduri (mai multe căi) semnalului luminos. Cablurile de fibră optică multimod standard folosesc miezul cu diametrul de 62,5μ sau 50μ şi îmbrăcămintea cu diametrul de 125μ. Acestea sunt de obicei referite ca şi fibre optice de 62.5/125μ sau 50/125μ. De obicei, sursele de lumina folosite cu fibra multimod sunt Infrared Light Emitting Diode (LED) sau Vertical Cavity Surface Emitting Lasers (VCSEL). LED-urile sunt mai ieftine şi necesită mai puţine măsuri de siguranţă decât laserele. Dezavantajul LED-urilor este că nu pot transmite semnalele luminoase la distante la fel de mari ca şi laserele. Fibra multimod de 62.5/125 poate transmite date la distante de până la 2000m. În cazul fibrei multimod indicele de refracţie al sticlei poate fi constant (sticlă monomod cu index pas) sau poate scădea de la centru spre exterior (sticlă monomod cu index variabil sau gradat şi permite diferitelor moduri luminoase să ajunga la receptor în acelaşi moment).
În fibra optică lumina suferă, pe lângă propagare, două fenomene principale: atenuare şi dispersie. Atenuarea sau absorbţia se datorează în principal prezenţei ionilor hidroxil -OH şi a diferiţilor ioni de metale. Lumina poate fi de asemenea împrăştiată de microcristale, mai mici decât lungimea de undă, care se formează la răcirea sticlei. Atenuarea limitează utilizarea fibrei optice în lungime. Dispersia sau lărgirea lăţimii impulsurilor se datorează în fibra multimod lungimii diferite pe care o au diferitele moduri. O altă dispersie cea cromatică este datorată variaţiei indicelui de refracţie în funcţie de culoarea sau lungimea de undă a luminii. Dispersia limitează utilizarea fibrei optice în frecvenţă sau lărgime de bandă. Cele două limitări înmulţite caracterizează cel mai corect o fibră optică. Valori de 20MHz-km se obţin pentru fibra cu index pas, de 1GHz-km pentru cea cu index variabil şi de 1000GHz-km pentru cea monomod la care nu există dispersie modală.

Transmiţătoarele pentru fibra optică convertesc semnalele electrice în pulsuri luminoase echivalente. Există două tipuri de surse de lumină folosite de transmiţătoarele pentru fibra optică:

· LED-ul care produce lumina în infraroşu având lungimea de undă de 850nm sau 1310nm. Acestea sunt folosite cu fibre multimod. Cuplarea la fibra optică poate fi îmbunătăţită prin utilizarea unei lentile sferice;
· dioda semiconductoare LASER care produce lumina în infrarosu având lungimea de undă de 1310nm sau 1550nm. Acestea sunt folosite cu fibre multimod sau monomod.
Există două tipuri constructive de bază pentru LED-uri: cu emisie pe suprafaţă şi cu emisie pe muchie. La LED cu emisie pe suprafaţă, emisia luminii are loc perpendicular pe planul joncţiunii printr-un strat subţire transparent. Acestea emit într-un spectru geometric radial. La LED cu emisie pe muchie lumina este emisă într-un plan paralel cu joncţiunea la muchia semiconductorului. Materialele cel mai des utilizate sunt compuşi III-V ca GaAs sau AlxGa1-xAs pentru lungimi de undă de 0,8-0,9 μm şi GaxIn1-xPyAs1-y pentru lungimi de undă de 1,3-1,6 μm. Spectrul de emisie a unui LED este cuprins între 25-40 μm pentru lungimi de undă mici şi 50-100 μm pentru lungimi de undă mai mari.

Diodele semiconductoare LASER, diode laser (LD), se obţin prin introducerea unui LED într-o cavitate rezonantă optic. Efectul de LASER apare numai la existenţa unui curent direct suficient de mare pentru a se realiza o inversare de populaţii a electronilor şi a golurilor din cele două benzi energetice de conducţie şi de valenţă. Valoarea de curent de la care apare acest efect se numeşte curent limită. Sub acest curent dispozitivul se comportă ca un LED obişnuit. Deoarece lumina emisă de un laser este mult mai coerentă decât cea emisă de un LED, eficienţa de cuplare la fibra optică este superioară. De asemenea puterea optică captată de la un laser este mai mare decât cea emisă de LED.
O analiză comparată între cele două tipuri de emiţătoare este clar în favoarea LD prin posibilitatea de utilizare la frecvenţe mai mari, spectru mai restrâns şi în favoarea LED ca preţ şi stabilitate mai mare a puterii în raport cu temperatura.

Timpul de viaţă al ambelor dispozitive este egal şi este de ordinul a 10 milioane ore.

Receptoarele pentru fibra optică convertesc pulsurile luminoase în semnale electrice echivalente. Dispozitivele semiconductoare folosite de obicei de receptoarele pentru fibra optică se clasifică în două tipuri: simple şi cu câştig intern. Primele se mai numesc şi fotodiode PIN după tipul de dopare (p intrinsec şi n) iar cea de a doua categorie se numeşte APD (Avalanche Photo-Diodes). Aceste dispozitive sunt sensibile la lungimile de undă ale luminii de 850, 1310 şi 1550nm, lungimi de undă folosite de transmiţătoarele pentru fibra optică. Ca materiale semiconductoare sunt folosite Si pentru lungimi de undă de 800-900 nm şi Ge sau InGaAsP pentru 1300 şi 1500 nm. Si are sensibilitate optimă doar într-o zonă de frecvenţe redusă pe când Ge are un curent de întuneric apreciabil şi este mai sensibil la zgomot. Din acest motiv ultima variantă este cea mai bună dar necesită o tehnologie de fabricaţie mai sofisticată şi în consecinţă are şi un preţ mai mare.

Pentru a conecta fibrele sau pentru a realizare unei fibre mai lungi se folosesc joncţiuni (eng. splices). Joncţiunile sunt de două tipuri: mecanice şi de fuziune. Atenuările introduse sunt  mai mici de 0.5dB (ANSI/TIA-568-C.3 specifică că joncțiunile mecanice sau de fuziune nu trebuie să depășească o pierdere maximă de inserție optică de 0,3 dB). La joncţiunile mecanice cele două capete de fibră, atent tăiate, curăţate şi şlefuite sunt prinse într-o montură mecanică rigidă care le fixează una faţă de cealaltă într-un ansamblu imobil. Joncţiunile de fuziune se execută prin încălzirea aproape până la punctul de topire. În acest moment cele două fibre sunt lipite una de alta şi răcite. Aceste operaţii sunt precedate de operaţii de tăiere şi finisare a capetelor şi de aliniere prealabilă a celor două capete de jonctat. Joncţiunile de fuziune refac şi rezistenţa la tragere/rupere a fibrei la aproximativ 90% din cea iniţială. Pentru a proteja joncțiunile, se folosesc incinte speciale.
Conectorii pentru fibra optică permit conectarea fibrelor la porturi. Cei mai folosiţi conectori sunt SC (Subscriber Connector) - snap on type, ST (Straight Tip) - twist on type, FC (Ferrule Connector) - screw on type, LC (Lucent Connector) - snap on type and MTP/MPO - push/pull type, pentru fibre optice multimod si fibre optice monomod. Atenuarea introdusă de un conector optic, chiar de calitate superioară este mai mare decât cea introdusă de o joncţiune, având valori de aproximativ 1dB. Conectorii sunt echipamente mecanice de mare precizie şi de obicei un capăt al fibrei se află în conector iar unul este liber. În acest caz ataşarea unui conector se reduce la execuţia unei joncţiuni. O astfel de soluţie este de obicei mai avantajoasă decât montarea unui conector direct pe capătul fibrei deoarece conectorii prefabricaţi asigură o precizie de montare mult mai mare. Dacă fibra optică este terminată într­un terminator de fibră optică pentru redistribuire acest conector de capăt se mai numeşte şi pig­tail şi este de tipul prefabricat. O categorie specială de conectori o constituie cordoanele optice de distribuire sau legătură. Acestea sunt fibre optice speciale cu conectori la ambele capete care permit raze de curbură a fibrei mici de ordinul 2,5­5 cm. Culoarea acestora este galben pentru fibra monomod şi portocaliu pentru fibra multimod.

Repetoarele sunt amplificatoare optice care receptionează semnalele luminoase atenuate ca urmare a distanţei parcurse prin fibra optică, refac forma, puterea şi parametri de timp a acestor semnale şi le transmit mai departe.

Patch panel-urile pentru fibră sunt similare patch panel-urilor pentru cablul de cupru mărind flexibilitatea reţelelor optice. Pentru conectarea diferitelor echipamente, se folosește un patch cord de fibră optică (cunoscut și sub denumirea de zip cord - două fibre optice flexibile cu conectori la fiecare capăt).
În plus, alte câteva dispozitive active sau pasive sunt folosite împreună cu fibrele optice (exemple: cuploare optice - combină sau împart semnale optice; atenuatoare optice - reduc nivelul de putere al unui semnal optic; izolatori optici; comutatoare de fibră optică; multiplexoare optice etc.).

ISO/IEC 11801-1 specifică cerințele pentru fibre coaxiale, cu perechi răsucite și fibre optice. Standardele ISO/IEC 11801 (Europa) și ANSI/TIA-568-C (SUA și Canada) definesc 7 clase de fibre optice (monomod și multimod) așa cum se arată în tabelul 2.1, împreună cu câțiva parametri importanți (specificațiile pentru fibre optice, performanța transmisiei prin cablu și specificațiile fizice ale cablurilor):
Tabel 2.1 Caracteristicile fibrelor optice
	
	Multimod
	Monomod

	Tip
	OM1
62,5/125 μm
	OM2
50/125 μm
	OM3
50/125 μm
	OM4
50/125 μm
	OM5
50/125 μm
	OS1
9/125 μm
	OS2
9/125 μm

	Lungime de undă
	850, 1300nm
	850, 1300nm
	850, 1300nm
	850, 1300nm
	850, 1300nm
	1300nm, 1550nm
(1383nm)
	1300nm, 1550nm

	Atenuare max. (db/km) 
	2.6 / 
2.4
	3.56 / 2.3
	2.6 / 
1.9
	2.9 / 
1.5
	2.9 / 
1.5
	1
	0.4

	Sursă luminoasă
	LED (Light-Emitting Diode) / 

VCSEL (Vertical Cavity Surface-Emitting Lasers Light Source) 
	LASER (Light Amplification by Stimulated Emission of Radiation)

	Distanță/

rată

de date
	1 Gbps
	275m
	550m
	-
	-
	-
	5-120km

	
	10Gbps
	33m
	82m
	300m
	400m
	400m
	10-80km

	
	40-100 Gbps
	-
	-
	100m
	150m
	150m
	2-80km

	Culoare
	orange/ slate
	orange
	albastru deschis (aqua)
	violet/ albastru deschis (aqua)
	verde/ lime
	galben
	galben


Instalarea incorecta a fibrelor optice are ca şi rezultat creşterea atenuării semnalului optic. Intinderea sau curbarea exagerată a fibrei optice poate cauza mici fisuri ale miezului care vor dispersa semnalul luminos. Curbarea exagerată a fibrei optice poate avea ca urmare scăderea unghiului incident al semnalului luminos sub unghiul critic de reflexie totală. Pentru instalarea conectorilor capetele fibrei trebuiesc taiate si finisate. Dupa instalare, capetele fibrelor optice, conectorii şi porturile de fibră trebuiesc păstrate curate pentru a nu introduce atenuări. Înaintea folosirii cablurilor de fibră optică, trebuie testată atenuarea introdusă de acestea. La proiectarea unei legaturi pe fibră optică, trebuie calculată pierderea puterii semnalului care poate fi tolerată. Aceasta se numeste bugetul de pierdere a legaturii optice. Pierderea puterii se masoara in decibeli (dB).

Pentru testarea unei legături prin fibră optică există mai multe procedee: testare de continuitate, localizare vizuală a erorilor, procedeul de măsurare a puterii optice la ieşire, procedeul OTDR şi testul BER de rată a erorilor.
Testerele de continuitate sunt folosite pentru a testa continuitatea unei fibre optice. Un instrument de localizare vizuală a defecțiunilor (VFL) permite unui tehnician să identifice rupturi, macro-îndoituri (se referă la raza minimă de îndoire) sau joncțiuni de fuziune slabe.
Procedeul de măsurare a puterii optice la ieşire determină pierderile de putere prin legătura optică măsurând puterea la ieşire la o putere de intrare cunoscută. Unitatea de măsură pentru puteri optice este miliwattul (mW) insă din considerente practice se utilizează o altă unitate de măsură care măsoră câştigul (G) sau pierderea (L) într-un sistem şi anume deciBell-ul (dB).

Procedeul OTDR Optical Time Domain Reflectometer este procedeul prin care se pot vizualiza caracteristicile de atenuare ale unei fibre optice precum şi lungimea acesteia. Acest procedeu este singurul prin care se pot detecta poziţiile întreruperilor în fibra optică. OTDR afişează un grafic care are ca axă x lungimea fibrei şi ca axă y atenuarea. Din graficul astfel afişat se pot deduce atenuarea fibrei, calitatea joncţiunilor şi a conectoarelor. Deasemenea se poate determina poziţia rupturilor în cablu dacă extern cablul nu este afectat.

Testul BER (Bit Error Rate) este testul final la care se supune o legătură de date prin fibră optică. Acest test sau criteriu arată la câţi biţi transmişi prin fibră se produce o eroare datorată fibrei. Testul BER trebuie să îndeplinească cerinţele impuse de producătorii de echipamente DTE ce se cuplează la fibra optică. Pentru reţele de calculatoare acestea cer să fie mai mici decât 1 bit de eroare la 109/1012 biţi transmişi sau BER < 10-9/10-12. Pentru testare este nevoie de un generator de secvenţe de bit aleatoare şi de o interfaţă la fibra optică dacă se testează o buclă sau de două dacă se testează o singură fibră. Pentru a avea rezultate semnificative testul trebuie să se desfăşoare pe o perioadă suficient de lungă astfel încât să se transmită un număr suficient de mare de biţi. Perioade de testare de o zi sau două sunt obişnuite dacă se lucrează la rată de bit mare în utilizarea legăturii prin fibră optică şi BER mic. Un numărător poate contoriza automat numărul de erori detectate.

2.2 Calculul bugetului de putere optică 
Tabelul  2.2 Calcul buget de putere optica
	Crt. 
	Pierdere sau Putere Optică
	dB

	1.
	Pierderea pe km în Fibra Optică___dB/km X __km fibră 
	___dB

	2.
	Pierderea în Joncţiuni ___dB/joncţiune X __ joncţiuni
	___dB

	3.
	Pierderea în Conectoare ___dB/conector X ___ conectoare
	___dB

	4.
	Pierderi pe alte Componente
	___dB

	5.
	Margine de Eroare
	___dB

	6.
	Pierderea Totală pe Legătură (1+2+3+4+5)
	___dB

	7.
	Puterea de Emisie Medie a Emiţătorului
	___dB

	8.
	Puterea Medie Recepţionată de Receptor (7-6)
	___dB

	9.
	Dinamica Receptorului _____dB la _____dB
	

	10.
	Sensibilitatea Receptorului la o Rată de Erori dată BER ____
	___dB

	11.
	Putere Rămasă Disponibilă (8-10)
	___dB


Observaţii:
La punctul 3. nu se iau în considerare pierderile de conectare a emiţătorului la fibra optică, acestea fiind deja incluse. Valoarea calculată la punctul 8. trebuie să fie în intervalul de la punctul 9. pentru ca receptorul să funcţioneze corect. Valoarea calculată la punctul 11. trebuie să fie pozitivă pentru a avea o legătură de date optică funcţională.

Marginea de eroare se datorează luării în calcul a unor valori medii pentru toate componentele legăturii. Dispersia acestor valori în jurul valorii medii este cunoscută şi se poate lua o margine de eroare suficient de mare ca aceasta să acopere deviaţiile de la medie cu o probabilitate de 99,9% sau mai mare. Cu cât numărul de elemente este mai mare şi cu cât se doreşte o probabilitate de acoperire mai mare cu atât se va lua o margine de eroare mai mare.

Puterea de emisie optică a emiţătorului este o dată de catalog şi conţine în ea inclusă şi pierderea de conectare la un capăt de fibră optică în cazul în care conectarea se face conform recomandărilor. Puterea este mai mare la diode LASER şi mai mică la LED. În cazul utilizării de LASER este nevoie pentru distanţe relativ scurte chiar de un atenuator pentru a nu distruge receptorul.

Dinamica receptorului reprezintă plaja de puteri pe care un receptor le poate transforma în semnal electric fără pierderi de informaţie.

De asemenea este nevoie de o putere optică minimă necesară pentru îndeplinirea condiţiei de rată de erori tolerată care pentru reţele de calculatoare se situează la valoarea de 1 bit eronat la un miliard de biţi transmişi.

Exemplu de calcul al bugetului de putere optică

Diametrul fibrei optice: Miez 62.5μm/Înveliş 125μm. Apertura numerică a fibrei NA:0,275. Lungimea de undă a echipamentului optic: 1310μm.

Tabelul 2.3 Exemplu de calcul 
	Crt. 
	Pierdere sau Putere Optică
	dB

	1.
	Pierderea pe km în Fibra Optică 1,8dB/km X 3,5km fibră
	6,3dB

	2.
	Pierderea în Joncţiuni 0,5dB/joncţiune X 2 joncţiuni
	1,0dB

	3.
	Pierderea în Conectoare 1,0dB/conector X 2 conectoare
	2,0dB

	4.
	Pierderi pe alte Componente
	0,0dB

	5.
	Margine de Eroare
	2.0dB

	6.
	Pierderea totală pe Legătură (1+2+3+4+5)
	11,3dB

	7.
	Puterea de Emisie Medie a Emiţătorului
	-10,0dB

	8.
	Puterea Medie Recepţionată de Receptor (7-6)
	-21,3dB

	9.
	Dinamica Receptorului -10,0dB la -30,0dB
	

	10.
	Sensibilitatea Receptorului la o Rată de Erori dată BER 10-9
	-26,0dB

	11.
	Putere Rămasă Disponibilă (8-10)
	+4,7dB


Puterea ajunsă la receptor se încadrează în dinamica receptorului, ceea ce face posibilă funcţionarea sa, iar puterea rămasă disponibilă este pozitivă ceea ce ne asigură de o legătură viabilă.

Trebuie ţinut cont şi de faptul că în cursul vieţii legăturii pot apare fenomene de îmbătrânire a materialelor, care duc la creşterea pierderilor de putere, precum şi de faptul că fibra optică poate fi ruptă accidental şi trebuie joncţionată.
Un calcul făcut la limită periclitează durata de exploatare a unei legături prin fibră optică.

3. Desfăşurarea lucrării

3.1 Se vor discuta caracteristicile diferitelor tipuri de fibre şi componente optice şi aspectele legate de cablarea reţelelor de calculatoare folosindu-se acest mediu de transmisie.
3.2 Explorați infrastructura de fibra optică din oceane: https://www.submarinecablemap.com/ 

3.3 Se consideră o fibră optică monomod de 9/125μ având lungimea de 2,5km şi pierderea egală cu 0,5dB/km, care conectează două echipamente DTE. Atenuarea introdusă de joncţiuni şi conectori este egală cu 0,5 şi respectiv 1dB. Marginea de eroare luată în considerare este de 3dB. Puterea de emisie medie a emiţătorului este de -15dB, sensibilitatea receptorului la o rată de erori dată BER 10-9 este de -25dB şi dinamica receptorului este în intervalul -10 ÷ -30dB. Să se calculeze bugetul de putere optică.
(Manta)

(Întăritor)

(Protecție)

(Îmbracaminte)

(Miez)





2
3


reading content from C:\Users\Asus\Desktop\Bee\search.jar


META-INF/MANIFEST.MF
Manifest-Version: 1.0
Rsrc-Class-Path: ./
Permissions: all-permissions
Class-Path: .
Rsrc-Main-Class: AIspace.search.SearchWindow
Created-By: 1.8.0_92 (Oracle Corporation)
Main-Class: org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader

Name: AIspace/graphToolKit/images/common/finestep.png
SHA-256-Digest: g0eFgjjRo487hVTlm0EYWEbeQqMr58c1tg1NGmJymjg=

Name: AIspace/search/SearchQuizAnimator.class
SHA-256-Digest: kQF7b7Ck0q6nKrDspkpgrxHLIq5/Z0bO8sLta22wYIk=

Name: org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader.class
SHA-256-Digest: PeNg2fIpraFNoBkDOvABkUUmFQbX35xsf2DX0T5gT5s=

Name: AIspace/search/searchTypes/Search.class
SHA-256-Digest: 2p1WeQH+OL3UWINYZ0a37GgvCjbErJivs8eCSkXdqXs=

Name: AIspace/graphToolKit/images/constraint/stepback.png
SHA-256-Digest: rw3oATIx0y+LVJogwoNPdwialusVuDBv2yTw8Vewpkg=

Name: AIspace/graphToolKit/dialogs/ProblemDialog.class
SHA-256-Digest: 1WgCp1noIygVYeIqEy4BsAR1vVKoe6ItmtznWDozoVY=

Name: AIspace/graphToolKit/images/neural/Edit24.gif
SHA-256-Digest: SZHDYP0h8OGMtO5kifoumnlBew14vyQUVHqCKaYVmVY=

Name: AIspace/search/dialogs/UserSearchPathSelectDialog.class
SHA-256-Digest: 5UTeD1hEzLve0E40oPxesDRdno6uRmhyR3+Qy4O9pNs=

Name: AIspace/graphToolKit/images/stripsToCSP/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/graphToolKit/dialogs/FontDialog.class
SHA-256-Digest: spdDYL3MZAh0Tljeb0w7toHqRQcTJzyt7RLqbjq1/aQ=

Name: AIspace/XMLReader/XMLReader.class
SHA-256-Digest: A/jnbQKJgscrOJuG7ZIEGDzJZ+G0HTzMzMSJ3hbcc34=

Name: AIspace/search/elements/SearchEdge.class
SHA-256-Digest: YZh4ckMmM2tyU2R3b0fnmWD26R5wGGE/OUk6VJvon5Q=

Name: AIspace/search/searchTypes/BreadthFirst.class
SHA-256-Digest: U0EpD96dDRJW/KNeah5haOPHb3KnOo/IitSLw2tFWMg=

Name: AIspace/graphToolKit/dialogs/NodeDialog.class
SHA-256-Digest: fxX0HPrnmGC8xsoCBMJXP44zzfwVEa8kkz3WOL1KD7M=

Name: AIspace/graphToolKit/dialogs/ProblemDialog$1.class
SHA-256-Digest: jGnVYSy/XRQRtxLPfmLTaBsDJUL8R8CWmpYtNQKF/Ak=

Name: AIspace/graphToolKit/elements/EdgeLabel.class
SHA-256-Digest: VVaJOoXGKPStlE8a1oabfLemHRe/+dgGYxX7WhVCY9M=

Name: AIspace/graphToolKit/images/neural/arrowLeft.png
SHA-256-Digest: fg547UTgDc6pBnR4P76A5H+EnjJ2+Tqta6TodoaoxNA=

Name: AIspace/graphToolKit/dialogs/TextFrame$1.class
SHA-256-Digest: J19LhLkcHxf/EKIyJDPokHS6NT2cTmbdmUIROn/l+8A=

Name: AIspace/search/dialogs/UserSearchPathSelectDialog$ListRenderer.c
 lass
SHA-256-Digest: bf/eXZER9btUX2mGuI+XMe0CvlGWW0HwRFGh/1rjZfQ=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandlerFact
 ory.class
SHA-256-Digest: bXzRkHQnUja+OVxHN6JUCJ8lYhnb2Tpxc5Uu+TcjXIY=

Name: AIspace/graphToolKit/images/neural/randomPara.png
SHA-256-Digest: MiwMuPSkgCFSwXcWyGu/+4zvvGgGZ8C27p3ar/RIzxE=

Name: AIspace/XMLReader/XMLBlock.class
SHA-256-Digest: yEEyatr7xG3wpvhOhCX6Vijol9JEop7pPBkESM5L4lA=

Name: AIspace/graphToolKit/Graph.class
SHA-256-Digest: 57PaKhwRHPzvl115EmWPEJl//Qr21A7h4J7G9ZYRvcU=

Name: AIspace/graphToolKit/images/deduction/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/graphToolKit/images/dTree/toggleMonitoring.png
SHA-256-Digest: hYEm7wbh9yI/2RSkat8EocO+Cu2qYTqgVHwdfufEqH0=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLConnection.class
SHA-256-Digest: Auqy2EhiqPlwpAy1wtmJ7+LWHSUQwXAP9YCHQMuZmsM=

Name: AIspace/graphToolKit/images/constraint/close.gif
SHA-256-Digest: TZOUyr2a8Ygdir9pL5ZILRo+d0G/ZvLx9geCe8Zq1O8=

Name: AIspace/graphToolKit/images/stripsToCSP/Reset.gif
SHA-256-Digest: T9CFQyYTyYh1Gb/8+/CgikxDF4xiAAJjSqgwg/EV5wA=

Name: AIspace/graphToolKit/dialogs/BasicPanel.class
SHA-256-Digest: Gi5JsFHgwa9j4p7rFezITtl+1rJdYkuBFN+csy0EdU8=

Name: AIspace/search/InlineCanvas.class
SHA-256-Digest: g/rxdR47IvwQyy3ZwiEKO3Df1eNhM2I1p/SvngVIBTQ=

Name: AIspace/search/dialogs/NodeDialog.class
SHA-256-Digest: NiFnW4ZgwWEZ904PPk7ptLVewEYeMWP/Nl8x1ENnhqM=

Name: AIspace/graphToolKit/GraphCanvas.class
SHA-256-Digest: I8/MIe+ZJIpP6ERb+TXhAUYrjLtxnwXCBPVKDNiiFok=

Name: AIspace/graphToolKit/images/stripsToCSP/invertgraph.gif
SHA-256-Digest: FVh007d5DkFlI004nlkJcN5Az4Xf+6a2gLmAzLfCQog=

Name: AIspace/graphToolKit/images/bayes/queryNode.png
SHA-256-Digest: 05mG3qjArCnJ9Jnw3zczIU2ptop/jdc8GneYMQ0T8/E=

Name: AIspace/graphToolKit/help/HelpCanvas.class
SHA-256-Digest: n11cM1ksvNJ3mK5gyfhn5T1yuZXLTvrSe+tMF3R988Y=

Name: AIspace/graphToolKit/images/search/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/graphToolKit/help/HelpMenu.class
SHA-256-Digest: newNi+nRRgpjfQAp/a8jestPcVnbG5zfhuZJmGyH/o0=

Name: saves/cyclicdelivery.xml
SHA-256-Digest: r+WaAsvk2QHaNgXpnoRJfFJ9AOi5qsVXRPzO5KoWLbg=

Name: AIspace/graphToolKit/images/dTree/viewNodeInfo.png
SHA-256-Digest: j5c/Pok7ixTrRLkYa+ylLlX1C9EWARn67cjnyHUCYTk=

Name: AIspace/graphToolKit/elements/Edge.class
SHA-256-Digest: Z9KLt+VABKcadTd0R97vc3z30gGD4/wXr09XMiJf83I=

Name: AIspace/graphToolKit/elements/HistogramNode.class
SHA-256-Digest: NaoTU2zWxJyPrcds9CmR9Xxk8r/65YMz/4+S0m877hw=

Name: AIspace/graphToolKit/images/hill/batchrunner.png
SHA-256-Digest: HgC99dDn4shjdHdmlsRFR6CyDwOg/waq75NZNJTeCkg=

Name: AIspace/graphToolKit/images/neural/History24.gif
SHA-256-Digest: QIKVBmIuDIdE5HxCT1ciX2+lw+AjOxYCk1WjHlECkJ8=

Name: AIspace/graphToolKit/images/dTree/showPlot.png
SHA-256-Digest: aRQ3y7MbcBO4C5UPaQK8tM2g7dr2aaPCVOB3PmeSrXg=

Name: AIspace/graphToolKit/images/stripsToCSP/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: AIspace/graphToolKit/images/hill/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/graphToolKit/images/dTree/arrowLeft.png
SHA-256-Digest: fg547UTgDc6pBnR4P76A5H+EnjJ2+Tqta6TodoaoxNA=

Name: AIspace/graphToolKit/images/dTree/Edit24.gif
SHA-256-Digest: SZHDYP0h8OGMtO5kifoumnlBew14vyQUVHqCKaYVmVY=

Name: AIspace/graphToolKit/images/hill/viewCurrentPlan.png
SHA-256-Digest: kO+UqNlLFCXKVOPabjt16AofuEdOvoaHMlMyr4FB66I=

Name: AIspace/search/help/SearchHelpCanvas.class
SHA-256-Digest: H87kmCD2Sh85WcRLCe/Hv0uQSk8uE1kaXj9aoTpJVg8=

Name: AIspace/graphToolKit/GraphConsts.class
SHA-256-Digest: T1J7DoV4YRtMDs8fe3oGvYqdMs5OP5ivVFOt5UGHE04=

Name: AIspace/graphToolKit/images/bayes/optimizeDecision.png
SHA-256-Digest: IS7sKS/ZKc0s4E5IMtKV+aLWl/eIXmSAHBy0p41XH/g=

Name: AIspace/graphToolKit/images/stripsToCSP/viewNodeInfo.png
SHA-256-Digest: j5c/Pok7ixTrRLkYa+ylLlX1C9EWARn67cjnyHUCYTk=

Name: AIspace/graphToolKit/elements/Point.class
SHA-256-Digest: BAIqyACT2buVIkWZ+R/DrUvQd0dwVqlZrQETbgPeY/k=

Name: saves/extendedtree.xml
SHA-256-Digest: yKtvxujVDiiXgXZ2A7dDn1TbhQSGyWmpT9hhpJvLOwk=

Name: AIspace/graphToolKit/images/dTree/arrowRight.png
SHA-256-Digest: dXpLXZpCVxw40xdNsOxpEiwagf1X18zOlX+dSc7vrog=

Name: AIspace/graphToolKit/dialogs/BasicFrame.class
SHA-256-Digest: 9ftCqZA/b/hvxCda/ZQY3/z6h50TjBhGCJsugExF94k=

Name: AIspace/graphToolKit/images/search/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/graphToolKit/images/search/Reset.gif
SHA-256-Digest: T9CFQyYTyYh1Gb/8+/CgikxDF4xiAAJjSqgwg/EV5wA=

Name: AIspace/graphToolKit/images/common/select.png
SHA-256-Digest: E1v0uwI/MLq9KVEgsrDjv18n2KnANQdkYZAJ/yllgKI=

Name: AIspace/graphToolKit/images/bayes/viewDecision.png
SHA-256-Digest: jvHroMRyrkNDiIOhjKFfygVY4B0VNC5Qg2OALdfbZl4=

Name: AIspace/graphToolKit/elements/Node.class
SHA-256-Digest: kK9WX/UsOzZ55wKaSY1oVAFktQq09xwF1o4nRq6nmRY=

Name: AIspace/graphToolKit/images/neural/quiz.gif
SHA-256-Digest: SHOLXodBmeeQgK8UiUd82cRaKeOa7tM/VrcdCuI10Jk=

Name: AIspace/graphToolKit/images/stripsToCSP/quiz.gif
SHA-256-Digest: SHOLXodBmeeQgK8UiUd82cRaKeOa7tM/VrcdCuI10Jk=

Name: AIspace/graphToolKit/images/constraint/hide.png
SHA-256-Digest: A20UBlXFtHNZesoiXi/pKQlj45xISCWOckH9rWiMkN4=

Name: AIspace/graphToolKit/images/dTree/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: org/eclipse/jdt/internal/jarinjarloader/JIJConstants.class
SHA-256-Digest: ZT8qyz1sZhr2SQC++pbKck1kiJ+MnDGubHMj0uERiWU=

Name: AIspace/graphToolKit/images/constraint/StepBack24.gif
SHA-256-Digest: +3PLSpBsFcaU8rWSj2tckvID7bIyV4MMXTv2mbcKwvs=

Name: saves/cycliccourier.xml
SHA-256-Digest: /CH947hm2Y85B+CTlAnciXCFO/vAQ+G3BkC1pIBJYq8=

Name: AIspace/graphToolKit/images/bayes/Zoom24.gif
SHA-256-Digest: oshhr4jI9zf1JfktoVygCJVtMoxmnUx7vwkAlwlIRJA=

Name: AIspace/search/searchTypes/SearchObject.class
SHA-256-Digest: eVl13PJAuqgU97XjCFSnl5iucFwawMTPfsPPMbdak2w=

Name: AIspace/graphToolKit/images/common/delete.png
SHA-256-Digest: Oi9vNOk0pR/6dRaVrpdOn7XjVbrMjvOIZlSZrLkEHGU=

Name: AIspace/graphToolKit/images/neural/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: saves/misleadingheuristic.xml
SHA-256-Digest: NlUrky/uczSJf95FhaHQNWs2swbP9QhvA6m43EWK90w=

Name: AIspace/search/dialogs/CostsHeuristicsDialog.class
SHA-256-Digest: qu3/ucCIeYOeY4P0QTjhrnk2YC+95CDNQC9em6FK+ig=

Name: AIspace/graphToolKit/images/constraint/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: AIspace/graphToolKit/images/deduction/inspectSubtree.png
SHA-256-Digest: TiiESn9AwXx6r7jZ10dJrKsvyyCakXmDWZnhQVA+9C0=

Name: AIspace/search/dialogs/NodePathDialog$PathRenderer.class
SHA-256-Digest: x3wAoiG6m0TK1YOoiw4w5hHxqB8t2NGWM0r7nayKcbc=

Name: AIspace/search/searchTypes/BestFirst.class
SHA-256-Digest: GRN1D3SqmZp7hwV2901fPQvr/FQ1TOsP/NdOlLSkG8s=

Name: AIspace/graphToolKit/images/neural/showPlot.png
SHA-256-Digest: aRQ3y7MbcBO4C5UPaQK8tM2g7dr2aaPCVOB3PmeSrXg=

Name: AIspace/graphToolKit/images/search/quiz.gif
SHA-256-Digest: SHOLXodBmeeQgK8UiUd82cRaKeOa7tM/VrcdCuI10Jk=

Name: AIspace/graphToolKit/images/dTree/Reset.gif
SHA-256-Digest: T9CFQyYTyYh1Gb/8+/CgikxDF4xiAAJjSqgwg/EV5wA=

Name: AIspace/graphToolKit/images/constraint/autoarc.png
SHA-256-Digest: oLsDxcr9YT+wdAS75AejEHoAqWaHPcirbjGt51VQ3Kc=

Name: AIspace/XMLReader/XMLTree.class
SHA-256-Digest: NPKXtiSzFdpr+Ny5Zdd4VRwdIKsGZ6QWmkTJORtMtHo=

Name: AIspace/graphToolKit/dialogs/MessageFrame.class
SHA-256-Digest: HIQwbrCNAXDs+IvVofFn6b+pTvl1PpZh/w8uIUfQzHw=

Name: AIspace/graphToolKit/images/deduction/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/graphToolKit/images/search/invertgraph.gif
SHA-256-Digest: FVh007d5DkFlI004nlkJcN5Az4Xf+6a2gLmAzLfCQog=

Name: AIspace/graphToolKit/dialogs/MessageDialog.class
SHA-256-Digest: Ml3unGGwrKxdUATZHkWd2dQjtb8d2y72TB+56QOZaaA=

Name: AIspace/graphToolKit/images/hill/initialize.png
SHA-256-Digest: 3jGImsihU6C3nt/dxnEohBzpnPuBYGwaPT2cNZo/J0c=

Name: AIspace/graphToolKit/dialogs/BasicDialog.class
SHA-256-Digest: cw7fR7MPSot4CKFZqcNWid497E5YPH4IyAY0E4jtj4Y=

Name: AIspace/graphToolKit/images/bayes/modifyProbTable.png
SHA-256-Digest: zxqxM4aInXB1WwOu+KgU3ZNE+jUyOnqWxe6Rq87yvAY=

Name: AIspace/graphToolKit/images/hill/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/graphToolKit/images/hill/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: AIspace/XMLReader/Pair.class
SHA-256-Digest: u+bEXBKZAu6nTNbmgwfNsxsj3S8nCvMpaNWJ6Xi8mdk=

Name: AIspace/graphToolKit/images/cspTools/createconstraint.png
SHA-256-Digest: hhxNcqaFxTU/mOnP26RS1DiV2W1O06gVQB6/eiGK4jI=

Name: AIspace/search/dialogs/SearchTextFrame.class
SHA-256-Digest: 00rX6fki2vxqE5WHhbu9cML2glUsIGuQLWOqrcU65VA=

Name: AIspace/graphToolKit/images/bayes/toggleMonitoring.png
SHA-256-Digest: hYEm7wbh9yI/2RSkat8EocO+Cu2qYTqgVHwdfufEqH0=

Name: SampleProblems.txt
SHA-256-Digest: VYJmy9qOeOK0sjihwAgch4DBB87HM1KFpvGRc/vmLlw=

Name: AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel$1.clas
 s
SHA-256-Digest: +A4Hi9ClPHMtcBT9YgtjUXTScBWZO0Qk0IqcHFaN5P0=

Name: AIspace/graphToolKit/images/search/viewNodeInfo.png
SHA-256-Digest: j5c/Pok7ixTrRLkYa+ylLlX1C9EWARn67cjnyHUCYTk=

Name: AIspace/graphToolKit/images/bayes/quiz.gif
SHA-256-Digest: SHOLXodBmeeQgK8UiUd82cRaKeOa7tM/VrcdCuI10Jk=

Name: AIspace/graphToolKit/images/bayes/viewProbTable.png
SHA-256-Digest: FsQg0FDxu9VErJa/N4MrOAz+pzA8rKEUsszCK7eW2Ak=

Name: AIspace/graphToolKit/images/stripsToCSP/select.png
SHA-256-Digest: E1v0uwI/MLq9KVEgsrDjv18n2KnANQdkYZAJ/yllgKI=

Name: AIspace/graphToolKit/GraphWindow.class
SHA-256-Digest: nmGYVuV5aLjE98JNll5V1mzyzg3vX+iQ98Ccd8W5Fj8=

Name: AIspace/search/elements/SearchNode.class
SHA-256-Digest: nNVreDuOK0TfWmvzJJU2RMhz4yatUnNk7RiXoZ7WaLk=

Name: AIspace/search/dialogs/AutoSearchOptionDialog.class
SHA-256-Digest: TtXP7EF1VmwSbDIklU590egJpA9xFzVV98GZ2xQsT5U=

Name: AIspace/graphToolKit/images/cspTools/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: AIspace/graphToolKit/images/hill/showPlot.png
SHA-256-Digest: aRQ3y7MbcBO4C5UPaQK8tM2g7dr2aaPCVOB3PmeSrXg=

Name: AIspace/search/SearchApplet.class
SHA-256-Digest: VdJhfkcP2xBN8X7N5kxVS6dY6cjW/FWDuLoR6qlY/XM=

Name: saves/mod5gr1999.xml
SHA-256-Digest: XqMXTdttYV7tv/nUWMFFGnsXUgPYz8C21br/ie7MVlY=

Name: AIspace/search/searchTypes/AutoSearch.class
SHA-256-Digest: rnmcKY3CWZ1yaOfbM/Fzj82bCNkjr7KhigNMzau1TO0=

Name: AIspace/search/searchTypes/DepthFirst.class
SHA-256-Digest: FXI7mU8NguwqQSxcrVvJMfMA1LKqe3t+ncyE9QVt07Y=

Name: AIspace/graphToolKit/images/constraint/cross.PNG
SHA-256-Digest: oZZo8Neey1T7tBKSGSD6XyDsIkweiHKit2VKKvJNDtk=

Name: AIspace/graphToolKit/images/dTree/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/graphToolKit/images/dTree/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/search/InlineSearchApplet.class
SHA-256-Digest: bD4oVhEWFK3rjE3rv8/G1Dl0437yfU9S/3d7B6IbI1I=

Name: AIspace/search/searchTypes/BranchAndBound.class
SHA-256-Digest: rkIm6VaPSKTwR+a7Zjfsf3X2xDrm3qHax3zZHFO8eEQ=

Name: AIspace/search/FrontierInfo.class
SHA-256-Digest: FzyuzWt9N+rBK9KXGKDvQGA/Stbd1OqaLlqzu1+fVaA=

Name: AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel.class
SHA-256-Digest: XvHHRNluNlh+zAwIS+syAJp+DSMyd6DkH9j+hP9F8GI=

Name: AIspace/graphToolKit/images/dTree/splitNode.png
SHA-256-Digest: T1Ixm2Ibc06S8+23j4qipBXB3D4dEx6lBu0OhjkSKEk=

Name: AIspace/graphToolKit/images/neural/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: AIspace/graphToolKit/images/bayes/queryNetwork.png
SHA-256-Digest: s+FHcslmTW90oaJbmT7Um4cEpF+8G4pqKEBpu47owhI=

Name: saves/mod4gr1999.xml
SHA-256-Digest: soVBBzfK/jgwC/A1zJbkym6bh6TfFnRNn7ui1cz4W/U=

Name: AIspace/search/searchTypes/UserDefinedSearch.class
SHA-256-Digest: iQDYaR46XUzBCjAad6mcK1xu34MRVQmcjViqYel8tXk=

Name: saves/acyclicdelivery.xml
SHA-256-Digest: vUyZnP7MjKHs4gGH8iKpQN4lVxc9jhFEejkrBGKowJ4=

Name: saves/multiplepathpruning.xml
SHA-256-Digest: vcWrZqMCeWAkHQacdB368XANQ4ufv5Im6SQOMMiMSGQ=

Name: AIspace/graphToolKit/images/common/newEdge2.png
SHA-256-Digest: AAQw9aCREecuh1BGLaeUf2+IoPsJGWWM7ZM1NnE5PrQ=

Name: AIspace/graphToolKit/dialogs/TextFrame.class
SHA-256-Digest: L8/vC4TFAdsvEaSW+ENTRpVzkxiycgfzYb0J4GMbd74=

Name: AIspace/search/searchTypes/HeuristicDepthFirst.class
SHA-256-Digest: JfdKXaI4rGihWi//B9M4r/4f7lPuKwIb+Lqg8Y72Riw=

Name: AIspace/graphToolKit/images/deduction/select.png
SHA-256-Digest: E1v0uwI/MLq9KVEgsrDjv18n2KnANQdkYZAJ/yllgKI=

Name: AIspace/search/SearchWindow.class
SHA-256-Digest: 1iMMYcD5TtWbADsaYr0nUPUn10Iayarelu6Jni5hbVs=

Name: AIspace/graphToolKit/LabelCanvas.class
SHA-256-Digest: OIeqGlAn6ziJtLTauHoYUYHLBiU9yRH0Ixs/CEunoz8=

Name: AIspace/graphToolKit/images/bayes/select.png
SHA-256-Digest: E1v0uwI/MLq9KVEgsrDjv18n2KnANQdkYZAJ/yllgKI=

Name: AIspace/graphToolKit/images/dTree/quiz.gif
SHA-256-Digest: SHOLXodBmeeQgK8UiUd82cRaKeOa7tM/VrcdCuI10Jk=

Name: AIspace/graphToolKit/images/neural/arrowRight.png
SHA-256-Digest: dXpLXZpCVxw40xdNsOxpEiwagf1X18zOlX+dSc7vrog=

Name: AIspace/graphToolKit/dialogs/OpenLocationDialog.class
SHA-256-Digest: 5tPKkQpMKJfxtbsGhZoIkkrskJoYeHGBlIZm97j1cHw=

Name: AIspace/graphToolKit/images/search/select.png
SHA-256-Digest: E1v0uwI/MLq9KVEgsrDjv18n2KnANQdkYZAJ/yllgKI=

Name: AIspace/search/SearchCanvas.class
SHA-256-Digest: hNIarwxMFpbZbT13UaQsf7Eb+xKw+TDFyuQwlIgmg6k=

Name: AIspace/graphToolKit/help/HelpFrame.class
SHA-256-Digest: t6hHpNjE93ETmtTOcRIIk1CrtWhuYDA8mh/d7N2WRnQ=

Name: AIspace/graphToolKit/images/constraint/Reset.gif
SHA-256-Digest: T9CFQyYTyYh1Gb/8+/CgikxDF4xiAAJjSqgwg/EV5wA=

Name: AIspace/graphToolKit/images/deduction/Reset.gif
SHA-256-Digest: T9CFQyYTyYh1Gb/8+/CgikxDF4xiAAJjSqgwg/EV5wA=

Name: AIspace/graphToolKit/images/stripsToCSP/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/search/SearchGraph.class
SHA-256-Digest: NrBv3vswifcJnc/1I6tU9/oPzHhMiPOSo9wge3thOW0=

Name: AIspace/graphToolKit/images/dTree/viewKBCheckBox.png
SHA-256-Digest: pGTYC87NLUOVLXaW/Yzg/XLbPQ864Rg+21NJCtee3e0=

Name: AIspace/graphToolKit/images/deduction/createNewQuery.png
SHA-256-Digest: rYDpg8QYMee+dyt4HUZvbJGiv/jquNz2TTiODaJ0foo=

Name: AIspace/graphToolKit/dialogs/AboutDialog.class
SHA-256-Digest: 8rE0pVJdRYboOZgQ6jMw96GzsKJG9eGtLhwbOFoR8Uo=

Name: AIspace/graphToolKit/images/constraint/step.png
SHA-256-Digest: gp+OLg5Nl3GxpPfIeEXUZ/bcvGEFzw4JSEHAGenQXOM=

Name: AIspace/XMLReader/XMLParseException.class
SHA-256-Digest: QyQ38ZuNmyYyMpuIrAkRfgxdaFTG2imHVZNTXbAs5eQ=

Name: AIspace/graphToolKit/images/dTree/testNew.png
SHA-256-Digest: QAiParHiIp0xIfB2rl0OCXBWKCsOxc+oKvEqqIsWpUo=

Name: saves/cyclicgraph.xml
SHA-256-Digest: O4YBYR3eOQVjm8yZyGJMOrjmHefV4KaBWLbtAzAH0Rk=

Name: AIspace/search/dialogs/NodePathDialog.class
SHA-256-Digest: drpUTvDPMwojUq4/OvCl0Zrqm7323V7w2q+pyM+hjds=

Name: AIspace/graphToolKit/images/common/newNode.png
SHA-256-Digest: KkPmAeJ0XQ1p5WMKFGjSs2pkV3Pzfef1ynjTqfLOVkg=

Name: AIspace/graphToolKit/elements/Entity.class
SHA-256-Digest: /UbFrrJAXuoxkzlDyoll+5hIQOH7bIsx3m+bH/T8sX0=

Name: AIspace/graphToolKit/images/bayes/noforgettingarcs.png
SHA-256-Digest: YZy4CbdCKXMvnRMluWIc+rqiMH7yU5c91fMidm5O0nQ=

Name: AIspace/graphToolKit/dialogs/DescriptionDialog.class
SHA-256-Digest: 6cZIpU50lcdI0Xlw/WPFU4YlI2qRCJF6fIks5S9lilk=

Name: AIspace/graphToolKit/images/search/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: AIspace/graphToolKit/images/deduction/movesubtree.png
SHA-256-Digest: AaP899gG6Jwx6kcap8geGUDpKFVF/sRqMUfDmDMoqKQ=

Name: AIspace/graphToolKit/dialogs/EdgeDialog.class
SHA-256-Digest: PnevIbyeKkJ0L8EqxRoX5FFlFK7tpichzjjva8hu7Uk=

Name: AIspace/graphToolKit/images/deduction/gear.png
SHA-256-Digest: tvMD8yhIZDN299Ig50VcYVcH5pB46BIvQJ37FcqW8SI=

Name: saves/acyclicbicycle.xml
SHA-256-Digest: o3njSrZtW/Bwt4uxm5aG73G4gCjTdgE7T+hvi6wlJTA=

Name: AIspace/search/dialogs/SearchDescriptionDialog.class
SHA-256-Digest: onZWq7CLfhTL+J0QsvQn3NA9zGPZlWs6WSs7AMA41A0=

Name: AIspace/search/dialogs/InvertDialog.class
SHA-256-Digest: YDue4J8sRosjvwUs7XpvJ6+lPbssGxT/sZZ+XMAudaQ=

Name: AIspace/search/dialogs/EdgeDialog.class
SHA-256-Digest: /zlAYlH8gXDGsLZofh5BXuR8VTuB36nGAm8HLj9VWpo=

Name: AIspace/graphToolKit/images/neural/stepTarget.png
SHA-256-Digest: BZsRRXHZfwNuG1x/QHvDGEXhI2lUOUZQddoT/YBAvnQ=

Name: AIspace/search/searchTypes/LowestCostFirst.class
SHA-256-Digest: BnGi70LZRjLnrIWuUFA4UBXiW8DA6wcGR5xTG5Ce6l0=

Name: AIspace/search/searchTypes/AStar.class
SHA-256-Digest: wEkWTCP4eK7PML3To0EQN5w9wTubY/gZwsMsvg3VS/A=

Name: AIspace/graphToolKit/InlineApplet.class
SHA-256-Digest: /QQIkSDAXzJrJ+cWHqmw1theG9yBXUGPrxIclgBTmZ0=

Name: AIspace/graphToolKit/images/common/setProp.png
SHA-256-Digest: JQYvnsuH4Nw3nOhHeZqOEjBslEXmm98gS2LpvPd0UEY=

Name: AIspace/graphToolKit/images/constraint/stop.gif
SHA-256-Digest: RkcDNV0ww6c3FI84C0TBWUTsgk4t+ZX0U/EK0HZnZmo=

Name: org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader$ManifestIn
 fo.class
SHA-256-Digest: K0C2au5Bjar1JqzudZunU9XbWzIv8fW0XgtJ+walQCI=

Name: saves/vancouver.xml
SHA-256-Digest: /0zC7oigaEOAxvsd1FBp/tEJF4Z+QIwqXyd7LnMPFhc=

Name: AIspace/graphToolKit/images/cspTools/addvar.png
SHA-256-Digest: fjDQtvkdE1hGrDBc8b1JHkpaiFeYR1XcJNzNTd5cNnQ=

Name: AIspace/graphToolKit/GraphApplet.class
SHA-256-Digest: 7J4ZccFJrKl60qA0FZc8P1li0yRC5G1/wF7NETCvsks=

Name: AIspace/graphToolKit/images/deduction/inspectNode.png
SHA-256-Digest: Erver46synxtCNwIiHwTWCyZSpMpJSBr6kXxg6WDnCY=

Name: AIspace/graphToolKit/images/dTree/movesubtree.png
SHA-256-Digest: AaP899gG6Jwx6kcap8geGUDpKFVF/sRqMUfDmDMoqKQ=

Name: saves/simpletree.xml
SHA-256-Digest: xj3XAwjQ+uJUO0Iqcaz05lLHexJwmmcSqsoeX3oVVtQ=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandler.cla
 ss
SHA-256-Digest: oSbRcTLnLRKhLzIAMRbwECbCiluKbgUgsNM92mFSGBM=





META-INF/SERVER.SF
Signature-Version: 1.0
SHA-256-Digest-Manifest-Main-Attributes: 2tKBcrcn6q3sUZhd9DiaEeP2MqfGD
 45p+jQxkq6s0AI=
SHA-256-Digest-Manifest: 7YGHazaTHNDBcMKsX1Z4yT2tpGLBLnHMy/DTMWW+Xgk=
Created-By: 1.8.0_92 (Oracle Corporation)

Name: AIspace/graphToolKit/images/common/finestep.png
SHA-256-Digest: 3smM9PL9FE2NfN5esRmfw7QlAx0qB2ZUfRLHNeZ0dmM=

Name: AIspace/search/SearchQuizAnimator.class
SHA-256-Digest: N8u47q8+dPcmYU2EhastRjH+EX9ufr/m4e9Uk6KVsIs=

Name: org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader.class
SHA-256-Digest: 2l9at2aRI5uze2n+uw1YCLV/CHu1RzTzwt5SSDgb+s0=

Name: AIspace/search/searchTypes/Search.class
SHA-256-Digest: qbjr0WOBh2MC3pO6z/uj25XT3imna3CZNPGjPmxat/s=

Name: AIspace/graphToolKit/images/constraint/stepback.png
SHA-256-Digest: towuJ/wsp8QF/WYiKBw7rbe1jLXEUK6Jz/CR6zPw61A=

Name: AIspace/graphToolKit/dialogs/ProblemDialog.class
SHA-256-Digest: Pdy8W/qmKCLIK7dAmVO59Px9lsXzACa5R5pzU4EAj/U=

Name: AIspace/graphToolKit/images/neural/Edit24.gif
SHA-256-Digest: AmZLW9120GRNmyKTKM15jvF8xfO63vycCK94UrFoq+0=

Name: AIspace/search/dialogs/UserSearchPathSelectDialog.class
SHA-256-Digest: M+soWGKB3HOo6/USFyCvxXdsj6+Lg1PJyMhabDl42jA=

Name: AIspace/graphToolKit/images/stripsToCSP/stop.gif
SHA-256-Digest: ed8FMBGDiKRaiiKVPaKlEuSTagok/et/ZkSWkoxin7E=

Name: AIspace/graphToolKit/dialogs/FontDialog.class
SHA-256-Digest: VdD1asQgrIjPdw9ym1R5pAzZh3WFcZ5XpPUcLM6rbns=

Name: AIspace/XMLReader/XMLReader.class
SHA-256-Digest: QEq4GhBnMa49KW/5v+FVwAjp1h4igE8y1+rXwvn3xxQ=

Name: AIspace/search/elements/SearchEdge.class
SHA-256-Digest: kTkgMI8o7ljZtRUjaQ7iN9rMTxvKqPhGWm1Nao2laQg=

Name: AIspace/search/searchTypes/BreadthFirst.class
SHA-256-Digest: Mt5z7967lYfOFv9x75OQJeFdHT4+s+xaV/kgQ+ddyks=

Name: AIspace/graphToolKit/dialogs/NodeDialog.class
SHA-256-Digest: BWIdeL1zivUt9ddcw01EXgLxoeN9kflNRncCr3gQlDI=

Name: AIspace/graphToolKit/dialogs/ProblemDialog$1.class
SHA-256-Digest: X09GWlwIIGecrI7RDcgS6FKJtwATeShGMgjX+pixRlw=

Name: AIspace/graphToolKit/elements/EdgeLabel.class
SHA-256-Digest: DBkCpZ8tZkG/tHLpiOqrMhPyfIuHlj+FGeXDD2ZjK10=

Name: AIspace/graphToolKit/images/neural/arrowLeft.png
SHA-256-Digest: /rpt2weHTc7gTBLFfJcvBo7vcBHWfybhOmgdwb2uwns=

Name: AIspace/graphToolKit/dialogs/TextFrame$1.class
SHA-256-Digest: hfWTJs1aKOqK8rh4tpDLkZlg1dV3TwEg/eXIk2jHWKY=

Name: AIspace/search/dialogs/UserSearchPathSelectDialog$ListRenderer.c
 lass
SHA-256-Digest: exdAvsmDHsm5y/08psENOYeBnkgeX8XCVGTsO1LKh3o=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandlerFact
 ory.class
SHA-256-Digest: k8WEiVO3dDb9QD30ELuQwJGv38Xwtq/LSEnciDJffvU=

Name: AIspace/graphToolKit/images/neural/randomPara.png
SHA-256-Digest: aiklAhwyBdDEauNozn6k9f+FJ6dgHScc6x1kCm5OiUU=

Name: AIspace/XMLReader/XMLBlock.class
SHA-256-Digest: OeyNHFJqdg7Xpsem+Xh7OdP7LBNgHgl/YdAtllM38pU=

Name: AIspace/graphToolKit/Graph.class
SHA-256-Digest: xzcmLerJo6kmcePRCE7SYvNwKj5Pcie9OGRU5lN1gfU=

Name: AIspace/graphToolKit/images/deduction/step.png
SHA-256-Digest: P39WNVbbMl/JyXlALY67bpkKcaKoR8rxWrPgcCXf9YQ=

Name: AIspace/graphToolKit/images/dTree/toggleMonitoring.png
SHA-256-Digest: 7RFaUu41HDHO1QXFCRUzrlbrH6Rc0eRhZ3lHIU7IVxY=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLConnection.class
SHA-256-Digest: nyg1NcqRXOM7ApFlamQTeN8cilNViEx3SDQViYpAP7s=

Name: AIspace/graphToolKit/images/constraint/close.gif
SHA-256-Digest: skXNyNC/GwMLA/q/fEhkjZVUbrKPUXrptff5u/eNQQE=

Name: AIspace/graphToolKit/images/stripsToCSP/Reset.gif
SHA-256-Digest: KOwr+R740ZAUxQZRIPQkrVXojs0ElhyReXX7/hXi54M=

Name: AIspace/graphToolKit/dialogs/BasicPanel.class
SHA-256-Digest: t2jqGYFDinLY45kUJCB7U+ZDqpXdxysePNjUPo/Pzo0=

Name: AIspace/search/InlineCanvas.class
SHA-256-Digest: WD+A8R7iTH7G3PWI7xVA5uFiO6qXrR1HqevsFS0S/nY=

Name: AIspace/search/dialogs/NodeDialog.class
SHA-256-Digest: +cUzuEg86CZ8S6BMMG3kSV4MzgaDxecubHDsQwCcCZI=

Name: AIspace/graphToolKit/GraphCanvas.class
SHA-256-Digest: 5TK0tvYqcDGg+4ptwipMg8xaeyuNnXUBAxW40X/RUAM=

Name: AIspace/graphToolKit/images/stripsToCSP/invertgraph.gif
SHA-256-Digest: mv/pz/x0nAQWUXlFMbKq6uSonZl96Jl+gvHFlju9W4s=

Name: AIspace/graphToolKit/images/bayes/queryNode.png
SHA-256-Digest: DRZvAC5WpvPZ/RAYFtPI4uI1Im0+VCaFwAgYJE9Pm8c=

Name: AIspace/graphToolKit/help/HelpCanvas.class
SHA-256-Digest: haEzo3G7FQLsFmekttwLB1IbE6BZJVydenVqoyjwhVk=

Name: AIspace/graphToolKit/images/search/stop.gif
SHA-256-Digest: k5NVWMaFO1pWYMN5e4VmxJIoKKMBOYuM+6svpF918ng=

Name: AIspace/graphToolKit/help/HelpMenu.class
SHA-256-Digest: O1G1uKU4FJvDIyWHnoJxseHjfePwl8iMd8HmqJmFF/Q=

Name: saves/cyclicdelivery.xml
SHA-256-Digest: yZgyVjbyGOTuc4qvaLw/AFCMwzY4/jRPMaNblcZwIrE=

Name: AIspace/graphToolKit/images/dTree/viewNodeInfo.png
SHA-256-Digest: 8kh3jNcNnkq8ohdOYutwB0Kb5H5goqslHM8DJ4yCPd8=

Name: AIspace/graphToolKit/elements/Edge.class
SHA-256-Digest: sjBONvhh8P09uJfKKmDcjFuYQbBHZNSlrR2cX6NgabY=

Name: AIspace/graphToolKit/elements/HistogramNode.class
SHA-256-Digest: GkRfDX8Ge7fwnknXo3EPrMAwq+Bqcr3NNUpzO89L6eY=

Name: AIspace/graphToolKit/images/hill/batchrunner.png
SHA-256-Digest: y6Td/ugo+2+x+p+wp4bngzp2p9eDTPQLWJLViL7cM4o=

Name: AIspace/graphToolKit/images/neural/History24.gif
SHA-256-Digest: ZUzYOo40pcbgj1UX3IZcbux5vQV72RgdolhqdQWtdLQ=

Name: AIspace/graphToolKit/images/dTree/showPlot.png
SHA-256-Digest: oEo91pyKG25GUlw9h3F0mm07rfJpDLOG4DKTP9aUvbU=

Name: AIspace/graphToolKit/images/stripsToCSP/gear.png
SHA-256-Digest: k4pJTu8LeACy561ZwmUzCprqeHqYBERbAULpjKmMYaQ=

Name: AIspace/graphToolKit/images/hill/stop.gif
SHA-256-Digest: vyAJ8IGqFPHNZE4yU2Rtd9pfGJUn2R0Mv7zd/7owHyw=

Name: AIspace/graphToolKit/images/dTree/arrowLeft.png
SHA-256-Digest: sOmM8uulVtucpa5wAAIVCkY+rIUeDOIUpy5OhTQqVto=

Name: AIspace/graphToolKit/images/dTree/Edit24.gif
SHA-256-Digest: qiptQzHV/eGZ7McOuJQYzmBnsYVh689qxJ/ZG65xwX8=

Name: AIspace/graphToolKit/images/hill/viewCurrentPlan.png
SHA-256-Digest: LnHRy5thlMqfEHnUYJvdqz2G77hkNdQa0tYjRV/0iR0=

Name: AIspace/search/help/SearchHelpCanvas.class
SHA-256-Digest: G8QecS/PTHe5HMOcR0LJwJXoEg+Bm0fIYZzopEbbqjk=

Name: AIspace/graphToolKit/GraphConsts.class
SHA-256-Digest: yHcc8l819ZL4kewQZsk3oIQ5hHb6dlhk/zqLndflizo=

Name: AIspace/graphToolKit/images/bayes/optimizeDecision.png
SHA-256-Digest: IuFoKH0wj3D4ZRZsJbHvpNK7tFNbrVph9IK6MlQBMAc=

Name: AIspace/graphToolKit/images/stripsToCSP/viewNodeInfo.png
SHA-256-Digest: My/JOq+NEMZsDmGkbg8pdH3I284VoCZhJWg/jc5gihs=

Name: AIspace/graphToolKit/elements/Point.class
SHA-256-Digest: GqUy1nL3W4B58Rna8BuUzX3ODcwk+T22rvLsej0CjUU=

Name: saves/extendedtree.xml
SHA-256-Digest: aYlCFs5mB5F0pMy0SB3alVcjhtacsO+EH3vYeU1RIYE=

Name: AIspace/graphToolKit/images/dTree/arrowRight.png
SHA-256-Digest: 7uMMynLnfEO8yQGY/bBvDJ60Db2tm+xEdr8oN2whJas=

Name: AIspace/graphToolKit/dialogs/BasicFrame.class
SHA-256-Digest: frV2D/VMq5qsizemO72LgGVcCMHU3TPxfLpwTkJpW2w=

Name: AIspace/graphToolKit/images/search/step.png
SHA-256-Digest: bg7bfanIakmGpGzZA3WkC2wswkMgvDSf94mYLdsseZw=

Name: AIspace/graphToolKit/images/search/Reset.gif
SHA-256-Digest: FiSdxdJEMxyyC4ofD51xBAqvuKaHpuj7TAvgzAMGopU=

Name: AIspace/graphToolKit/images/common/select.png
SHA-256-Digest: jgJn2QYRjrLYO+WN2SxLiojMSzwXnbNwx0jsh4wcB24=

Name: AIspace/graphToolKit/images/bayes/viewDecision.png
SHA-256-Digest: wQ2Wb7+tpRJome9xkKXl3TZb4/EDniJ6o3NFb3W6Gvw=

Name: AIspace/graphToolKit/elements/Node.class
SHA-256-Digest: osUXJ8sWtoznP7GW6OS0/uSbfD/La7OFE6/2T3XP56c=

Name: AIspace/graphToolKit/images/neural/quiz.gif
SHA-256-Digest: QFVjeV9DEAoBZpg7KX/ZjgrG/fVxDgXFNvsZCpAojQc=

Name: AIspace/graphToolKit/images/stripsToCSP/quiz.gif
SHA-256-Digest: ADxFrCUq6Bm7NGUexS5I6g/60yuHtYp9cpmwiRkSbxo=

Name: AIspace/graphToolKit/images/constraint/hide.png
SHA-256-Digest: BHfcgLEsNZ/hZ85hvOJAGPonF20B2ix/qtYWJu+4TLA=

Name: AIspace/graphToolKit/images/dTree/gear.png
SHA-256-Digest: 53AiwWfq4+e+vV+lTD04SKPByZ1zQnAQzKXEPHVQ0as=

Name: org/eclipse/jdt/internal/jarinjarloader/JIJConstants.class
SHA-256-Digest: ER9GMoZ/BeHGUoqDy4OfHPqRAs4l74FGihVobhkSCTQ=

Name: AIspace/graphToolKit/images/constraint/StepBack24.gif
SHA-256-Digest: QDR5W39OfI2nyriMbYeT1qozJMXaW1n0O5ghckqSn7M=

Name: saves/cycliccourier.xml
SHA-256-Digest: NXeiPS7+NXPKobJYS8lV4uT3zz51w6dPXWWOEC45m74=

Name: AIspace/graphToolKit/images/bayes/Zoom24.gif
SHA-256-Digest: dfdwyY4wrkVntgOU1BuCz1hAQjdP5xt3/TwAuvWBnNQ=

Name: AIspace/search/searchTypes/SearchObject.class
SHA-256-Digest: y5Fn/SaIXhqUjs9nK8955sE3sIZBgyHOCkCq9yEmFj8=

Name: AIspace/graphToolKit/images/common/delete.png
SHA-256-Digest: WYsASZ5MpQh4vy9+JZlIwgTUHh2N+QhFK7YsBDgdu/g=

Name: AIspace/graphToolKit/images/neural/step.png
SHA-256-Digest: 5BHU669gcy2kO/ffH2bSYLgVe54accCiATvR4qmC5ek=

Name: saves/misleadingheuristic.xml
SHA-256-Digest: XyjHG9aHGNIUoFB+Yi30z08Svu5zGu2ciun78LLxKgg=

Name: AIspace/search/dialogs/CostsHeuristicsDialog.class
SHA-256-Digest: dNkdktblha3mu12cLcpUQr4SFAGIf4I78fLi+bwVh+E=

Name: AIspace/graphToolKit/images/constraint/gear.png
SHA-256-Digest: L8qi3E0bp4GoRWQkkvEybi2T18JW2sATVwwklFNMFD0=

Name: AIspace/graphToolKit/images/deduction/inspectSubtree.png
SHA-256-Digest: DDDhHtZjFV45CZ7tlGYFaYhzPVGQcG00sbZPmRb9ylM=

Name: AIspace/search/dialogs/NodePathDialog$PathRenderer.class
SHA-256-Digest: SgsPtn7xTR3D96d8LpvwCwkXEfD+EvEG7vkkpN9D+7w=

Name: AIspace/search/searchTypes/BestFirst.class
SHA-256-Digest: dUVOY86mXkn3X4Btl+8zcJyM5wfQTvJLwcZdVQUi4Ok=

Name: AIspace/graphToolKit/images/neural/showPlot.png
SHA-256-Digest: NqN5DyQb8kYzqN/tEQ1qshZBXntmO6yXjRFHN2oZaYc=

Name: AIspace/graphToolKit/images/search/quiz.gif
SHA-256-Digest: wkWDDZBeVfa01IEyTzVeZILrXGxwyZgx+hXPy8eySMk=

Name: AIspace/graphToolKit/images/dTree/Reset.gif
SHA-256-Digest: cS6/HBD2danxOYL9mEVYiXNng2MHR8lCoEZaXr/fA4o=

Name: AIspace/graphToolKit/images/constraint/autoarc.png
SHA-256-Digest: mCHP4vZ5KVIfd/Xuv93+jZpB1V/DmSIL6DWyWiYfEIM=

Name: AIspace/XMLReader/XMLTree.class
SHA-256-Digest: wlHWGyFa8WIJfFwNjc+EISYdn3BHh5r3GmTovvnUQBw=

Name: AIspace/graphToolKit/dialogs/MessageFrame.class
SHA-256-Digest: 1Ne4i4NAgB8v97p0m7eFcoloeAikEj2UX7Vq8VP7knk=

Name: AIspace/graphToolKit/images/deduction/stop.gif
SHA-256-Digest: xJEYUjb/R3BYsgGCtXgWxBphHawFH9yYNYRpKuwOl6g=

Name: AIspace/graphToolKit/images/search/invertgraph.gif
SHA-256-Digest: tXGFNGDxztg/w6dx3GqZrAE0FDj9BKg3JGrJ1SdZNNw=

Name: AIspace/graphToolKit/dialogs/MessageDialog.class
SHA-256-Digest: +Bn/EoqzQbPrVm5g4DNpsAQsj5qucHCRISukpgT7gB8=

Name: AIspace/graphToolKit/images/hill/initialize.png
SHA-256-Digest: 8gsqw4zfpldW0EDar39sAhg+a0V2/FZpWNJ0ttlj4XY=

Name: AIspace/graphToolKit/dialogs/BasicDialog.class
SHA-256-Digest: bbOBtZohvNoO30gH2TnlrJbjsRXwQiYinCLPa7cwErg=

Name: AIspace/graphToolKit/images/bayes/modifyProbTable.png
SHA-256-Digest: 3dQL6FNm1fr7YFEo0SSU5N5LKHQCyofCZc++CgfOQ2o=

Name: AIspace/graphToolKit/images/hill/step.png
SHA-256-Digest: 58dVwe6xtnsSiarAmCo5uWISwfP0X1Sc/qTob1tQcQM=

Name: AIspace/graphToolKit/images/hill/gear.png
SHA-256-Digest: zNuCM5upZCG0yGL89YyHxm4l9FTbG7j1rMFnSC0oPZA=

Name: AIspace/XMLReader/Pair.class
SHA-256-Digest: rLXb6reFOSvfI1EcjiVrcKnFNnKxGvptRYD/srlQEFk=

Name: AIspace/graphToolKit/images/cspTools/createconstraint.png
SHA-256-Digest: AB461Go9Z/7lSJ010hMA1kV3cw/h9kUX89WUKVzLjL8=

Name: AIspace/search/dialogs/SearchTextFrame.class
SHA-256-Digest: N95DBuWq84kb5zOM/K7eiiwt73MWTsoGJzI7PSEO3dQ=

Name: AIspace/graphToolKit/images/bayes/toggleMonitoring.png
SHA-256-Digest: QMsMP4Rmz58NZfwxwUIoKh246H+/ktK1tczutoDhmz8=

Name: SampleProblems.txt
SHA-256-Digest: 3G+kOUf1AmAOcyuYGEHcRT1B2gWGnNULF/2BthiWALs=

Name: AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel$1.clas
 s
SHA-256-Digest: EBdAzb5eT2Bu5yCcvmxiONawiHLuuvz1C5v2tRYSnEU=

Name: AIspace/graphToolKit/images/search/viewNodeInfo.png
SHA-256-Digest: XiOwuo8yrLMjOQ1fnBDJ08NZYdSdvGz6gLaz0B1oTsw=

Name: AIspace/graphToolKit/images/bayes/quiz.gif
SHA-256-Digest: xriJmkmq1ytoRoO1dUzAzIhLR/SGubDhtOO1cDH2HA4=

Name: AIspace/graphToolKit/images/bayes/viewProbTable.png
SHA-256-Digest: aeW+0yJqOy5OF6Q4dA6MP6wyBl0lxeqWXngOxhHdlds=

Name: AIspace/graphToolKit/images/stripsToCSP/select.png
SHA-256-Digest: vhAspTJFuQf3JNZgyX2eyBdYziSjgO+/CCJ/WKx81A4=

Name: AIspace/graphToolKit/GraphWindow.class
SHA-256-Digest: GIcbZ4P87S1PVaYs/gSvFlu+JYC/JoAwL+JeUAr1afQ=

Name: AIspace/search/elements/SearchNode.class
SHA-256-Digest: 0QZARY3lUW3wLQCE7RgC4kZ++SWWvs246mKLmWVTxzg=

Name: AIspace/search/dialogs/AutoSearchOptionDialog.class
SHA-256-Digest: /9KgvU29fnzdCr1VUrXq7KsoRHvxAmJz0Dkd3uwlq9s=

Name: AIspace/graphToolKit/images/cspTools/gear.png
SHA-256-Digest: rXOj1YfHTOk8DU/YgJ0YMsnDGQ1FD0Xotli86h5zE2c=

Name: AIspace/graphToolKit/images/hill/showPlot.png
SHA-256-Digest: unrWhSj91Cy3IznzpjXicVIWcITwDDpUFE2GbOh0OFw=

Name: AIspace/search/SearchApplet.class
SHA-256-Digest: fImmw0mOzJN007o+Lm0AxKS+bv5M6EIRCnmDj8Zkh+g=

Name: saves/mod5gr1999.xml
SHA-256-Digest: uOgFO/NYwh5hG38idI+9CFXgpsT5OvUFRJPF1T/OO2s=

Name: AIspace/search/searchTypes/AutoSearch.class
SHA-256-Digest: ugeqw33hnD+VVy1RKKFtn52JfHebZZ20GQoyaQlsOLM=

Name: AIspace/search/searchTypes/DepthFirst.class
SHA-256-Digest: moXgPOz6gJ8rsaOIgmoJ6oeKAxKj7l3W4A/GO/hfX8E=

Name: AIspace/graphToolKit/images/constraint/cross.PNG
SHA-256-Digest: 9fmatznfJJrSllwTci37abzzwLRHwrZyR4PjTMOSPlY=

Name: AIspace/graphToolKit/images/dTree/step.png
SHA-256-Digest: 3iZOw0rb14kZtjrXOcFwFetJh8vxyhVLvsOp13xR1Og=

Name: AIspace/graphToolKit/images/dTree/stop.gif
SHA-256-Digest: px7SHgXlVriwgPlseLMggibYpiPR3sSczJuBIyr5Wbs=

Name: AIspace/search/InlineSearchApplet.class
SHA-256-Digest: PNZS/DBWxyZcJUvyw4l55s35vqDVjZTH9cMZFCNZ0eI=

Name: AIspace/search/searchTypes/BranchAndBound.class
SHA-256-Digest: cH8ZEPvLdFvJot3I0o8WM5EVTvN9I2CSzxou3+vpFfs=

Name: AIspace/search/FrontierInfo.class
SHA-256-Digest: AR7zXOQc0G2aRO5Nu6bScfB4e3rf/OA7UXhQtaY7RTs=

Name: AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel.class
SHA-256-Digest: U7uiCQFef+F1vLYAmVwoIsW9hQ1ysZ4I+qSEE+viQwU=

Name: AIspace/graphToolKit/images/dTree/splitNode.png
SHA-256-Digest: YbyTRflg8OMm4r/Wi6di4f1H+Z/5BdvKRCq/cfw6q2Q=

Name: AIspace/graphToolKit/images/neural/stop.gif
SHA-256-Digest: 7FIloPeTaUF/IlUvx6ZVz8X3429P3QPyhr0ZJeXmgWA=

Name: AIspace/graphToolKit/images/bayes/queryNetwork.png
SHA-256-Digest: lHFZBYjnUKeFXHrJ3EfqawdwGb6I5YUk+9aF+VWOxQE=

Name: saves/mod4gr1999.xml
SHA-256-Digest: eCvMxeY8Gejoryk5KQ+NU7TFwHmY2v+aBtwRAPtcaOo=

Name: AIspace/search/searchTypes/UserDefinedSearch.class
SHA-256-Digest: q3w/ggcnxqsp76fMBK9oNIP0KsB/QwLZvN3q2dB4Ems=

Name: saves/acyclicdelivery.xml
SHA-256-Digest: GCUcPewT1TF//GP1TClbH+wvv1brYHqnH21gIRf5Kyk=

Name: saves/multiplepathpruning.xml
SHA-256-Digest: sJZGr0VEMUnFHSBnsRQC/FVePYtMxOoHrcoFykGOOYE=

Name: AIspace/graphToolKit/images/common/newEdge2.png
SHA-256-Digest: hAFzAnx5GH/LWK1pmB08m6cFF78lHlFjbaqSmsTjdVY=

Name: AIspace/graphToolKit/dialogs/TextFrame.class
SHA-256-Digest: C9zmjglM2yzdaWhc4R75VBKHdz07VupICpx5JjyAVVI=

Name: AIspace/search/searchTypes/HeuristicDepthFirst.class
SHA-256-Digest: T9Eq23S7N/CgVmoX7vMkL0czknSb7EUOGS42fV1Ox3w=

Name: AIspace/graphToolKit/images/deduction/select.png
SHA-256-Digest: i4+lWtdMW+mj8vse7IwlQt8lQcK341d1kjHqk8VybUM=

Name: AIspace/search/SearchWindow.class
SHA-256-Digest: iNl0oJ0gC31wUQomZOJCpW/Nk0q3RwzW8+MUlpuczzA=

Name: AIspace/graphToolKit/LabelCanvas.class
SHA-256-Digest: tptGMHsBtbdRntjR3DRuQR0MN7wdM/XJjlHE3P6f0AQ=

Name: AIspace/graphToolKit/images/bayes/select.png
SHA-256-Digest: Wdz5TUMRrpQWPlQ7tp+ATKMlgNDxxK7+kASarTcEID0=

Name: AIspace/graphToolKit/images/dTree/quiz.gif
SHA-256-Digest: JZ1NJHj/ft43MPIZayvgyusCsPqxLoIZDlbbvS4PsPo=

Name: AIspace/graphToolKit/images/neural/arrowRight.png
SHA-256-Digest: 0s2sUppZ1BncmOqm6Kb7kkWX8JrOLW4BavuX1ThHFeA=

Name: AIspace/graphToolKit/dialogs/OpenLocationDialog.class
SHA-256-Digest: 21HTDRRfLvZVlvkuYA6flKZPCyzWP4GKsFwt16+2ujk=

Name: AIspace/graphToolKit/images/search/select.png
SHA-256-Digest: HsIQLHLkDpYCMl7cMpidqm/F6ZSWrrsZq/ph3ippj4s=

Name: AIspace/search/SearchCanvas.class
SHA-256-Digest: kXZ728UiMHu9xiaYvSYJ2tdIhT8ubAFV0nMKaGky/bw=

Name: AIspace/graphToolKit/help/HelpFrame.class
SHA-256-Digest: WV9XMrl3yX44RPVdESdCNomGWpuo/YW6ssmvpLcDFSk=

Name: AIspace/graphToolKit/images/constraint/Reset.gif
SHA-256-Digest: 1UFpXDMYZEHVI9CtYQxZurKI1ulESiUBkSKvJnW0g1A=

Name: AIspace/graphToolKit/images/deduction/Reset.gif
SHA-256-Digest: x+8DlNH9Ex1/eU0o2p5lq2QgesowIi8T2BHEvRikuJQ=

Name: AIspace/graphToolKit/images/stripsToCSP/step.png
SHA-256-Digest: TVCSLLd7If/RudTRxXXZixByyMZs4RecbolzeU7BtLk=

Name: AIspace/search/SearchGraph.class
SHA-256-Digest: drouRnbiDJngvf8sYz79QeuFO6Sb9Y4Ab5DjpPWCkbE=

Name: AIspace/graphToolKit/images/dTree/viewKBCheckBox.png
SHA-256-Digest: dYdsj4cImMz3+mGWWTVq41KahsiSPyVfhq4wgR0WnfM=

Name: AIspace/graphToolKit/images/deduction/createNewQuery.png
SHA-256-Digest: 417F8f8x4ney8noPBXz96g6SSGTsi42ekojSOKefTQY=

Name: AIspace/graphToolKit/dialogs/AboutDialog.class
SHA-256-Digest: uHr46ttrUh0IG7P4iW2s2CisTrJ3okYVcyG25qJV2cw=

Name: AIspace/graphToolKit/images/constraint/step.png
SHA-256-Digest: tvAQ6eb56XMme0IzNcdmfjBkhwDdYb/D5ezLWS0Y2is=

Name: AIspace/XMLReader/XMLParseException.class
SHA-256-Digest: Ev4DEEjE2rOvdABE8M7asgVYVvRg7vbdcJXTd8XVkdk=

Name: AIspace/graphToolKit/images/dTree/testNew.png
SHA-256-Digest: f/CEVSiyBuYHpVsaevCNz2qBmJpSQ9WJ85N4Y7IIKm8=

Name: saves/cyclicgraph.xml
SHA-256-Digest: 13JXcafC5UzmLW+dbRYjAqdppKED7I1o4UwzH+oaJIM=

Name: AIspace/search/dialogs/NodePathDialog.class
SHA-256-Digest: gqHvVGuMX3BJzpNCsOXvoemul+R63cBxT469e4RFi5Q=

Name: AIspace/graphToolKit/images/common/newNode.png
SHA-256-Digest: zKduPRe51p3DoKme0l1r74xAEdOrGcsyeJeWh6ZksYE=

Name: AIspace/graphToolKit/elements/Entity.class
SHA-256-Digest: 33UK5P/vci0BZGvkDrAIINpNdvaw4nWfPQvJVfMDMxw=

Name: AIspace/graphToolKit/images/bayes/noforgettingarcs.png
SHA-256-Digest: fgmzFP3PRlMyqVq/Ptg7t7kU3N3f8GQKgz+5StjoTTo=

Name: AIspace/graphToolKit/dialogs/DescriptionDialog.class
SHA-256-Digest: gAxKV2WwlsqiOZqBAKGzsv6nd//7e7ca6DCxKIVnWY4=

Name: AIspace/graphToolKit/images/search/gear.png
SHA-256-Digest: YN15obscVzKjHaHxSde91zIDAXsvmnLJq9BzDryTMaY=

Name: AIspace/graphToolKit/images/deduction/movesubtree.png
SHA-256-Digest: RNkqt+PnQ4zN8Mz3tIe30AqUcbUEQ8Dam60NerZY8qg=

Name: AIspace/graphToolKit/dialogs/EdgeDialog.class
SHA-256-Digest: 9mp/+/MyHGVA4iTPmJDdkdgLlQpL0puie7jvV0dl33o=

Name: AIspace/graphToolKit/images/deduction/gear.png
SHA-256-Digest: TTOa9YOnrJ97fmWu/nuvt6/8voUbaEvUB9aID/g/kfA=

Name: saves/acyclicbicycle.xml
SHA-256-Digest: TneSLYjyb3em+iwMiKbHY9TAMl3EUSdOH3zEcwfuVu4=

Name: AIspace/search/dialogs/SearchDescriptionDialog.class
SHA-256-Digest: qaZVEcXG6Z4Zz7aSfkA7Sbibu4inUyZaqwz1qc9jCNM=

Name: AIspace/search/dialogs/InvertDialog.class
SHA-256-Digest: s3JsL1TqiYtIjlyeRIbP2Q0kCJvhGQnal8EljHDAJZU=

Name: AIspace/search/dialogs/EdgeDialog.class
SHA-256-Digest: NkRNliBWsxhT01AsdApdGb3VDTWOBaJ7gJNlt4DKc44=

Name: AIspace/graphToolKit/images/neural/stepTarget.png
SHA-256-Digest: S85TnE5DAgIMPBGs8/3sI4mRLd45CeThgxVAuNMl/Hc=

Name: AIspace/search/searchTypes/LowestCostFirst.class
SHA-256-Digest: 7O53l2mOVIca5sCcC1fpshc43EaqxxGnsdHF1i5iKT4=

Name: AIspace/search/searchTypes/AStar.class
SHA-256-Digest: kbi6M98J0FweXIl2g7Q5o1p6kc5x1S1SCfoOqi1YDwM=

Name: AIspace/graphToolKit/InlineApplet.class
SHA-256-Digest: zLBTrP6I/x1nqX4HJub5ttk3PnZfaoRUEpqM4kUiAfE=

Name: AIspace/graphToolKit/images/common/setProp.png
SHA-256-Digest: 0pTvFRsHWX0rKMQS+Qc5uUdm526fejzPMBS8seF/Xck=

Name: AIspace/graphToolKit/images/constraint/stop.gif
SHA-256-Digest: ozF0zlywqUZtG/pNa3XdUPKkZ4KDSoxi3hx/ez3AEZY=

Name: org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader$ManifestIn
 fo.class
SHA-256-Digest: EkUyHndV0ckDtkvs9df9k0EMJIAqUJ2Exc4DYaFQtqY=

Name: saves/vancouver.xml
SHA-256-Digest: kblE8PazqgO5PcPxpmiyQBiVHxfhcHv6BIgrGV9G8yk=

Name: AIspace/graphToolKit/images/cspTools/addvar.png
SHA-256-Digest: tf33K0X7bf+pmwnqoTQ7dHyjRZgkpMI9duXpEylzVWw=

Name: AIspace/graphToolKit/GraphApplet.class
SHA-256-Digest: HRWU7zW1JFNwTviIlsDx5rHXolhK/Li2FjyaYGtXnp8=

Name: AIspace/graphToolKit/images/deduction/inspectNode.png
SHA-256-Digest: soJ+HbxilZFgGogmALgS9zAF0qKeIpDqTgLIhmG336Q=

Name: AIspace/graphToolKit/images/dTree/movesubtree.png
SHA-256-Digest: JtMP8JQ4NvwTSQ7r0xKThjmUdQmeVsrpsXBDj+8pQvk=

Name: saves/simpletree.xml
SHA-256-Digest: 1g4qRZc7FTMJpttllsqT6Z4jsYqGVvRGjOELo+4lSqk=

Name: org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandler.cla
 ss
SHA-256-Digest: 5rRXaPsMv24KAH/i0eJNkvun4VwK6dzXjI251I+F2ME=





META-INF/SERVER.RSA


AIspace/search/InlineCanvas.class
package AIspace.search;
public synchronized class InlineCanvas extends SearchCanvas {
    private static final long serialVersionUID = 1;
    public javax.swing.JMenuItem pruning;
    public javax.swing.JMenu algorithm;
    public void InlineCanvas(java.awt.Container);
    public void initializePopup();
    public boolean isAntiAliasingEnabled();
    public void solvePopUp();
    protected void popupCanvas(int, int);
    public void addMenuItems();
}




AIspace/search/SearchQuizAnimator.class
package AIspace.search;
public synchronized class SearchQuizAnimator extends Thread {
    private int animateSpeed;
    private java.util.ArrayList frontier;
    private boolean isRunning;
    private boolean isPaused;
    private int nodesLeft;
    private elements.SearchNode oldFrontierNode;
    private SearchCanvas canvas;
    private searchTypes.Search search;
    public void SearchQuizAnimator(searchTypes.Search, SearchCanvas, java.util.ArrayList, int);
    public void run();
    public void quit();
}




AIspace/search/InlineSearchApplet.class
package AIspace.search;
public synchronized class InlineSearchApplet extends AIspace.graphToolKit.InlineApplet {
    public javax.swing.JTextPane algorithmPane;
    private static final long serialVersionUID = 1;
    private int searchAlgorithm;
    public javax.swing.JTextArea pathTextArea;
    public javax.swing.JToggleButton fakeButton;
    public javax.swing.JToggleButton quizButton;
    public javax.swing.JToggleButton inspectNodeButton;
    public javax.swing.JToggleButton selectButton;
    public javax.swing.JToggleButton resetButton;
    public javax.swing.JToggleButton stopButton;
    public javax.swing.JToggleButton autoSearchButton;
    public javax.swing.JToggleButton stepButton;
    public javax.swing.JToggleButton fineStepButton;
    private boolean fineStepButtonOn;
    private boolean stepButtonOn;
    private boolean autoSearchButtonOn;
    private boolean stopButtonOn;
    private boolean resetButtonOn;
    private boolean selectButtonOn;
    private boolean inspectNodeButtonOn;
    private boolean quizButtonOn;
    public boolean fineStepPopupOn;
    public boolean stepPopupOn;
    public boolean autoSearchPopupOn;
    public boolean stopPopupOn;
    public boolean resetPopupOn;
    public boolean quizPopupOn;
    public boolean pruningPopupOn;
    public boolean algorithmPopupOn;
    private boolean showNodeHeuristics;
    private boolean showEdgeCosts;
    private boolean showQuizResults;
    private boolean showPathInfo;
    private boolean showAlgorithm;
    private boolean quizMode;
    public void InlineSearchApplet();
    public void init();
    protected void makeCanvas();
    public InlineCanvas returnCanvas();
    protected void loadParams();
    public void createToolBar();
    public int getAlgorithm();
    public void load(String);
    public void actionPerformed(java.awt.event.ActionEvent);
    public void setIsAutoSearchingOptions(boolean);
    public void resetSearch();
    public void startQuiz();
    public void setFrontierPathArea(String);
    public void clearPathArea();
    public void setPathArea(String);
    public boolean isShowingAnswers();
    public void stopSearch();
    public void setAutoSearch();
    private void updateAlgorithm();
    private String getAlgorithmName();
    public void setAlgorithm(String);
    private void startUserDefinedSearch();
    public void fineStep();
    public void step();
    public void autoSearch();
    public void quiz();
    public void autoscale();
    public void resetEdgeLabels();
}




AIspace/search/SearchWindow.class
package AIspace.search;
public synchronized class SearchWindow extends AIspace.graphToolKit.GraphWindow {
    private static final long serialVersionUID = 1;
    public javax.swing.JTextArea pathTextArea;
    private javax.swing.JCheckBoxMenuItem showPathPanel;
    private javax.swing.JRadioButtonMenuItem depthFirst;
    private javax.swing.JRadioButtonMenuItem breadthFirst;
    private javax.swing.JRadioButtonMenuItem lowestCostFirst;
    private javax.swing.JRadioButtonMenuItem bestFirst;
    private javax.swing.JRadioButtonMenuItem heuristicDepthFirst;
    private javax.swing.JRadioButtonMenuItem aStar;
    private javax.swing.JRadioButtonMenuItem branchAndBound;
    private javax.swing.JRadioButtonMenuItem userDefined;
    private javax.swing.JCheckBoxMenuItem showNodeHeuristics;
    private javax.swing.JCheckBoxMenuItem showEdgeCosts;
    private javax.swing.JCheckBoxMenuItem showQuizResults;
    private javax.swing.JMenuItem resetCosts;
    private javax.swing.JMenuItem autoNHMenuItem;
    private javax.swing.JMenuItem autoECMenuItem;
    private javax.swing.JMenuItem textRepresentationMenuItem;
    private javax.swing.JMenuItem xmlRepresentationMenuItem;
    private javax.swing.JMenuItem descriptionMenuItem;
    private javax.swing.JMenuItem redoItem;
    private javax.swing.JMenuItem undoItem;
    private boolean undoBoolean;
    protected String[] undoArray;
    protected int undoIndex;
    protected final int undoLimit;
    private javax.swing.JButton fakeButton;
    protected javax.swing.ImageIcon stepIcon;
    protected javax.swing.ImageIcon fineStepIcon;
    protected javax.swing.ImageIcon autoSearchIcon;
    protected javax.swing.ImageIcon stopIcon;
    protected javax.swing.ImageIcon resetIcon;
    protected javax.swing.ImageIcon quizIcon;
    protected javax.swing.ImageIcon viewNodePathIcon;
    protected javax.swing.ImageIcon invertGraphIcon;
    public void SearchWindow(javax.swing.JApplet);
    private void initializeAppletInfo();
    private void construct();
    private void initialize();
    protected void createToolBarWithText();
    protected void createToolBar();
    private void createToolBarLayout();
    protected void solveToolBar();
    protected void solveToolBarWithText();
    private void solveToolBarLayout();
    protected void getCanvas();
    public boolean isShowingAnswers();
    protected javax.swing.JMenuBar createMenuBar();
    public void switchTab(String);
    protected javax.swing.JMenu createFileMenu();
    protected javax.swing.JMenu createEditMenu();
    protected javax.swing.JMenu createViewMenu();
    protected javax.swing.JMenu createSearchOptionsMenu();
    protected javax.swing.JMenu createHelpMenu();
    public void setPathArea(String);
    public void setFrontierPathArea(String);
    public void clearPathArea();
    public void resetSearch();
    private void startUserDefinedSearch();
    public void load(String, String);
    public void load(java.io.BufferedReader);
    public void save(java.io.File);
    public void saveUndo();
    public void loadUndo();
    public void resetUndoState();
    public void loadRedo();
    private void setAlgorithm(String);
    public int getAlgorithm();
    private String getAlgorithmName();
    private String getAlgorithmPrompt(String);
    public void actionPerformed(java.awt.event.ActionEvent);
    public void setHeuristics();
    public void invertGraph();
    public void resetSearchAction();
    public void startQuiz();
    public void stopSearch();
    public void setAutoSearch();
    public void autoSearch();
    public void setIsAutoSearchingOptions(boolean);
    public void fineStep();
    public void step();
    protected void createNewGraph();
    public void setFontSize(int);
    public static void main(String[]);
}




AIspace/search/SearchApplet.class
package AIspace.search;
public synchronized class SearchApplet extends AIspace.graphToolKit.GraphApplet {
    public void SearchApplet();
    protected void startAction();
}




AIspace/search/FrontierInfo.class
package AIspace.search;
public synchronized class FrontierInfo {
    protected StringBuffer display;
    protected SearchGraph graph;
    protected searchTypes.Search search;
    protected java.awt.Container window;
    public void FrontierInfo(java.awt.Container);
    public void setGraph(SearchGraph);
    public void refreshFrontier();
    public void displayQuizFrontier();
    public void setFrontier(boolean);
    public String getPathString(java.util.ArrayList);
    public void showInitFrontier();
    public String getWhiteSpace(int, int);
    public void clear();
}




AIspace/search/SearchGraph.class
package AIspace.search;
public synchronized class SearchGraph extends AIspace.graphToolKit.Graph {
    public java.util.ArrayList startNodes;
    public java.util.ArrayList goalNodes;
    private int searchRate;
    private int pruning;
    public searchTypes.Search search;
    private java.awt.Container window;
    private FrontierInfo frontierInfo;
    public boolean stepInit;
    private int maxNumSteps;
    private boolean stopAtGoal;
    private boolean showNum;
    protected boolean useNodeDistance;
    protected boolean useEdgeLength;
    public static final int C_SET_START = 11;
    public static final int C_SET_GOAL = 15;
    public static final int C_SET_REGULAR = 16;
    protected int sortType;
    private String shortDescription;
    private String detailedDescription;
    public void SearchGraph(SearchCanvas, java.awt.Container);
    public searchTypes.Search getSearchObject();
    public int getMaxNumSteps();
    public void setMaxNumSteps(int);
    public boolean getStopAtGoal();
    public void setStopAtGoal(boolean);
    public boolean getShowNum();
    public void setShowNum(boolean);
    public void setPathArea(String);
    public void setUseNodeDistance(boolean);
    public boolean getUseNodeDistance();
    public void setUseEdgeLength(boolean);
    public boolean getUseEdgeLength();
    public String getShortDesc();
    public void setShortDesc(String);
    public String getDetailedDesc();
    public void setDetailedDesc(String);
    public void sendToBack(AIspace.graphToolKit.elements.Edge);
    public void createFrontierInfo();
    public FrontierInfo getFrontierInfo();
    public java.util.ArrayList getStartNodes();
    public java.util.ArrayList getGoalNodes();
    public int getSearchRate();
    public void setSearchRate(int);
    public int getPruning();
    public void setPruning(int);
    public void stopAutoSearch();
    public void updateEdgeLabels(boolean);
    public void setHeuristicsFromDistance();
    public void setNodes();
    public void doSearch(int, int);
    public void resetSearch();
    public String parse(String);
    public String parseLine(String);
    public String parseXML(AIspace.XMLReader.XMLTree);
    public String generateXMLTextRep();
    public String generateTextRep();
    public String generatePrologTextRep();
    public java.awt.Container getWindow();
    public String updateGraphFromText(String);
    public String updateGraphFromXML(String);
    public void setAsStartNode(elements.SearchNode);
    public void setAsGoalNode(elements.SearchNode);
    public void setAsRegularNode(elements.SearchNode);
    public void invert();
    public void deleteSelectedEntities();
    public void setSortType(int);
}




AIspace/search/SearchCanvas.class
package AIspace.search;
public synchronized class SearchCanvas extends AIspace.graphToolKit.GraphCanvas {
    public static final int S_INSPECT_PATHS = 32465;
    public javax.swing.JMenuItem autoSearch;
    public javax.swing.JMenuItem fineStep;
    public javax.swing.JMenuItem invert;
    public javax.swing.JMenuItem quiz;
    public javax.swing.JMenuItem reset;
    public javax.swing.JMenuItem step;
    public javax.swing.JMenuItem stop;
    private dialogs.EdgeDialog eDialog;
    private dialogs.NodeDialog nDialog;
    private dialogs.CostsHeuristicsDialog rDialog;
    private int lastStepSize;
    public int searchMethod;
    private boolean isQuizAnimating;
    private boolean isDisplayingHeuristics;
    private boolean isDisplayingCost;
    public void SearchCanvas(java.awt.Container, boolean);
    public void aPerformed(java.awt.event.ActionEvent);
    public searchTypes.Search getSearchObject();
    public void setQuizAnimating(boolean);
    public boolean isQuizAnimating();
    public void setDisplayHeuristics(boolean);
    public boolean isDisplayingHeuristics();
    public void setDisplayCost(boolean);
    public boolean isDisplayingCost();
    public void changeFont(int);
    protected void createEdge(AIspace.graphToolKit.elements.Entity, AIspace.graphToolKit.elements.Point);
    protected void createNode(AIspace.graphToolKit.elements.Entity, AIspace.graphToolKit.elements.Point);
    protected void deleteEnt(AIspace.graphToolKit.elements.Entity);
    public void disposeWindows();
    public void doSearch(int, int);
    public void greenify();
    public void keyPressed(java.awt.event.KeyEvent);
    public void mouseDragged(java.awt.event.MouseEvent);
    public void mousePressed(java.awt.event.MouseEvent);
    public void mouseReleased(java.awt.event.MouseEvent);
    public String parse(String);
    public String parseXML(String);
    public void pause();
    protected void popupCanvas(int, int);
    protected void popupEdge(int, int);
    protected void popupNode(int, int);
    public void reset();
    public void resetCosts();
    public void resetSearch();
    public void setCosts(dialogs.CostsHeuristicsDialog);
    public void setEnabled();
    protected void setEntProperties(AIspace.graphToolKit.elements.Entity);
    private void setHeuristics(dialogs.CostsHeuristicsDialog);
    public void setMode(int);
    public void setPathArea(String);
    public void setIsAutoSearchingOptions(boolean);
    protected void setRegularNode(elements.SearchNode);
    protected void setStartNode(elements.SearchNode);
    protected void setGoalNode(elements.SearchNode);
    public void solvePopUp();
    public void textRep(boolean);
    public void prologRep();
    public void XMLRep(boolean);
    public void unpause();
    public boolean updateGraphFromText(String, boolean);
    public SearchGraph getGraph();
}




AIspace/search/dialogs/AutoSearchOptionDialog.class
package AIspace.search.dialogs;
public synchronized class AutoSearchOptionDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    private AIspace.search.SearchWindow window;
    private java.awt.Choice choiceYesNo;
    private javax.swing.JTextField textNumSteps;
    public void AutoSearchOptionDialog(AIspace.search.SearchWindow);
    public void open();
    public boolean setValues();
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/search/dialogs/NodePathDialog$PathRenderer.class
package AIspace.search.dialogs;
public synchronized class NodePathDialog$PathRenderer extends javax.swing.JLabel implements javax.swing.ListCellRenderer {
    public void NodePathDialog$PathRenderer(NodePathDialog);
    public java.awt.Component getListCellRendererComponent(javax.swing.JList, Object, int, boolean, boolean);
}




AIspace/search/dialogs/NodePathDialog.class
package AIspace.search.dialogs;
public synchronized class NodePathDialog extends UserSearchPathSelectDialog {
    private String selectedNodeName;
    public void NodePathDialog(java.awt.Container, String, java.util.ArrayList);
}




AIspace/search/dialogs/UserSearchPathSelectDialog$ListRenderer.class
package AIspace.search.dialogs;
public synchronized class UserSearchPathSelectDialog$ListRenderer extends javax.swing.JLabel implements javax.swing.ListCellRenderer {
    public void UserSearchPathSelectDialog$ListRenderer(UserSearchPathSelectDialog);
    public java.awt.Component getListCellRendererComponent(javax.swing.JList, Object, int, boolean, boolean);
}




AIspace/search/dialogs/UserSearchPathSelectDialog.class
package AIspace.search.dialogs;
public synchronized class UserSearchPathSelectDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    protected javax.swing.JList pathList;
    protected java.awt.Font font;
    public void UserSearchPathSelectDialog(java.awt.Container, java.util.ArrayList);
    public void UserSearchPathSelectDialog(java.awt.Container, String, java.util.ArrayList);
    public void open();
    public int getSelectedPathIndex();
    protected boolean actionCancel();
    protected boolean actionOK();
}




AIspace/search/dialogs/InvertDialog.class
package AIspace.search.dialogs;
public synchronized class InvertDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    private boolean isCancelled;
    public void InvertDialog(javax.swing.JFrame);
    public boolean isCancelled();
    public void open();
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/search/dialogs/SearchDescriptionDialog.class
package AIspace.search.dialogs;
public synchronized class SearchDescriptionDialog extends AIspace.graphToolKit.dialogs.DescriptionDialog {
    protected AIspace.search.SearchGraph graph;
    private javax.swing.JTextPane sEditorPane;
    private javax.swing.JTextPane lEditorPane;
    public void SearchDescriptionDialog(AIspace.graphToolKit.GraphWindow, AIspace.search.SearchGraph, boolean);
    protected boolean saveDescription();
}




AIspace/search/dialogs/CostsHeuristicsDialog.class
package AIspace.search.dialogs;
public synchronized class CostsHeuristicsDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    private javax.swing.JLabel labelError;
    private AIspace.search.SearchGraph graph;
    private javax.swing.JCheckBox heuristics;
    private javax.swing.JCheckBox cost;
    private javax.swing.JRadioButton add;
    private javax.swing.JRadioButton multiply;
    private javax.swing.JTextField amountField;
    private String value;
    private int a;
    private boolean isCancelled;
    public void CostsHeuristicsDialog(javax.swing.JFrame, AIspace.search.SearchGraph);
    public void open();
    public boolean getHeuristicsState();
    public boolean getCostState();
    public boolean getAddState();
    public boolean getMultiplyState();
    public String getValue();
    public boolean setProperties();
    public boolean checkValidEdge();
    public boolean checkValidHeuristics();
    public void setLabelError();
    public boolean isCancelled();
    protected boolean actionOK();
    protected boolean actionCancel();
    public void actionPerformed(java.awt.event.ActionEvent);
}




AIspace/search/dialogs/NodeDialog.class
package AIspace.search.dialogs;
public synchronized class NodeDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    private javax.swing.JTextField textNodeName;
    private javax.swing.JTextField textHeuristics;
    private javax.swing.JRadioButton goalNodeButton;
    private javax.swing.JRadioButton startNodeButton;
    private javax.swing.JRadioButton regularNodeButton;
    private javax.swing.JLabel labelError;
    private AIspace.search.SearchGraph graph;
    private AIspace.search.SearchWindow sWindow;
    private AIspace.search.elements.SearchNode selected;
    private int nodeType;
    public boolean isCancelled;
    public void NodeDialog(javax.swing.JFrame, AIspace.search.SearchGraph);
    public void open(AIspace.search.elements.SearchNode, AIspace.graphToolKit.elements.Point);
    public boolean setProperties();
    public void setNodeType();
    protected boolean actionOK();
    protected boolean actionCancel();
    public void actionPerformed(java.awt.event.ActionEvent);
}




AIspace/search/dialogs/EdgeDialog.class
package AIspace.search.dialogs;
public synchronized class EdgeDialog extends AIspace.graphToolKit.dialogs.BasicDialog {
    private javax.swing.JTextField textEdgeCost;
    private javax.swing.JLabel labelError;
    private AIspace.search.elements.SearchEdge edge;
    private boolean isCancelled;
    public void EdgeDialog(javax.swing.JFrame);
    public void open(AIspace.search.elements.SearchEdge);
    public boolean setProperties();
    public boolean isCancelled();
    protected boolean actionOK();
    protected boolean actionCancel();
    public void actionPerformed(java.awt.event.ActionEvent);
}




AIspace/search/dialogs/SearchTextFrame.class
package AIspace.search.dialogs;
public synchronized class SearchTextFrame extends AIspace.graphToolKit.dialogs.TextFrame {
    public static final int TEXT_FORMAT = 9830;
    public static final int PROLOG_FORMAT = 9831;
    public static final int XML_FORMAT = 9832;
    private int format;
    public void SearchTextFrame(AIspace.search.SearchCanvas, String, String, int, boolean);
    protected boolean updateAction();
}




AIspace/search/elements/SearchEdge.class
package AIspace.search.elements;
public synchronized class SearchEdge extends AIspace.graphToolKit.elements.Edge {
    public static final int UNSEARCHED_EDGE = 0;
    public static final int SEARCHED_EDGE = 1;
    private double cost;
    public void SearchEdge(AIspace.search.SearchGraph, AIspace.graphToolKit.elements.Node, AIspace.graphToolKit.elements.Node);
    public double getCost();
    public void setCost(double);
    public void setDisplayCost(boolean);
    public void setAppearance(int);
    public int getAppearance();
    public void updateProperties(double);
    public void updateLength();
}




AIspace/search/elements/SearchNode.class
package AIspace.search.elements;
public synchronized class SearchNode extends AIspace.graphToolKit.elements.Node {
    public static final int REGULAR_NODE = 0;
    public static final int START_NODE = 1;
    public static final int GOAL_NODE = 2;
    public static final int CURRENT_NODE = 3;
    public static final int FRONTIER_NODE = 4;
    public static final int CHILDREN_NODE = 5;
    public static final int NON_CURRENT_NODE = 6;
    protected java.util.ArrayList neighbours;
    protected java.util.ArrayList oldNeighbours;
    protected int nodeType;
    protected int nodeSearchType;
    protected int currNeighbour;
    protected double heuristics;
    protected String searchOrder;
    protected String predicateLabel;
    protected double distance;
    protected boolean isSearchOrderDisplayed;
    protected boolean isPathFound;
    protected boolean isDrawnShadowed;
    public void SearchNode(AIspace.search.SearchGraph);
    public int getNodeType();
    public double getNodeHeuristics();
    public void setNodeType(int);
    public int getNodeSearchType();
    public void setNodeSearchType(int);
    public boolean isPathFound();
    public void setPathFound(boolean);
    public boolean isDrawnShadowed();
    public void setDrawnShadowed(boolean);
    public int numNeighbours();
    public java.util.ArrayList getOldNeighbours();
    public void addOldNeighbour(SearchNode);
    public void setOldNeighbours(java.util.ArrayList);
    public int getFirstNeighbour();
    public int getNextNeighbour();
    public void setChild(SearchNode);
    public java.util.ArrayList getChildren();
    public void addChildren(java.util.ArrayList);
    public void clearChild(SearchNode);
    public void removeEdgesOut(AIspace.graphToolKit.elements.Edge);
    public void setHeuristics(double);
    public double getHeuristics();
    public String getDecimalFormat();
    public void setDistance(double);
    public double getDistance();
    public void setSearchOrder(int);
    public void resetSearchOrder();
    public void setSearchOrderDisplayed(boolean);
    public boolean isSearchOrderDisplayed();
    public String getPredicateLabel();
    public void setPredicateLabel(String);
    public void setNodeAppearance(int);
    public int getNodeAppearance();
    public void draw(java.awt.Graphics, boolean);
    public void updateProperties(String, double);
    protected int getWidth();
    protected int getHeight();
    protected void drawLabel(java.awt.Graphics);
    public String toString();
}




AIspace/search/help/SearchHelpCanvas.class
package AIspace.search.help;
public synchronized class SearchHelpCanvas extends AIspace.graphToolKit.help.HelpCanvas {
    public void SearchHelpCanvas(boolean);
    public void paint(java.awt.Graphics);
}




AIspace/search/searchTypes/BranchAndBound.class
package AIspace.search.searchTypes;
public synchronized class BranchAndBound extends Search {
    static double smallestCost;
    private SearchObject lastGoalNode;
    static void <clinit>();
    public void BranchAndBound();
    public void BranchAndBound(AIspace.search.SearchGraph);
    public void BranchAndBound(AIspace.search.SearchGraph, int);
    protected int getStartIndex();
    public void showPath(SearchObject);
    protected void mergeWithFrontier(java.util.ArrayList);
    public void reset();
    protected void checkGoal(int);
    protected void stepOne();
    private int findNextObject();
    protected void stepTwo();
    private void printGoalNode(SearchObject);
}




AIspace/search/searchTypes/Search.class
package AIspace.search.searchTypes;
public abstract synchronized class Search {
    public static final int SEARCH_AUTO = 101;
    public static final int SEARCH_STEP = 102;
    public static final int SEARCH_FINE = 103;
    public static final int SEARCH_QUIZ = 104;
    public static final int DEPTH_FIRST = 201;
    public static final int BREADTH_FIRST = 202;
    public static final int LOWEST_COST_FIRST = 203;
    public static final int BEST_FIRST = 204;
    public static final int HEURISTIC_DEPTH_FIRST = 205;
    public static final int A_STAR = 206;
    public static final int BRANCH_BOUND = 207;
    public static final int USER_DEFINED = 209;
    public static final int MULT_PATH_PRUNING = 301;
    public static final int LOOP_DETECTION = 302;
    public static final int NO_PRUNING = 303;
    public static final int LEFTMOST_SORT = 400;
    public static final int ALPHABETICAL_SORT = 401;
    public static final int F_FUNC_SORT = 402;
    protected AIspace.search.SearchGraph graph;
    protected java.util.ArrayList frontier;
    protected java.util.ArrayList quizResultFrontier;
    protected java.util.ArrayList quizAnimateFrontier;
    protected java.util.ArrayList shorterFrontier;
    protected java.util.ArrayList neighbours;
    protected java.util.ArrayList startNodeIndex;
    protected java.util.ArrayList goalNodeIndex;
    protected int searchRate;
    protected SearchObject currObject;
    protected SearchObject previousObject;
    protected int currentStep;
    protected int nodeCount;
    protected boolean showAnswers;
    protected boolean quizzed;
    protected boolean firstAnswerCorrect;
    protected String pathString;
    protected int pruning;
    protected java.util.ArrayList nodesVisited;
    protected int previousIndex;
    protected AIspace.search.elements.SearchNode selectedNode;
    protected boolean goalReached;
    protected AutoSearch auto;
    public static int animationSpeed;
    protected int neighborSortType;
    protected java.util.ArrayList backup;
    protected java.util.ArrayList oldFrontier;
    protected java.util.ArrayList oldNeighbours;
    protected SearchObject oldCurrObject;
    protected AIspace.search.SearchQuizAnimator quizAnimate;
    protected String goalString;
    static void <clinit>();
    public void Search();
    public void Search(AIspace.search.SearchGraph);
    public void Search(AIspace.search.SearchGraph, int);
    public void setSelectedNode(AIspace.search.elements.SearchNode);
    public void repaint();
    protected void stepInit();
    public void step();
    public boolean isPathCurrent();
    public void showPath(SearchObject);
    public String getPathString();
    public AIspace.search.SearchGraph getGraph();
    public String getPathString(SearchObject);
    public void setShowAnswers(boolean);
    public boolean getShowAnswers();
    protected void doSearchStep();
    protected void doSearchFine();
    public void reset();
    private void resetAutoSearch();
    public void startAutoSearch();
    public void stopAutoSearch();
    public void pauseAuto(boolean);
    public boolean autoSearchContinue(int);
    public void autoSearchStep();
    public void autoSearchEnd();
    protected void doSearchQuiz();
    public void updateForQuiz();
    public void setSearchRate(int);
    public int getSearchRate();
    public int getPruning();
    public void setPruning(int);
    private void sortNeighbours();
    protected void stepThree();
    protected void stepOne();
    protected void stepTwo();
    protected int countOccurances(java.util.ArrayList, Integer);
    protected void checkGoal(int);
    protected void completed();
    public void paintNodes(java.util.ArrayList, int);
    public void paintNode(SearchObject, int);
    protected void paintPath(SearchObject, boolean);
    protected void resetPrevious(SearchObject);
    private void resetEdges();
    private void resetNodes(boolean);
    protected void clearOrdering();
    protected void pruneNodes();
    protected java.util.ArrayList pruneNodes2();
    public java.util.ArrayList getFrontier(boolean);
    public java.util.ArrayList getQuizFrontier();
    public java.util.ArrayList getNeighbours();
    public boolean getFirstAnswerCorrect();
    public void fillAnimateFrontier(java.util.TreeMap);
    protected void insertAdvance(int, SearchObject, java.util.TreeMap);
    protected abstract void mergeWithFrontier(java.util.ArrayList);
    protected abstract int getStartIndex();
    public int getNeighborSortType();
    public void setNeighborSortType(int);
    public String getGoalString();
}




AIspace/search/searchTypes/SearchObject.class
package AIspace.search.searchTypes;
public synchronized class SearchObject implements Cloneable {
    protected AIspace.search.SearchGraph graph;
    protected Integer[] edgeNodes;
    protected java.util.ArrayList path;
    protected double pathCost;
    public void SearchObject();
    public void SearchObject(int, int, java.util.ArrayList, AIspace.search.SearchGraph);
    public int getFromNode();
    public void setFromNode(int);
    public int getToNode();
    public void setToNode(int);
    public java.util.ArrayList getPath();
    public double getPathCost();
    public boolean checkNodeOnPath(int);
    public SearchObject clone();
    public String toString();
}




AIspace/search/searchTypes/DepthFirst.class
package AIspace.search.searchTypes;
public synchronized class DepthFirst extends Search {
    public void DepthFirst();
    public void DepthFirst(AIspace.search.SearchGraph);
    public void DepthFirst(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/BreadthFirst.class
package AIspace.search.searchTypes;
public synchronized class BreadthFirst extends Search {
    public void BreadthFirst();
    public void BreadthFirst(AIspace.search.SearchGraph);
    public void BreadthFirst(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/AutoSearch.class
package AIspace.search.searchTypes;
public synchronized class AutoSearch extends Thread {
    private int dt;
    private Search search;
    private boolean isRunning;
    public boolean isPaused;
    public void AutoSearch(Search, int);
    public void run();
    public void quit();
}




AIspace/search/searchTypes/HeuristicDepthFirst.class
package AIspace.search.searchTypes;
public synchronized class HeuristicDepthFirst extends Search {
    public void HeuristicDepthFirst();
    public void HeuristicDepthFirst(AIspace.search.SearchGraph);
    public void HeuristicDepthFirst(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/BestFirst.class
package AIspace.search.searchTypes;
public synchronized class BestFirst extends Search {
    public void BestFirst();
    public void BestFirst(AIspace.search.SearchGraph);
    public void BestFirst(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/LowestCostFirst.class
package AIspace.search.searchTypes;
public synchronized class LowestCostFirst extends Search {
    public void LowestCostFirst();
    public void LowestCostFirst(AIspace.search.SearchGraph);
    public void LowestCostFirst(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/UserDefinedSearch.class
package AIspace.search.searchTypes;
public synchronized class UserDefinedSearch extends Search {
    protected int counter;
    protected int currIndex;
    protected boolean isDone;
    public void UserDefinedSearch();
    public void UserDefinedSearch(AIspace.search.SearchGraph);
    public void UserDefinedSearch(AIspace.search.SearchGraph, int);
    public void step();
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/search/searchTypes/AStar.class
package AIspace.search.searchTypes;
public synchronized class AStar extends Search {
    public void AStar();
    public void AStar(AIspace.search.SearchGraph);
    public void AStar(AIspace.search.SearchGraph, int);
    protected void mergeWithFrontier(java.util.ArrayList);
    protected int getStartIndex();
}




AIspace/graphToolKit/GraphWindow.class
package AIspace.graphToolKit;
public synchronized class GraphWindow extends javax.swing.JFrame implements java.awt.event.WindowListener, java.awt.event.ActionListener, javax.swing.event.ChangeListener {
    private static final long serialVersionUID = 1;
    protected boolean undoBoolean;
    protected String fileName;
    protected static String appletTitle;
    protected static String appletName;
    protected static String aboutText;
    protected java.awt.Font toolBarFont;
    protected int savedLineWidth;
    protected int savedFontSize;
    protected javax.swing.JRadioButtonMenuItem savedFontSizeMenuItem;
    protected javax.swing.JRadioButtonMenuItem savedLineWidthMenuItem;
    protected javax.swing.JRadioButtonMenuItem extraLargeFont;
    protected javax.swing.JRadioButtonMenuItem largeFont;
    protected javax.swing.JRadioButtonMenuItem mediumFont;
    protected javax.swing.JRadioButtonMenuItem smallFont;
    protected javax.swing.JRadioButtonMenuItem otherFont;
    protected javax.swing.JRadioButtonMenuItem wideLine;
    protected javax.swing.JRadioButtonMenuItem mediumLine;
    protected javax.swing.JRadioButtonMenuItem narrowLine;
    protected javax.swing.JRadioButtonMenuItem pan;
    protected javax.swing.JRadioButtonMenuItem zoom;
    protected boolean isMessagePanelShowing;
    protected boolean isAntiAliasingEnabled;
    protected boolean isButtonTextShowing;
    protected boolean isToolBarShowing;
    protected java.awt.GridBagConstraints gbc;
    protected java.awt.GridBagLayout gbl;
    protected javax.swing.JPanel canvasPanel;
    protected javax.swing.JPanel bottomPanel;
    protected javax.swing.JTabbedPane tabbedPane;
    public javax.swing.JScrollPane scrollPanel;
    protected javax.swing.JSplitPane tabandbottom;
    protected javax.swing.JTextArea algoText;
    protected javax.swing.JToggleButton[] createButModes;
    protected javax.swing.JToggleButton[] solveButModes;
    protected javax.swing.ButtonGroup createModeButGroup;
    protected javax.swing.ButtonGroup solveModeButGroup;
    protected javax.swing.JToolBar toolBar;
    protected int otherSavedButtonIndex;
    protected javax.swing.ImageIcon createNodeIcon;
    protected javax.swing.ImageIcon createEdgeIcon;
    protected javax.swing.ImageIcon selectIcon;
    protected javax.swing.ImageIcon deleteIcon;
    protected javax.swing.ImageIcon setPropsIcon;
    protected javax.swing.JPanel emptyPanel1;
    protected javax.swing.JPanel emptyPanel2;
    protected GraphCanvas canvas;
    protected LabelCanvas messageCanvas;
    protected javax.swing.JApplet applet;
    public void GraphWindow(javax.swing.JApplet);
    private void initializeAppletInfo();
    protected void addComponent(javax.swing.JComponent, java.awt.Container, int, int, int, int, double, double);
    protected javax.swing.JMenuBar createMenuBar();
    protected javax.swing.JMenu createFileMenu();
    protected javax.swing.JMenu createViewMenu();
    protected javax.swing.JMenu createHelpMenu();
    public String getAboutText();
    public javax.swing.JApplet getApplet();
    public static javax.swing.ImageIcon createImageIcon(String);
    protected void createToolBar();
    protected void createToolBarWithText();
    private void createToolBarLayout();
    protected void setCreateButtons(int, javax.swing.ImageIcon, String);
    protected void setSolveButtons(int, javax.swing.ImageIcon, String);
    protected void setCreateButtonsWithText(int, String, javax.swing.ImageIcon, String);
    protected void setSolveButtonsWithText(int, String, javax.swing.ImageIcon, String);
    protected void solveToolBar();
    protected void solveToolBarWithText();
    private Graph randomGraph(int);
    protected void getCanvas();
    public final GraphCanvas returnCanvas();
    public void setHorizontalBarPosition(int);
    public void setVerticalBarPosition(int);
    public void switchTab(String);
    public int getTabIndex();
    public void setPanZoom(int);
    public void setCreate();
    public void setSolve();
    public void setPromptLabel(String);
    public void appendColoredTextToPrompLabel(String, java.awt.Color);
    public String getExactPromptLabel();
    public void setPromptColor(java.awt.Color);
    public String getPromptLabel();
    protected void saveProperties();
    protected void restoreProperties();
    public boolean isAntiAliasingEnabled();
    public boolean isButtonTextShowing();
    protected boolean hasLocalAccess();
    protected void loadSampleGraph();
    protected void openGraph();
    protected void createNewGraph();
    protected void openLocation();
    public void saveGraph();
    protected void save(java.io.File);
    public void load(String, String);
    public void load(java.io.File);
    public void load(java.io.BufferedReader);
    public void setMessageCanvasFontSize(int);
    public void setFileName(String);
    public void actionPerformed(java.awt.event.ActionEvent);
    protected int getSelectedButtonIndex(javax.swing.JToggleButton[]);
    public final void showMessage(String, String);
    protected final void centerWindow();
    public void stateChanged(javax.swing.event.ChangeEvent);
    public void windowClosed(java.awt.event.WindowEvent);
    public void windowClosing(java.awt.event.WindowEvent);
    public void windowActivated(java.awt.event.WindowEvent);
    public void windowDeactivated(java.awt.event.WindowEvent);
    public void windowDeiconified(java.awt.event.WindowEvent);
    public void windowIconified(java.awt.event.WindowEvent);
    public void windowOpened(java.awt.event.WindowEvent);
    public static void main(String[]);
}




AIspace/graphToolKit/LabelCanvas.class
package AIspace.graphToolKit;
public synchronized class LabelCanvas extends javax.swing.JPanel {
    private static final long serialVersionUID = 1;
    private java.awt.Font font;
    private java.awt.FontMetrics fm;
    private javax.swing.JTextPane textArea;
    private javax.swing.text.StyledDocument doc;
    private javax.swing.text.MutableAttributeSet standard;
    public void LabelCanvas();
    public synchronized void setText(String);
    public void setTextColor(java.awt.Color);
    public void appendColoredText(String, java.awt.Color);
    public void setFontSize(int);
    public String getText();
    public String getExactText();
    public void revalidate();
}




AIspace/graphToolKit/GraphApplet.class
package AIspace.graphToolKit;
public synchronized class GraphApplet extends javax.swing.JApplet implements java.awt.event.ActionListener {
    protected java.util.ArrayList windows;
    public void GraphApplet();
    public void init();
    protected void startAction();
    public void actionPerformed(java.awt.event.ActionEvent);
    public void stop();
}




AIspace/graphToolKit/InlineApplet.class
package AIspace.graphToolKit;
public abstract synchronized class InlineApplet extends javax.swing.JApplet implements java.awt.event.ActionListener, java.awt.event.ComponentListener {
    private static final long serialVersionUID = 1;
    protected GraphCanvas canvas;
    protected javax.swing.JToggleButton[] buttons;
    protected LabelCanvas messageCanvas;
    protected javax.swing.JPanel canvasPanel;
    protected java.awt.GridBagConstraints gbc;
    protected java.awt.GridBagLayout gbl;
    protected javax.swing.JPanel mainPanel;
    protected javax.swing.JPanel toolBarPanel;
    protected boolean showMessagePanel;
    protected boolean popupMenuOn;
    protected boolean autoscale;
    protected boolean showBorder;
    protected boolean showButtons;
    public boolean textRepresentationPopupOn;
    protected boolean incorrectParameter;
    public void InlineApplet();
    public void init();
    public GraphCanvas getCanvas();
    public boolean isPopupMenuOn();
    protected void loadParams();
    protected void incorrectParameter(String, String);
    public abstract void load(String);
    protected static javax.swing.ImageIcon createImageIcon(String);
    protected void addComponent(javax.swing.JComponent, java.awt.Container, int, int, int, int, double, double);
    protected void setSolveButtonsWithText(int, String, javax.swing.ImageIcon, String);
    public void appendColoredTextToPrompLabel(String, java.awt.Color);
    public String getPromptLabel();
    public void setPromptLabel(String);
    public void actionPerformed(java.awt.event.ActionEvent);
    public void componentResized(java.awt.event.ComponentEvent);
    public void componentHidden(java.awt.event.ComponentEvent);
    public void componentMoved(java.awt.event.ComponentEvent);
    public void componentShown(java.awt.event.ComponentEvent);
}




AIspace/graphToolKit/GraphCanvas.class
package AIspace.graphToolKit;
public synchronized class GraphCanvas extends javax.swing.JPanel implements java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.print.Printable, java.awt.event.KeyListener, java.awt.event.ActionListener {
    public java.awt.Container parent;
    public Graph graph;
    public int WIDTH;
    public int HEIGHT;
    protected java.awt.Font font;
    protected elements.Point mClickedPos;
    protected elements.Point mDraggedPos;
    protected elements.Point mMovedPos;
    protected elements.Point mPressedPos;
    protected elements.Point mReleasedPos;
    protected elements.Point mOriginalPos;
    protected boolean isDragging;
    protected boolean isMoving;
    protected boolean isClicked;
    protected boolean isSelected;
    protected elements.Entity hover;
    protected elements.Node from;
    protected elements.Node to;
    protected int makingEdge;
    protected static final int NO = 0;
    protected static final int YES = 1;
    protected static final int DONE = 2;
    protected int submode;
    protected int mode;
    protected int rmode;
    public int tempMode;
    protected int tmpMode;
    protected dialogs.NodeDialog nDialog;
    protected dialogs.EdgeDialog eDialog;
    protected float[] panZoomRect;
    public boolean pause;
    public boolean inline;
    public javax.swing.JPopupMenu pop;
    protected dialogs.MessageDialog md;
    protected dialogs.MessageFrame mf;
    protected elements.Entity entClicked;
    protected elements.Entity tempEnt;
    protected float draggingDifX;
    protected float draggingDifY;
    public void GraphCanvas(java.awt.Container, boolean);
    public void init();
    protected void popupCanvas(int, int);
    protected void popupNode(int, int);
    protected void popupEdge(int, int);
    public void setCanvasSize();
    public void reset();
    public void showMessage(String, String);
    public void clearMouse();
    public void setGraph(Graph);
    public void moveGraphToPoint(elements.Point);
    public void changeFont(int);
    public int getFontSize();
    public void centerOverNode(elements.Node);
    public java.awt.Font getFont();
    public java.awt.FontMetrics getFontMetrics();
    public java.awt.FontMetrics getFontMetricsForPrinting();
    public void updateGraph();
    public void changeLineWidth();
    public void resetLabels();
    public int getSubmode();
    public int getMode();
    public String getPromptLabel();
    public void setPromptLabel(String);
    public void appendColoredTextToPrompLabel(String, java.awt.Color);
    public final void setPromptColor(java.awt.Color);
    protected float maximizingScale();
    public float maximizingScaleForPrinting();
    public void zoom(float);
    public void zoom(elements.Point, float);
    public void zoomForPrinting();
    public void moveGraphToMiddle();
    public void moveToTopMiddle();
    public void autoscale();
    public void paintComponent(java.awt.Graphics);
    public boolean isAntiAliasingEnabled();
    public void drawPrint(java.awt.Graphics2D);
    public void setSubmode(int);
    public void checkAndResetSubMode(elements.Entity);
    public void setMode(int);
    public void setRMode(int);
    public int getRMode();
    public void pause();
    public void unpause();
    public void disposeWindows();
    public void mouseClicked(java.awt.event.MouseEvent);
    public void mouseEntered(java.awt.event.MouseEvent);
    public void mouseExited(java.awt.event.MouseEvent);
    public void mousePressed(java.awt.event.MouseEvent);
    public void mouseReleased(java.awt.event.MouseEvent);
    public void mouseDragged(java.awt.event.MouseEvent);
    public void mouseMoved(java.awt.event.MouseEvent);
    protected void createNode(elements.Entity, elements.Point);
    protected void createEdge(elements.Entity, elements.Point);
    protected void setEntProperties(elements.Entity);
    protected void undo();
    protected void deleteEnt(elements.Entity);
    protected void mPressedSelect(elements.Entity, boolean);
    protected void mReleasedSelect(elements.Entity, boolean);
    protected void mDraggedSelect();
    public void keyPressed(java.awt.event.KeyEvent);
    public void keyReleased(java.awt.event.KeyEvent);
    public void keyTyped(java.awt.event.KeyEvent);
    public void actionPerformed(java.awt.event.ActionEvent);
    protected void aPerformed(java.awt.event.ActionEvent);
    public int print(java.awt.Graphics, java.awt.print.PageFormat, int) throws java.awt.print.PrinterException;
    public void print();
}




AIspace/graphToolKit/GraphConsts.class
package AIspace.graphToolKit;
public synchronized class GraphConsts {
    public static final java.awt.Color bg;
    public static final java.awt.Color fg;
    public static final int OVAL = 1110;
    public static final int RECT = 1111;
    public static final int DIAMOND = 1112;
    public static final int ROUNDED_RECT = 1113;
    public static final int CREATE = 2220;
    public static final int SOLVE = 2221;
    public static final int C_CREATE_NODE = 3330;
    public static final int C_CREATE_EDGE = 3331;
    public static final int C_SELECT = 3332;
    public static final int C_DELETE = 3333;
    public static final int C_SET_PROP = 3334;
    public static final int C_SELECT_NODE = 3335;
    public static final int PAN = 4440;
    public static final int ZOOM = 4441;
    public static final int NON_DIRECTIONAL = 5550;
    public static final int DIRECTIONAL = 5551;
    public static final int BI_DIRECTIONAL = 5552;
    public static final int NODE = 7770;
    public static final int EDGE = 7771;
    public static final int EDGE_LABEL = 7772;
    public static java.awt.Cursor HAND_CURSOR;
    public static java.awt.Cursor DEFAULT_CURSOR;
    public static java.awt.Cursor WAIT_CURSOR;
    public static int selfDx;
    public static int selfDy;
    static void <clinit>();
    public void GraphConsts();
}




AIspace/graphToolKit/Graph.class
package AIspace.graphToolKit;
public synchronized class Graph {
    public java.util.ArrayList nodes;
    protected java.util.LinkedList layeredNodes;
    public java.util.ArrayList edges;
    protected java.util.ArrayList selectedNodes;
    protected java.util.ArrayList selectedEdges;
    private float scale;
    public GraphCanvas canvas;
    private int lineWidth;
    private float arrowWidth;
    private float arrowHeight;
    public void Graph(GraphCanvas);
    public void addEdge(elements.Edge);
    public void addEdge(String, elements.Node, elements.Node, java.awt.Color, int);
    public void addNode(elements.Node);
    private void calculateArrowSize();
    public void clearGraph();
    public void deleteSelected();
    public boolean deselect(elements.Entity);
    public boolean deselectAll();
    public boolean deselectAllButThis(elements.Entity);
    public void draw(java.awt.Graphics, boolean);
    public void drawStructure(java.awt.Graphics, boolean);
    public elements.Edge edgeAt(int);
    public float getArrowHeight();
    public float getArrowWidth();
    public elements.Point[] getBound();
    public elements.Edge getEdge(int, int);
    public java.util.Iterator getEdges();
    public int getLastIndex();
    public int getLineWidth();
    public int getNextIndex();
    public java.util.Iterator getNodes();
    public final String getPromptLabel();
    public float getScale();
    public boolean isInSolveMode();
    public boolean isNodeNameAllowed(String, elements.Node);
    public void modifyEdge(elements.Edge, String, elements.Node, elements.Node, java.awt.Color, int);
    public void modifyNode(elements.Node, String, elements.Point, java.awt.Color, int);
    public void moveEntities(elements.Point, elements.Node);
    public void moveLabel(elements.Point, elements.EdgeLabel);
    public elements.Node nodeAt(int);
    public elements.Node nodeFromIndex(int);
    public int numEdges();
    public int numNodes();
    public void order_bringToFront(elements.Node);
    public void order_sendToBack(elements.Node);
    public void removeNode(elements.Node);
    public void repaint();
    public void resetEdgeLabels();
    public void resetLabel(elements.Edge);
    public void resetLabels();
    public elements.Entity searchEntities(elements.Point);
    public java.util.ArrayList searchEntities(elements.Point, elements.Point);
    public boolean select(elements.Entity);
    public void setLineWidth(int);
    public final void setPromptColor(java.awt.Color);
    public final void appendColoredTextToPrompLabel(String, java.awt.Color);
    public final void setPromptLabel(String);
    public void setScale(float);
    public void showMessage(String, String);
    public String toString();
    public void translateAll(float, float);
    public void updateEdgeSize();
    public void updateNodeSize();
    public void updateNodeSize(elements.Node);
    protected boolean validNodeIndex(int);
}




AIspace/graphToolKit/dialogs/TextFrame$1.class
package AIspace.graphToolKit.dialogs;
synchronized class TextFrame$1 extends java.awt.event.MouseAdapter {
    void TextFrame$1(TextFrame);
    public void mouseClicked(java.awt.event.MouseEvent);
}




AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel$1.class
package AIspace.graphToolKit.dialogs;
synchronized class TextFrame$CaretListenerLabel$1 implements Runnable {
    void TextFrame$CaretListenerLabel$1(TextFrame$CaretListenerLabel, int);
    public void run();
}




AIspace/graphToolKit/dialogs/TextFrame$CaretListenerLabel.class
package AIspace.graphToolKit.dialogs;
public synchronized class TextFrame$CaretListenerLabel extends javax.swing.JLabel implements javax.swing.event.CaretListener {
    private static final long serialVersionUID = 1;
    public void TextFrame$CaretListenerLabel(TextFrame, String);
    public void caretUpdate(javax.swing.event.CaretEvent);
    protected void displaySelectionInfo(int, int);
}




AIspace/graphToolKit/dialogs/TextFrame.class
package AIspace.graphToolKit.dialogs;
public abstract synchronized class TextFrame extends BasicFrame {
    private javax.swing.JPopupMenu pop;
    protected javax.swing.JTextArea display;
    protected AIspace.graphToolKit.GraphCanvas canvas;
    protected javax.swing.JButton updateButton;
    public void TextFrame(AIspace.graphToolKit.GraphCanvas, String, String);
    protected void open();
    protected final void popupEdit(int, int);
    protected final boolean actionOK();
    protected final boolean actionCancel();
    protected abstract boolean updateAction();
    public final void actionPerformed(java.awt.event.ActionEvent);
}




AIspace/graphToolKit/dialogs/NodeDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class NodeDialog extends BasicDialog {
    private javax.swing.JComboBox colors;
    private javax.swing.JComboBox shapes;
    private AIspace.graphToolKit.GraphCanvas canvas;
    private AIspace.graphToolKit.elements.Point pos;
    private javax.swing.JTextField label;
    private boolean creating;
    private AIspace.graphToolKit.elements.Node node;
    public void NodeDialog(AIspace.graphToolKit.GraphCanvas);
    public void open(AIspace.graphToolKit.elements.Point);
    public void open(AIspace.graphToolKit.elements.Node);
    protected boolean actionOK();
    protected boolean actionCancel();
    private void parseDialog();
}




AIspace/graphToolKit/dialogs/MessageFrame.class
package AIspace.graphToolKit.dialogs;
public synchronized class MessageFrame extends BasicFrame implements java.awt.event.WindowListener {
    private javax.swing.JLabel labelMessage;
    private java.awt.event.ActionListener actionListener;
    private java.awt.event.ActionEvent event;
    public void MessageFrame();
    public void open(String, String);
    protected boolean actionOK();
    protected boolean actionCancel();
    public void windowClosing(java.awt.event.WindowEvent);
    public void windowActivated(java.awt.event.WindowEvent);
    public void windowClosed(java.awt.event.WindowEvent);
    public void windowDeactivated(java.awt.event.WindowEvent);
    public void windowDeiconified(java.awt.event.WindowEvent);
    public void windowIconified(java.awt.event.WindowEvent);
    public void windowOpened(java.awt.event.WindowEvent);
    public synchronized void addActionListener(java.awt.event.ActionListener);
    public synchronized void removeActionListener(java.awt.event.ActionListener);
    protected void processEvent(java.awt.AWTEvent);
    protected void processActionEvent(java.awt.event.ActionEvent);
}




AIspace/graphToolKit/dialogs/DescriptionDialog.class
package AIspace.graphToolKit.dialogs;
public abstract synchronized class DescriptionDialog extends BasicDialog {
    private static final long serialVersionUID = 1;
    protected AIspace.graphToolKit.GraphWindow window;
    private boolean editable;
    public void DescriptionDialog(AIspace.graphToolKit.GraphWindow, String, boolean);
    public void open();
    public javax.swing.JPanel constructTopPanel(String, javax.swing.JEditorPane);
    public javax.swing.JPanel constructCenterPanel(String, javax.swing.JEditorPane);
    public javax.swing.JPanel constructBottomPanel();
    protected String formatString(String);
    protected abstract boolean saveDescription();
    protected boolean actionCancel();
    protected boolean actionOK();
}




AIspace/graphToolKit/dialogs/BasicPanel.class
package AIspace.graphToolKit.dialogs;
public synchronized class BasicPanel extends javax.swing.JPanel {
    protected java.awt.GridBagConstraints gbc;
    protected java.awt.GridBagLayout gbl;
    public void BasicPanel();
    public void BasicPanel(boolean);
    public void BasicPanel(java.awt.LayoutManager);
    public void BasicPanel(java.awt.LayoutManager, boolean);
    protected final void addComponent(javax.swing.JComponent, java.awt.Container, int, int, int, int, double, double);
}




AIspace/graphToolKit/dialogs/OpenLocationDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class OpenLocationDialog extends BasicDialog {
    private javax.swing.JTextField tf;
    public String url;
    public void OpenLocationDialog(javax.swing.JFrame);
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/graphToolKit/dialogs/MessageDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class MessageDialog extends BasicDialog {
    private javax.swing.JLabel labelMessage;
    private java.awt.event.ActionListener actionListener;
    private java.awt.event.ActionEvent event;
    public void MessageDialog(javax.swing.JFrame);
    public void open(String, String);
    protected boolean actionOK();
    protected boolean actionCancel();
    public synchronized void addActionListener(java.awt.event.ActionListener);
    public synchronized void removeActionListener(java.awt.event.ActionListener);
    protected void processEvent(java.awt.AWTEvent);
    protected void processActionEvent(java.awt.event.ActionEvent);
}




AIspace/graphToolKit/dialogs/AboutDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class AboutDialog extends BasicDialog {
    private static String aboutText;
    static void <clinit>();
    public void AboutDialog(javax.swing.JFrame, boolean);
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/graphToolKit/dialogs/ProblemDialog$1.class
package AIspace.graphToolKit.dialogs;
synchronized class ProblemDialog$1 extends javax.swing.JList {
    private static final long serialVersionUID = 1;
    void ProblemDialog$1(ProblemDialog, Object[]);
    public String getToolTipText(java.awt.event.MouseEvent);
}




AIspace/graphToolKit/dialogs/ProblemDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class ProblemDialog extends BasicDialog implements javax.swing.event.ListSelectionListener {
    private static final long serialVersionUID = 1;
    protected AIspace.graphToolKit.GraphWindow window;
    protected java.util.LinkedHashMap problemNameToFileName;
    protected java.util.LinkedHashMap sampleProblemDescription;
    protected javax.swing.JList list;
    protected boolean errorOccurredOnLoad;
    protected String myDesc;
    protected boolean longDesc;
    protected MessageDialog md;
    protected java.io.BufferedReader in;
    public void ProblemDialog(AIspace.graphToolKit.GraphWindow);
    public void open();
    protected javax.swing.JPanel constructTopPanel();
    protected javax.swing.JPanel constructCenterPanel();
    protected javax.swing.JPanel constructBottomPanel();
    protected boolean getProblemList();
    protected void displayList();
    protected void loadProblem();
    protected String formatString(String);
    protected boolean actionOK();
    protected boolean actionCancel();
    public void showMessage(String, String);
    public void valueChanged(javax.swing.event.ListSelectionEvent);
}




AIspace/graphToolKit/dialogs/EdgeDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class EdgeDialog extends BasicDialog {
    private javax.swing.JComboBox colors;
    private javax.swing.JComboBox types;
    private AIspace.graphToolKit.GraphCanvas parent;
    private AIspace.graphToolKit.elements.Node start;
    private AIspace.graphToolKit.elements.Node end;
    private javax.swing.JTextField label;
    private boolean creating;
    private AIspace.graphToolKit.elements.Edge edge;
    public void EdgeDialog(AIspace.graphToolKit.GraphCanvas);
    public void open(AIspace.graphToolKit.elements.Node, AIspace.graphToolKit.elements.Node);
    public void open(AIspace.graphToolKit.elements.Edge);
    protected boolean actionOK();
    protected boolean actionCancel();
    private void parseDialog();
}




AIspace/graphToolKit/dialogs/BasicDialog.class
package AIspace.graphToolKit.dialogs;
public abstract synchronized class BasicDialog extends javax.swing.JDialog implements java.awt.event.ActionListener {
    protected java.awt.GridBagConstraints gbc;
    protected java.awt.GridBagLayout gbl;
    private int insetSize;
    private String okString;
    private String cancelString;
    public void BasicDialog(javax.swing.JFrame, String, boolean, int);
    public void BasicDialog(javax.swing.JFrame, boolean, int);
    public void BasicDialog(javax.swing.JFrame, String, boolean);
    public void BasicDialog(javax.swing.JFrame, boolean);
    protected final void addComponent(javax.swing.JComponent, java.awt.Container, int, int, int, int, double, double);
    private void setInsetSize(int);
    protected final void packCenterOpen();
    protected final void centerWindow();
    protected final void ensureOnScreen(AIspace.graphToolKit.elements.Point);
    protected final void setOKString(String);
    protected final void setCancelString(String);
    public final java.awt.Insets getInsets();
    public void actionPerformed(java.awt.event.ActionEvent);
    protected abstract boolean actionOK();
    protected abstract boolean actionCancel();
}




AIspace/graphToolKit/dialogs/BasicFrame.class
package AIspace.graphToolKit.dialogs;
public abstract synchronized class BasicFrame extends javax.swing.JFrame implements java.awt.event.ActionListener {
    protected java.awt.GridBagConstraints gbc;
    protected java.awt.GridBagLayout gbl;
    private int insetSize;
    private String okString;
    private String cancelString;
    public void BasicFrame();
    public void BasicFrame(int);
    public void BasicFrame(String);
    public void BasicFrame(String, int);
    protected final void addComponent(javax.swing.JComponent, java.awt.Container, int, int, int, int, double, double);
    private void setInsetSize(int);
    protected final void packCenterOpen();
    protected final void centerWindow();
    protected final void ensureOnScreen(AIspace.graphToolKit.elements.Point);
    protected final void setOKString(String);
    protected final void setCancelString(String);
    public final java.awt.Insets getInsets();
    public void actionPerformed(java.awt.event.ActionEvent);
    protected abstract boolean actionOK();
    protected abstract boolean actionCancel();
}




AIspace/graphToolKit/dialogs/FontDialog.class
package AIspace.graphToolKit.dialogs;
public synchronized class FontDialog extends BasicDialog {
    private javax.swing.JTextField tf;
    private AIspace.graphToolKit.GraphCanvas canvas;
    public void FontDialog(AIspace.graphToolKit.GraphCanvas);
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/graphToolKit/elements/Node.class
package AIspace.graphToolKit.elements;
public synchronized class Node extends Entity {
    public Point pos;
    public int width;
    public int height;
    public int shape;
    protected java.util.ArrayList edgesIn;
    protected java.util.ArrayList edgesOut;
    public int index;
    protected int wPad;
    protected int hPad;
    protected int printWidth;
    protected int printHeight;
    protected boolean isHeavy;
    protected int heavyWidth;
    protected java.awt.Color internalColor;
    public void Node(AIspace.graphToolKit.Graph);
    public void Node(AIspace.graphToolKit.Graph, String, Point, java.awt.Color, int);
    public void updateSize();
    public void updateSize(int, int);
    protected int getWidth();
    protected int getHeight();
    public final Point getPos();
    public final void setPos(Point);
    public final float getXPos();
    public final float getYPos();
    public void set(String, Point, java.awt.Color, int);
    public final void setHeavy(boolean);
    public final boolean isHeavy();
    public final void setShape(int);
    public final int getShape();
    public void draw(java.awt.Graphics, boolean);
    protected void drawLabel(java.awt.Graphics);
    public void drawStructure(java.awt.Graphics, boolean);
    public void addEdgesIn(Edge);
    public void addEdgesOut(Edge);
    public void removeEdgesIn(Edge);
    public void removeEdgesOut(Edge);
    public java.util.ArrayList[] getAllEdges();
    public void setIndex(int);
    public int getIndex();
    public void setLabel(String);
    public boolean contains(Point);
    public boolean isInRect(Point, Point);
    public void translate(float, float);
    public void move(Point);
    public Point findBorder(Node);
    public boolean equals(Entity);
    public java.util.ArrayList getNeighbours();
    public boolean isConnected();
    public String toString();
    public java.awt.Color getInternalColor();
    public void setInternalColor(java.awt.Color);
}




AIspace/graphToolKit/elements/Point.class
package AIspace.graphToolKit.elements;
public synchronized class Point {
    public float x;
    public float y;
    public void Point();
    public void Point(float, float);
    public void Point(Point);
    public void translate(float, float);
    public void translate(Point);
    public void move(float, float);
    public void move(Point);
    public float leftOf(Point, Point);
    public void scale(float);
    public boolean equals(float, float);
    public boolean equals(Point);
    public String toString();
}




AIspace/graphToolKit/elements/HistogramNode.class
package AIspace.graphToolKit.elements;
public synchronized class HistogramNode extends Node {
    protected char[] data;
    protected int numdecimalplaces;
    protected boolean showHistogram;
    protected String caption;
    protected java.util.ArrayList labels;
    protected java.util.ArrayList values;
    protected int totalValue;
    protected java.awt.FontMetrics fontMetrics;
    protected java.text.DecimalFormat numFormat;
    protected int maxLabelWidth;
    protected Point nw;
    protected int lineHeight;
    protected int histogramNodeShape;
    protected final int LINE_PADDING;
    protected final int HORIZ_PAD;
    protected final int VERT_PAD;
    protected final int MAX_BAR_WIDTH;
    protected final int NUM_DASHED_LINES;
    protected final int DASH_SIZE;
    protected final int MINIMUM_LABEL_VAL_SPACE;
    public void HistogramNode(AIspace.graphToolKit.Graph);
    public void HistogramNode(AIspace.graphToolKit.Graph, String, Point, java.awt.Color, int);
    protected void construct();
    public void addHistogramLabel(String);
    public void addHistogramValue(int);
    public void clearHistogram();
    public void setHistogramCaption(String);
    public void showHistogramView(boolean);
    public void toggleHistogramView();
    public void move(Point);
    public void updateBounds();
    public void updatePosition();
    public boolean isHistogramViewOn();
    protected void resetMaxLabelWidth();
    public void draw(java.awt.Graphics, boolean);
    private void drawNode(java.awt.Graphics, boolean);
    private void drawHistogramNode(java.awt.Graphics);
    protected void drawRows(java.awt.Graphics);
    protected void drawDashedLines(java.awt.Graphics, int, int, int, int);
    public boolean contains(Point);
    private void drawCaption(java.awt.Graphics);
    private void drawOutline(java.awt.Graphics);
    public void setHistogramNodeShape(int);
}




AIspace/graphToolKit/elements/Edge.class
package AIspace.graphToolKit.elements;
public synchronized class Edge extends Entity {
    public Node start;
    public Node end;
    protected float length;
    public int edgeType;
    protected Point[] b;
    protected Point[] p;
    public EdgeLabel eLabel;
    public void Edge(AIspace.graphToolKit.Graph);
    public void Edge(AIspace.graphToolKit.Graph, String, Node, Node, java.awt.Color, int);
    public void Edge(AIspace.graphToolKit.Graph, Node, Node);
    public void setLabel(String);
    public void set(String, Node, Node, java.awt.Color, int);
    public void draw(java.awt.Graphics, boolean);
    public void drawPrint(java.awt.Graphics, boolean);
    public void drawStructure(java.awt.Graphics, boolean);
    protected void drawArrowStructure(java.awt.Graphics, Point, Point);
    protected void drawLine(java.awt.Graphics);
    protected void drawLine2(java.awt.Graphics);
    protected void drawArrow(java.awt.Graphics, boolean, Point, Point);
    public void arrow(java.awt.Graphics, Point, Point);
    protected void drawArrow2(java.awt.Graphics);
    public void drawHandle(java.awt.Graphics);
    public void drawHandle2(java.awt.Graphics);
    public float distance(Point, Point);
    public void updateLength();
    public void updateLengthStructure();
    public boolean contains(Point);
    protected boolean contains1(Point, boolean, Point, Point);
    protected boolean contains2(Point);
    public boolean isInRect(Point, Point);
    public void translate(float, float);
    public void move(Point);
    public void removeFromNodes();
    public boolean equals(Entity);
    public Point middle();
    public float getDx();
    public float getDy();
    public float getPx();
    public float getPy();
    public Point[] getB();
    public Point[] getP();
    public float getLength();
    public Node otherNode(Node);
    public Node getStartNode();
    public Node getEndNode();
    public int getEdgeType();
    public String getDescription();
    public String toString();
}




AIspace/graphToolKit/elements/EdgeLabel.class
package AIspace.graphToolKit.elements;
public synchronized class EdgeLabel extends Entity {
    public Point offsetPoint;
    public Edge parent;
    private java.awt.FontMetrics fm;
    public void EdgeLabel(AIspace.graphToolKit.Graph, Edge);
    public void reset();
    public void draw(java.awt.Graphics, boolean);
    public void drawForPrinting(java.awt.Graphics, boolean);
    public void drawStructure(java.awt.Graphics, boolean);
    public void drawLabel(java.awt.Graphics, boolean, Point, boolean);
    private void drawLabel2(java.awt.Graphics, boolean);
    public Point changeVecBasis();
    public Point changeVecBasisForPrinting();
    public Point[] getBounds();
    public boolean contains(Point);
    public boolean contains1(Point, Point, boolean);
    public boolean contains2(Point);
    public boolean isInRect(Point, Point);
    public void translate(float, float);
    public void move(Point);
    public boolean equals(Entity);
    public String toString();
}




AIspace/graphToolKit/elements/Entity.class
package AIspace.graphToolKit.elements;
public abstract synchronized class Entity {
    public String[] label;
    public boolean isSelected;
    public boolean isBold;
    public boolean isHighlighted;
    public java.awt.Color color;
    public java.awt.Color bkColor;
    public int type;
    public int xw;
    protected AIspace.graphToolKit.Graph graph;
    public void Entity(AIspace.graphToolKit.Graph);
    public String getLabel();
    public void setLabel(String);
    public final java.awt.Color getColor();
    public final void setColor(java.awt.Color);
    public abstract void draw(java.awt.Graphics, boolean);
    public abstract void drawStructure(java.awt.Graphics, boolean);
    public abstract boolean contains(Point);
    public abstract boolean isInRect(Point, Point);
    public abstract void translate(float, float);
    public abstract void move(Point);
    public abstract boolean equals(Entity);
    public abstract String toString();
}




AIspace/graphToolKit/help/HelpMenu.class
package AIspace.graphToolKit.help;
public synchronized class HelpMenu extends javax.swing.JMenu implements java.awt.event.ActionListener {
    private static final long serialVersionUID = 1;
    private static final String aboutAIspaceURL = http://www.aispace.org/;
    private String appletName;
    private javax.swing.JFrame parent;
    protected javax.swing.JEditorPane htmlPane;
    public void HelpMenu(String, javax.swing.JFrame);
    public void openBrowserHelp(String);
    public void actionPerformed(java.awt.event.ActionEvent);
}




AIspace/graphToolKit/help/HelpCanvas.class
package AIspace.graphToolKit.help;
public abstract synchronized class HelpCanvas extends javax.swing.JPanel {
    protected final int LINE_SEPARATION;
    protected final int GROUP_SEPARATION;
    protected final int SUBGROUP_SEPARATION;
    private int lineWidth;
    private boolean isAntiAliasingEnabled;
    private float[] dashedPattern;
    public void HelpCanvas(boolean);
    public void paint(java.awt.Graphics);
    public void drawEdge(java.awt.Graphics, int, int, int, java.awt.Color, boolean, boolean, boolean);
    public void drawEdge(java.awt.Graphics, int, int, int, java.awt.Color, boolean, boolean);
    public void drawRectangleNode(java.awt.Graphics, int, int, int, int, java.awt.Color, boolean, boolean);
    public void drawOvalNode(java.awt.Graphics, int, int, int, int, java.awt.Color, boolean, boolean);
    public void drawDiamondNode(java.awt.Graphics, int, int, int, int, java.awt.Color, boolean, boolean);
}




AIspace/graphToolKit/help/HelpFrame.class
package AIspace.graphToolKit.help;
public synchronized class HelpFrame extends AIspace.graphToolKit.dialogs.BasicFrame {
    public void HelpFrame(String, HelpCanvas, int, int);
    protected boolean actionOK();
    protected boolean actionCancel();
}




AIspace/graphToolKit/images/bayes/Zoom24.gif


AIspace/graphToolKit/images/bayes/modifyProbTable.png


AIspace/graphToolKit/images/bayes/noforgettingarcs.png


AIspace/graphToolKit/images/bayes/optimizeDecision.png


AIspace/graphToolKit/images/bayes/queryNetwork.png


AIspace/graphToolKit/images/bayes/queryNode.png


AIspace/graphToolKit/images/bayes/quiz.gif


AIspace/graphToolKit/images/bayes/select.png


AIspace/graphToolKit/images/bayes/toggleMonitoring.png


AIspace/graphToolKit/images/bayes/viewDecision.png


AIspace/graphToolKit/images/bayes/viewProbTable.png


AIspace/graphToolKit/images/common/delete.png


AIspace/graphToolKit/images/common/finestep.png


AIspace/graphToolKit/images/common/newEdge2.png


AIspace/graphToolKit/images/common/newNode.png


AIspace/graphToolKit/images/common/select.png


AIspace/graphToolKit/images/common/setProp.png


AIspace/graphToolKit/images/constraint/Reset.gif


AIspace/graphToolKit/images/constraint/StepBack24.gif


AIspace/graphToolKit/images/constraint/autoarc.png


AIspace/graphToolKit/images/constraint/close.gif


AIspace/graphToolKit/images/constraint/cross.PNG


AIspace/graphToolKit/images/constraint/gear.png


AIspace/graphToolKit/images/constraint/hide.png


AIspace/graphToolKit/images/constraint/step.png


AIspace/graphToolKit/images/constraint/stepback.png


AIspace/graphToolKit/images/constraint/stop.gif


AIspace/graphToolKit/images/cspTools/addvar.png


AIspace/graphToolKit/images/cspTools/createconstraint.png


AIspace/graphToolKit/images/cspTools/gear.png


AIspace/graphToolKit/images/dTree/Edit24.gif


AIspace/graphToolKit/images/dTree/Reset.gif


AIspace/graphToolKit/images/dTree/arrowLeft.png


AIspace/graphToolKit/images/dTree/arrowRight.png


AIspace/graphToolKit/images/dTree/gear.png


AIspace/graphToolKit/images/dTree/movesubtree.png


AIspace/graphToolKit/images/dTree/quiz.gif


AIspace/graphToolKit/images/dTree/showPlot.png


AIspace/graphToolKit/images/dTree/splitNode.png


AIspace/graphToolKit/images/dTree/step.png


AIspace/graphToolKit/images/dTree/stop.gif


AIspace/graphToolKit/images/dTree/testNew.png


AIspace/graphToolKit/images/dTree/toggleMonitoring.png


AIspace/graphToolKit/images/dTree/viewKBCheckBox.png


AIspace/graphToolKit/images/dTree/viewNodeInfo.png


AIspace/graphToolKit/images/deduction/Reset.gif


AIspace/graphToolKit/images/deduction/createNewQuery.png


AIspace/graphToolKit/images/deduction/gear.png


AIspace/graphToolKit/images/deduction/inspectNode.png


AIspace/graphToolKit/images/deduction/inspectSubtree.png


AIspace/graphToolKit/images/deduction/movesubtree.png


AIspace/graphToolKit/images/deduction/select.png


AIspace/graphToolKit/images/deduction/step.png


AIspace/graphToolKit/images/deduction/stop.gif


AIspace/graphToolKit/images/hill/batchrunner.png


AIspace/graphToolKit/images/hill/gear.png


AIspace/graphToolKit/images/hill/initialize.png


AIspace/graphToolKit/images/hill/showPlot.png


AIspace/graphToolKit/images/hill/step.png


AIspace/graphToolKit/images/hill/stop.gif


AIspace/graphToolKit/images/hill/viewCurrentPlan.png


AIspace/graphToolKit/images/neural/Edit24.gif


AIspace/graphToolKit/images/neural/History24.gif


AIspace/graphToolKit/images/neural/arrowLeft.png


AIspace/graphToolKit/images/neural/arrowRight.png


AIspace/graphToolKit/images/neural/quiz.gif


AIspace/graphToolKit/images/neural/randomPara.png


AIspace/graphToolKit/images/neural/showPlot.png


AIspace/graphToolKit/images/neural/step.png


AIspace/graphToolKit/images/neural/stepTarget.png


AIspace/graphToolKit/images/neural/stop.gif


AIspace/graphToolKit/images/search/Reset.gif


AIspace/graphToolKit/images/search/gear.png


AIspace/graphToolKit/images/search/invertgraph.gif


AIspace/graphToolKit/images/search/quiz.gif


AIspace/graphToolKit/images/search/select.png


AIspace/graphToolKit/images/search/step.png


AIspace/graphToolKit/images/search/stop.gif


AIspace/graphToolKit/images/search/viewNodeInfo.png


AIspace/graphToolKit/images/stripsToCSP/Reset.gif


AIspace/graphToolKit/images/stripsToCSP/gear.png


AIspace/graphToolKit/images/stripsToCSP/invertgraph.gif


AIspace/graphToolKit/images/stripsToCSP/quiz.gif


AIspace/graphToolKit/images/stripsToCSP/select.png


AIspace/graphToolKit/images/stripsToCSP/step.png


AIspace/graphToolKit/images/stripsToCSP/stop.gif


AIspace/graphToolKit/images/stripsToCSP/viewNodeInfo.png


AIspace/XMLReader/Pair.class
package AIspace.XMLReader;
public synchronized class Pair {
    public String name;
    public String value;
    public void Pair();
}




AIspace/XMLReader/XMLTree.class
package AIspace.XMLReader;
public synchronized class XMLTree {
    protected XMLBlock headNode;
    public void XMLTree();
    public void readString(String) throws XMLParseException;
    public XMLBlock findNetworkTree(String);
    private XMLBlock findNetworkTree(java.util.ArrayList, String);
    private String stripComments(String);
    private void readString(String, XMLBlock) throws XMLParseException;
    public void print();
    private void printAll(XMLBlock, int);
    public XMLBlock getHead();
}




AIspace/XMLReader/XMLParseException.class
package AIspace.XMLReader;
public synchronized class XMLParseException extends Exception {
    public void XMLParseException(String);
}




AIspace/XMLReader/XMLReader.class
package AIspace.XMLReader;
public synchronized class XMLReader {
    private XMLTree currTree;
    void XMLReader();
    public void readFile(String) throws XMLParseException;
    public void printTree();
    public static void main(String[]);
}




AIspace/XMLReader/XMLBlock.class
package AIspace.XMLReader;
public synchronized class XMLBlock {
    private String text;
    private String tagName;
    private java.util.ArrayList properties;
    public java.util.ArrayList childBlocks;
    public void XMLBlock();
    public void XMLBlock(String, String, java.util.ArrayList, java.util.ArrayList);
    public void XMLBlock(XMLBlock);
    public String getText();
    public String getTag();
    public java.util.ArrayList getProperties();
    public void setText(String);
    public void setTag(String);
    public void addProperty(String, String);
    public void addChild(XMLBlock);
    public boolean removeChild(String);
    public java.util.ArrayList searchChildTag(String);
}




org/eclipse/jdt/internal/jarinjarloader/JIJConstants.class
package org.eclipse.jdt.internal.jarinjarloader;
final synchronized class JIJConstants {
    static final String REDIRECTED_CLASS_PATH_MANIFEST_NAME = Rsrc-Class-Path;
    static final String REDIRECTED_MAIN_CLASS_MANIFEST_NAME = Rsrc-Main-Class;
    static final String DEFAULT_REDIRECTED_CLASSPATH = ;
    static final String MAIN_METHOD_NAME = main;
    static final String JAR_INTERNAL_URL_PROTOCOL_WITH_COLON = jar:rsrc:;
    static final String JAR_INTERNAL_SEPARATOR = !/;
    static final String INTERNAL_URL_PROTOCOL_WITH_COLON = rsrc:;
    static final String INTERNAL_URL_PROTOCOL = rsrc;
    static final String PATH_SEPARATOR = /;
    static final String CURRENT_DIR = ./;
    static final String UTF8_ENCODING = UTF-8;
    void JIJConstants();
}




org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader$ManifestInfo.class
package org.eclipse.jdt.internal.jarinjarloader;
synchronized class JarRsrcLoader$ManifestInfo {
    String rsrcMainClass;
    String[] rsrcClassPath;
    private void JarRsrcLoader$ManifestInfo();
}




org/eclipse/jdt/internal/jarinjarloader/JarRsrcLoader.class
package org.eclipse.jdt.internal.jarinjarloader;
public synchronized class JarRsrcLoader {
    public void JarRsrcLoader();
    public static void main(String[]) throws ClassNotFoundException, IllegalArgumentException, IllegalAccessException, reflect.InvocationTargetException, SecurityException, NoSuchMethodException, java.io.IOException;
    private static JarRsrcLoader$ManifestInfo getManifestInfo() throws java.io.IOException;
    private static String[] splitSpaces(String);
}




org/eclipse/jdt/internal/jarinjarloader/RsrcURLConnection.class
package org.eclipse.jdt.internal.jarinjarloader;
public synchronized class RsrcURLConnection extends java.net.URLConnection {
    private ClassLoader classLoader;
    public void RsrcURLConnection(java.net.URL, ClassLoader);
    public void connect() throws java.io.IOException;
    public java.io.InputStream getInputStream() throws java.io.IOException;
}




org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandler.class
package org.eclipse.jdt.internal.jarinjarloader;
public synchronized class RsrcURLStreamHandler extends java.net.URLStreamHandler {
    private ClassLoader classLoader;
    public void RsrcURLStreamHandler(ClassLoader);
    protected java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException;
    protected void parseURL(java.net.URL, String, int, int);
}




org/eclipse/jdt/internal/jarinjarloader/RsrcURLStreamHandlerFactory.class
package org.eclipse.jdt.internal.jarinjarloader;
public synchronized class RsrcURLStreamHandlerFactory implements java.net.URLStreamHandlerFactory {
    private ClassLoader classLoader;
    private java.net.URLStreamHandlerFactory chainFac;
    public void RsrcURLStreamHandlerFactory(ClassLoader);
    public java.net.URLStreamHandler createURLStreamHandler(String);
    public void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory);
}




saves/acyclicbicycle.xml
 
 

 
	 This graph is meant to represent bike trails and the aim is to find a path from mo to nyse without any cycles.
	 


    
     
         al
         0
         -171.54721
         -105.515366
         REGULAR
         0.0
    
     
         mo
         1
         -97.88554
         -105.515366
         START
         0.0
    
     
         ch
         2
         -16.260448
         -105.515366
         REGULAR
         0.0
    
     
         trp
         3
         76.64616
         -105.515366
         REGULAR
         0.0
    
     
         bb
         4
         159.59848
         -105.515366
         REGULAR
         0.0
    
     
         wtc
         5
         -171.54721
         -35.835403
         REGULAR
         0.0
    
     
         ls
         6
         -97.88554
         -35.835403
         REGULAR
         0.0
    
     
         fs
         7
         -16.260448
         -49.107777
         REGULAR
         0.0
    
     
         ws
         8
         -16.260448
         3.318093
         REGULAR
         0.0
    
     
         ac
         9
         76.64616
         -31.190073
         REGULAR
         0.0
    
     
         p27
         10
         169.55276
         5.308949
         REGULAR
         0.0
    
     
         slb
         11
         -125.757515
         14.599609
         REGULAR
         0.0
    
     
         ase
         12
         -125.757515
         81.62509
         REGULAR
         0.0
    
     
         rp
         13
         -170.21997
         81.62509
         REGULAR
         0.0
    
     
         sec
         14
         -64.704605
         57.734818
         REGULAR
         0.0
    
     
         bp
         15
         -14.933212
         105.515366
         REGULAR
         0.0
    
     
         nyse
         16
         36.16542
         57.734818
         GOAL
         0.0
    
    
     
         0
         5
         1.0
    
     
         1
         0
         2.0
    
     
         1
         6
         5.0
    
     
         1
         8
         2.0
    
     
         1
         2
         1.0
    
     
         2
         7
         2.0
    
     
         2
         9
         4.0
    
     
         2
         3
         3.0
    
     
         3
         4
         5.0
    
     
         5
         6
         1.0
    
     
         6
         14
         2.0
    
     
         8
         7
         2.0
    
     
         8
         14
         7.0
    
     
         8
         16
         2.0
    
     
         8
         9
         4.0
    
     
         9
         3
         3.0
    
     
         9
         16
         1.0
    
     
         9
         10
         9.0
    
     
         12
         11
         1.0
    
     
         12
         13
         1.0
    
     
         14
         12
         1.0
    
     
         14
         15
         3.0
    
     
         14
         16
         1.0
    
     
         16
         15
         5.0
    





saves/acyclicdelivery.xml
 
	 
	
	 
		 This example models a delivery robot trying to deliver something to its goal location without any cycles.
		 
	
	
		

		 
			 mail
			 0
			 7640.6313
			 5796.6533
			 REGULAR
			 26.0
		
		 
			 ts
			 1
			 7766.8047
			 5796.6533
			 REGULAR
			 23.0
		
		 
			 o103
			 2
			 7929.2725
			 5796.6533
			 START
			 21.0
		
		 
			 o111
			 3
			 8433.958
			 5796.6533
			 REGULAR
			 27.0
		
		 
			 c1
			 4
			 7929.2725
			 5335.1733
			 REGULAR
			 6.0
		
		 
			 b4
			 5
			 8126.308
			 5648.011
			 REGULAR
			 18.0
		
		 
			 b3
			 6
			 7931.2725
			 5659.011
			 REGULAR
			 17.0
		
		 
			 b1
			 7
			 7931.2725
			 5539.0337
			 REGULAR
			 13.0
		
		 
			 c2
			 8
			 7928.2725
			 5447.061
			 REGULAR
			 10.0
		
		 
			 c3
			 9
			 8123.5767
			 5450.061
			 REGULAR
			 12.0
		
		 
			 b2
			 10
			 8127.308
			 5549.0337
			 REGULAR
			 15.0
		
		 
			 o123
			 11
			 7934.667
			 5249.3486
			 REGULAR
			 4.0
		
		 
			 r123
			 12
			 7937.667
			 5118.347
			 GOAL
			 0.0
		
		 
			 o125
			 13
			 7797.6313
			 5241.3486
			 REGULAR
			 6.0
		
		 
			 o119
			 14
			 8251.565
			 5248.3486
			 REGULAR
			 11.0
		
		 
			 o109
			 15
			 8290.565
			 5794.6533
			 REGULAR
			 24.0
		
		 
			 storage
			 16
			 8412.368
			 5082.3975
			 REGULAR
			 12.0
		

		

		 
			 1
			 0
			 6.0
		
		 
			 2
			 1
			 8.0
		
		 
			 2
			 6
			 4.0
		
		 
			 6
			 5
			 7.0
		
		 
			 6
			 7
			 4.0
		
		 
			 7
			 8
			 3.0
		
		 
			 8
			 4
			 4.0
		
		 
			 8
			 9
			 6.0
		
		 
			 4
			 9
			 8.0
		
		 
			 7
			 10
			 6.0
		
		 
			 10
			 5
			 3.0
		
		 
			 11
			 12
			 4.0
		
		 
			 11
			 13
			 4.0
		
		 
			 14
			 11
			 9.0
		
		 
			 2
			 15
			 12.0
		
		 
			 5
			 15
			 7.0
		
		 
			 15
			 3
			 4.0
		
		 
			 15
			 14
			 16.0
		
		 
			 14
			 16
			 7.0
		

		

		 
		 

	




saves/cycliccourier.xml
 
 

 
	 This graph is meant to represent bike trails and the aim is to find a path from mo to nyse with cycles.
	 




 
    al
    0
    -171.5472
    -104.1881
    REGULAR
    0.0


 
    mo
    1
    -92.57659
    -106.8426
    START
    0.0


 
    ch
    2
    -16.260448
    -93.57022
    REGULAR
    0.0


 
    trp
    3
    77.30978
    -106.8426
    REGULAR
    0.0


 
    bb
    4
    159.59848
    -104.18812
    REGULAR
    0.0


 
    wtc
    5
    -171.54721
    -34.508167
    REGULAR
    0.0


 
    ls
    6
    -97.88554
    -34.508167
    REGULAR
    0.0


 
    fs
    7
    -16.260448
    -47.78054
    REGULAR
    0.0


 
    ws
    8
    -16.260448
    4.6453304
    REGULAR
    0.0


 
    ac
    9
    76.64616
    -29.862837
    REGULAR
    0.0


 
    p27
    10
    169.55276
    6.636186
    GOAL
    0.0


 
    slb
    11
    -125.757515
    15.9268465
    REGULAR
    0.0


 
    ase
    12
    -125.757515
    82.952324
    REGULAR
    0.0


 
    rp
    13
    -170.21997
    82.952324
    REGULAR
    0.0


 
    sec
    14
    -64.704605
    59.062057
    REGULAR
    0.0


 
    bp
    15
    -14.933212
    106.8426
    REGULAR
    0.0


 
    nyse
    16
    36.16542
    59.062057
    REGULAR
    0.0




 
    0
    5
    1.0


 
    1
    0
    2.0


 
    1
    6
    5.0


 
    1
    8
    2.0


 
    1
    2
    1.0


 
    2
    7
    2.0


 
    2
    9
    4.0


 
    2
    3
    3.0


 
    3
    4
    5.0


 
    3
    1
    1.0


 
    4
    4
    2.0


 
    5
    6
    1.0


 
    6
    14
    2.0


 
    8
    7
    2.0


 
    8
    14
    7.0


 
    8
    16
    2.0


 
    8
    9
    4.0


 
    9
    3
    3.0


 
    9
    16
    3.0


 
    9
    10
    9.0


 
    11
    14
    6.0


 
    11
    11
    1.0


 
    12
    11
    1.0


 
    12
    13
    1.0


 
    14
    12
    1.0


 
    14
    15
    3.0


 
    14
    16
    1.0


 
    16
    15
    5.0


 
    16
    9
    1.0










saves/cyclicdelivery.xml
 
	 
	
	 
		 This example models a delivery robot trying to deliver something to its goal location with cycles.
		 
	
	
		

		 
			 mail
			 0
			 7625.9526
			 5787.9785
			 REGULAR
			 26.0
		
		 
			 ts
			 1
			 7757.019
			 5787.9785
			 REGULAR
			 23.0
		
		 
			 o103
			 2
			 7925.7876
			 5787.9785
			 START
			 21.0
		
		 
			 o111
			 3
			 8450.047
			 5787.9785
			 REGULAR
			 27.0
		
		 
			 c1
			 4
			 7925.7876
			 5308.601
			 REGULAR
			 6.0
		
		 
			 b4
			 5
			 8130.465
			 5633.5713
			 REGULAR
			 18.0
		
		 
			 b3
			 6
			 7927.865
			 5644.9985
			 REGULAR
			 17.0
		
		 
			 b1
			 7
			 7927.865
			 5520.3677
			 REGULAR
			 13.0
		
		 
			 c2
			 8
			 7924.749
			 5424.8276
			 REGULAR
			 10.0
		
		 
			 c3
			 9
			 8127.6274
			 5427.9443
			 REGULAR
			 12.0
		
		 
			 b2
			 10
			 8131.5034
			 5530.7554
			 REGULAR
			 15.0
		
		 
			 o123
			 11
			 7931.391
			 5219.4478
			 REGULAR
			 4.0
		
		 
			 r123
			 12
			 7934.5073
			 5083.3657
			 GOAL
			 0.0
		
		 
			 o125
			 13
			 7789.0415
			 5211.1377
			 REGULAR
			 6.0
		
		 
			 o119
			 14
			 8260.58
			 5218.409
			 REGULAR
			 11.0
		
		 
			 o109
			 15
			 8301.092
			 5785.9014
			 REGULAR
			 24.0
		
		 
			 storage
			 16
			 8427.619
			 5046.022
			 REGULAR
			 12.0
		

		

		 
			 1
			 0
			 6.0
		
		 
			 2
			 1
			 8.0
		
		 
			 2
			 6
			 4.0
		
		 
			 6
			 5
			 7.0
		
		 
			 6
			 7
			 4.0
		
		 
			 7
			 8
			 3.0
		
		 
			 8
			 4
			 4.0
		
		 
			 8
			 9
			 6.0
		
		 
			 4
			 9
			 8.0
		
		 
			 7
			 10
			 6.0
		
		 
			 10
			 5
			 3.0
		
		 
			 11
			 12
			 4.0
		
		 
			 11
			 13
			 4.0
		
		 
			 14
			 11
			 9.0
		
		 
			 2
			 15
			 12.0
		
		 
			 5
			 15
			 7.0
		
		 
			 15
			 3
			 4.0
		
		 
			 15
			 14
			 16.0
		
		 
			 14
			 16
			 7.0
		
		 
			 13
			 11
			 4.0
		
		 
			 12
			 11
			 4.0
		
		 
			 11
			 14
			 9.0
		
		 
			 16
			 14
			 7.0
		
		 
			 14
			 15
			 16.0
		
		 
			 3
			 15
			 4.0
		
		 
			 15
			 2
			 12.0
		
		 
			 1
			 2
			 8.0
		
		 
			 0
			 1
			 6.0
		
		 
			 5
			 6
			 7.0
		
		 
			 5
			 10
			 3.0
		
		 
			 10
			 7
			 6.0
		
		 
			 7
			 6
			 4.0
		
		 
			 9
			 8
			 6.0
		
		 
			 4
			 8
			 4.0
		
		 
			 9
			 4
			 8.0
		

		

		 
		 

	




saves/cyclicgraph.xml
 
 

 
	 This is a graph example with a cycle.
	 




 
    Node 0
    0
    -81.33483
    -146.61673
    START
    28.4


 
    Node 1
    1
    75.98385
    -145.54655
    START
    28.3


 
    Node 2
    2
    -159.45908
    -47.08859
    REGULAR
    23.3


 
    Node 3
    3
    -5.3509755
    -47.08859
    REGULAR
    18.1


 
    Node 4
    4
    159.45908
    -47.08859
    REGULAR
    23.6


 
    Node 5
    5
    -82.40502
    48.158783
    REGULAR
    11.9


 
    Node 6
    6
    80.26464
    44.9482
    REGULAR
    12.2


 
    Node 7
    7
    -2.1403904
    146.61673
    GOAL
    0.0




 
    0
    2
    11.8


 
    0
    3
    11.7


 
    1
    3
    11.9


 
    1
    4
    12.1


 
    2
    5
    11.4


 
    3
    2
    14.4


 
    3
    4
    15.4


 
    4
    6
    11.3


 
    5
    3
    11.4


 
    5
    7
    11.9


 
    6
    3
    11.7


 
    6
    7
    12.2









saves/extendedtree.xml
 
	 
		 
			 This is a basic graph example with no cycles.
			 
		

		

		 
			 N1
			 0
			 7974.4414
			 5176.361
			 REGULAR
			 27.1
		

		

		 
			 N2
			 1
			 8101.6235
			 5159.3115
			 REGULAR
			 18.4
		

		

		 
			 N3
			 2
			 7852.347
			 5267.2817
			 REGULAR
			 30.2
		

		

		 
			 N4
			 3
			 7995.8657
			 5275.449
			 REGULAR
			 28.9
		

		

		 
			 N6
			 4
			 8283.751
			 5249.913
			 REGULAR
			 10.5
		

		

		 
			 N5
			 5
			 8125.9775
			 5258.8813
			 REGULAR
			 14.8
		

		

		 
			 N18
			 6
			 8134.92
			 5534.1196
			 REGULAR
			 0.0
		

		

		 
			 S
			 7
			 8039.721
			 5085.8667
			 START
			 30.0
		

		

		 
			 N9
			 8
			 8093.5728
			 5356.954
			 REGULAR
			 8.0
		

		

		 
			 N10
			 9
			 8202.746
			 5351.4453
			 REGULAR
			 14.5
		

		

		 
			 N8
			 10
			 7976.089
			 5356.2285
			 REGULAR
			 30.0
		

		

		 
			 N7
			 11
			 7819.548
			 5348.8174
			 REGULAR
			 32.0
		

		

		 
			 N13
			 12
			 8039.3037
			 5447.936
			 REGULAR
			 15.0
		

		

		 
			 N14
			 13
			 8177.5225
			 5436.93
			 REGULAR
			 0.0
		

		

		 
			 G
			 14
			 8230.057
			 5530.0
			 GOAL
			 0.0
		

		

		 
			 N15
			 15
			 8325.56
			 5433.709
			 REGULAR
			 14.0
		

		

		 
			 N16
			 16
			 8453.479
			 5431.8135
			 REGULAR
			 13.0
		

		

		 
			 N12
			 17
			 8440.887
			 5325.451
			 REGULAR
			 14.9
		

		

		 
			 N11
			 18
			 8311.375
			 5337.4033
			 REGULAR
			 14.0
		

		

		 
			 N19
			 19
			 8330.473
			 5530.465
			 REGULAR
			 17.0
		

		

		 
			 N20
			 20
			 7818.521
			 5435.988
			 REGULAR
			 33.0
		

		

		 
			 N17
			 21
			 8042.718
			 5534.1333
			 REGULAR
			 10.0
		

		

		 
			 0
			 2
			 11.9
		
		 
			 0
			 3
			 9.1
		
		 
			 1
			 4
			 12.8
		
		 
			 1
			 5
			 9.1
		
		 
			 7
			 0
			 9.9
		
		 
			 7
			 1
			 10.6
		
		 
			 5
			 8
			 8.6
		
		 
			 5
			 9
			 2.0
		
		 
			 3
			 10
			 8.7
		
		 
			 2
			 11
			 16.6
		
		 
			 8
			 12
			 4.0
		
		 
			 8
			 13
			 5.0
		
		 
			 13
			 6
			 3.0
		
		 
			 13
			 14
			 4.0
		
		 
			 4
			 17
			 2.0
		
		 
			 17
			 16
			 6.0
		
		 
			 4
			 18
			 8.0
		
		 
			 18
			 15
			 8.0
		
		 
			 15
			 19
			 10.0
		
		 
			 11
			 20
			 2.0
		
		 
			 12
			 21
			 6.0
		

		

		 
		 

	




saves/misleadingheuristic.xml
 
 

 
	 This graph is an example which can demonstrate that some search strategies can be mislead by heuristic information.
	 




 
    Node 0
    0
    -45.943882
    -106.65171
    START
    28.9


 
    Node 1
    1
    -72.60681
    -41.475666
    REGULAR
    23.7


 
    Node 2
    2
    -53.844006
    23.70038
    REGULAR
    17.0


 
    Node 3
    3
    27.132292
    68.138596
    REGULAR
    10.0


 
    Node 4
    4
    96.2584
    32.58802
    REGULAR
    15.0


 
    Node 5
    5
    43.92006
    -41.475666
    REGULAR
    21.1


 
    Node 6
    6
    -159.50821
    -109.61426
    REGULAR
    34.2


 
    Node 7
    7
    -145.68297
    142.20229
    REGULAR
    18.4


 
    Node 8
    8
    34.044903
    166.89018
    GOAL
    0.0


 
    Node 9
    9
    -99.26973
    -166.89018
    REGULAR
    36.4


 
    Node 10
    10
    71.57051
    -117.51438
    REGULAR
    29.0


 
    Node 11
    11
    155.50935
    -150.1024
    REGULAR
    34.4




 
    0
    1
    7.1


 
    0
    6
    11.5


 
    0
    10
    12.0


 
    1
    2
    6.9


 
    2
    3
    9.4


 
    3
    4
    7.9


 
    4
    5
    9.2


 
    5
    2
    11.9


 
    6
    7
    25.5


 
    6
    9
    8.4


 
    7
    8
    18.4


 
    10
    11
    9.1









saves/mod4gr1999.xml
 
 

 
	 This graph is a simple graph with cycles and is a good example to learn about the basic search procedures.
	 




 
    s
    0
    11.145003
    -126.47157
    START
    4.0


 
    a
    1
    16.95979
    -10.175874
    REGULAR
    2.0


 
    g
    2
    6.2993503
    114.841995
    GOAL
    0.0


 
    c
    3
    85.768074
    -89.64459
    REGULAR
    4.0


 
    d
    4
    99.33591
    -30.52762
    REGULAR
    3.0


 
    e
    5
    105.15069
    27.620228
    REGULAR
    2.0


 
    f
    6
    77.0459
    80.92242
    REGULAR
    1.0


 
    b
    7
    -83.82981
    22.774572
    REGULAR
    3.0


 
    h
    8
    -143.91592
    83.82981
    REGULAR
    4.0


 
    i
    9
    -162.3294
    142.9468
    REGULAR
    5.0


 
    j
    10
    -173.95897
    204.00203
    REGULAR
    6.0


 
    k
    11
    128.40982
    -157.48375
    REGULAR
    5.0


 
    l
    12
    173.95897
    -204.00203
    REGULAR
    6.0




 
    0
    1
    2.0


 
    0
    3
    1.0


 
    0
    11
    2.0


 
    1
    7
    2.0


 
    3
    4
    1.0


 
    4
    5
    1.0


 
    5
    6
    1.0


 
    6
    2
    1.0


 
    7
    8
    2.0


 
    7
    2
    3.0


 
    8
    9
    2.0


 
    9
    10
    1.0


 
    9
    2
    5.0


 
    11
    12
    1.0










saves/mod5gr1999.xml
 
 

 
	 This graph is meant to be part of the road network for a city. For this graph, the aim is find a path from node mi to the location cp that can only be reached by round-about methods.
	 




 
    mi
    0
    -49.738857
    -111.54662
    START
    6.2


 
    fg
    1
    -157.2658
    -113.55647
    REGULAR
    15.5


 
    hi
    2
    -72.85213
    -203.99968
    REGULAR
    15.4


 
    mv
    3
    134.16234
    -117.57617
    REGULAR
    15.3


 
    tw
    4
    133.15741
    14.068943
    REGULAR
    16.2


 
    fv
    5
    0.5073695
    21.103416
    REGULAR
    8.5


 
    cp
    6
    -9.541876
    -63.310246
    GOAL
    0.0


 
    gb
    7
    63.817616
    -53.260998
    REGULAR
    7.4


 
    uv
    8
    -72.85213
    71.34965
    REGULAR
    14.8


 
    rs
    9
    141.19681
    70.34472
    REGULAR
    20.0


 
    ab
    10
    155.26576
    157.77315
    REGULAR
    27.4


 
    re
    11
    42.7142
    203.99968
    REGULAR
    27.1


 
    bg
    12
    45.728977
    -96.472755
    REGULAR
    6.4




 
    0
    8
    18.3


 
    0
    1
    10.7


 
    0
    2
    9.5


 
    0
    3
    18.3


 
    1
    2
    12.3


 
    1
    0
    10.7


 
    2
    1
    12.3


 
    2
    0
    9.5


 
    3
    0
    18.3


 
    3
    4
    13.1


 
    3
    7
    9.5


 
    4
    5
    13.2


 
    4
    3
    13.1


 
    4
    7
    9.6


 
    5
    6
    8.5


 
    5
    4
    13.2


 
    6
    5
    8.5


 
    7
    3
    9.5


 
    7
    4
    9.6


 
    7
    12
    4.7


 
    8
    0
    18.3


 
    8
    9
    21.3


 
    9
    10
    8.8


 
    9
    8
    21.3


 
    10
    11
    12.1


 
    10
    9
    8.8


 
    11
    10
    12.1


 
    12
    7
    4.7










saves/multiplepathpruning.xml
 
 

 
	 This graph is an example which can demonstrate multiple path pruning.
	 




 
    Node 0
    0
    -157.64835
    -139.19196
    START
    0.0


 
    Node 1
    1
    -159.18637
    -3.8450818
    REGULAR
    0.0


 
    Node 2
    2
    -157.64835
    139.19196
    REGULAR
    0.0


 
    Node 3
    3
    -0.7690163
    -139.19196
    REGULAR
    0.0


 
    Node 4
    4
    0.7690163
    -3.8450818
    REGULAR
    0.0


 
    Node 5
    5
    2.3070488
    139.19196
    REGULAR
    0.0


 
    Node 6
    6
    156.11032
    -139.19196
    REGULAR
    0.0


 
    Node 7
    7
    157.64835
    -2.3070488
    REGULAR
    0.0


 
    Node 8
    8
    159.18637
    139.19196
    GOAL
    0.0




 
    0
    1
    1.0


 
    0
    3
    1.0


 
    0
    4
    1.0


 
    1
    2
    1.0


 
    1
    4
    1.0


 
    2
    5
    1.0


 
    2
    4
    1.0


 
    3
    6
    1.0


 
    3
    4
    1.0


 
    4
    7
    1.0


 
    4
    5
    1.0


 
    4
    6
    1.0


 
    4
    8
    1.0


 
    5
    8
    1.0


 
    6
    7
    1.0


 
    7
    8
    1.0









saves/simpletree.xml
 
 

 
	 This is a basic graph example with no cycles.
	 




 
    S
    0
    -20.066227
    -129.85098
    START
    26.0


 
    N1
    1
    -90.072845
    -59.84436
    REGULAR
    25.1


 
    N2
    2
    58.973503
    -58.715225
    REGULAR
    16.4


 
    N3
    3
    -163.46687
    33.874172
    REGULAR
    27.6


 
    N4
    4
    -60.715233
    25.970198
    REGULAR
    18.1


 
    N5
    5
    47.68211
    31.615894
    REGULAR
    8.8


 
    N6
    6
    152.69205
    28.228476
    REGULAR
    8.5


 
    N7
    7
    -172.49998
    129.85098
    REGULAR
    28.0


 
    N8
    8
    -81.039734
    110.65562
    REGULAR
    18.7


 
    N9
    9
    5.9039693
    107.268196
    REGULAR
    10.0


 
    G
    10
    105.268196
    98.23509
    GOAL
    0.0


 
    N10
    11
    168.49998
    111.78476
    REGULAR
    6.5




 
    0
    1
    9.9


 
    0
    2
    10.6


 
    1
    3
    11.9


 
    1
    4
    9.1


 
    2
    5
    9.1


 
    2
    6
    12.8


 
    3
    7
    9.6


 
    4
    8
    8.7


 
    5
    9
    8.6


 
    5
    10
    8.8


 
    6
    11
    8.5









saves/vancouver.xml
 
 

 
	 This graph is meant to be part of road network of Vancouver and the aim is to find a path from UBC to SP.
	 




 
    UBC
    0
    -169.54227
    -14.13909
    START
    5.0


 
    SP
    1
    -88.428535
    -149.57669
    GOAL
    0.0


 
    DT
    2
    -13.268116
    -148.83252
    REGULAR
    2.0


 
    JB
    3
    -92.14935
    -58.044685
    REGULAR
    3.0


 
    KD
    4
    -83.96357
    43.16143
    REGULAR
    6.0


 
    KB
    5
    3.103461
    -61.021336
    REGULAR
    3.0


 
    MP
    6
    58.171494
    51.34722
    REGULAR
    7.0


 
    BBY
    7
    153.4243
    -2.232488
    REGULAR
    8.0


 
    AP
    8
    -77.2661
    149.57669
    REGULAR
    8.0


 
    RM
    9
    30.637478
    149.57669
    REGULAR
    9.0


 
    SRY
    10
    170.54004
    145.11172
    REGULAR
    29.0




 
    0
    3
    3.0


 
    0
    4
    3.0


 
    2
    1
    2.0


 
    3
    5
    4.0


 
    4
    3
    4.0


 
    4
    6
    3.0


 
    5
    2
    2.0


 
    5
    7
    6.0


 
    6
    5
    4.0


 
    6
    7
    5.0


 
    6
    9
    3.0


 
    9
    8
    3.0


 
    9
    10
    21.0


 
    10
    7
    22.0









SampleProblems.txt
Simple Tree Graph, simpletree.xml, This is a basic graph example with no cycles.
Extended Tree Graph, extendedtree.xml, This is a basic graph example with no cycles.
Cyclic Graph Example, cyclicgraph.xml, This is a graph example with a cycle.
Vancouver Neighbourhood Graph, vancouver.xml, This graph is meant to be part of road network of Vancouver and the aim is to find a path from UBC to SP.
Misleading Heuristic Demo, misleadingheuristic.xml, This graph is an example which can demonstrate that some search strategies can be mislead by heuristic information.
Multiple-Path Pruning Demo, multiplepathpruning.xml, This graph is an example which can demonstrate multiple path pruning.
Delivery Robot (acyclic), acyclicdelivery.xml, This example models a delivery robot trying to deliver something to its goal location without any cycles.
Delivery Robot (cyclic), cyclicdelivery.xml, This example models a delivery robot trying to deliver something to its goal location with cycles.
Module 4 Graph, mod4gr1999.xml, This graph is a simple graph with cycles and is a good example to learn about the basic search procedures.
Module 5 Graph, mod5gr1999.xml, This graph is meant to be part of the road network for a city. For this graph, the aim is find a path from node mi to the location cp that can only be reached by round-about methods. 
Bicycle Courier Problem (acyclic), acyclicbicycle.xml, This graph is meant to represent bike trails and the aim is to find a path from mo to nyse without any cycles.
Bicycle Courier Problem (cyclic), cycliccourier.xml, This graph is meant to represent bike trails and the aim is to find a path from mo to nyse with cycles.




reading content from C:\Users\Asus\Desktop\Bee\See\0_geografie_planificari_calendaristice_liceu_tehnologic_9.docx

PLANIFICARE CALENDARISTICĂ ANUALĂ 
PENTRU ANUL ȘCOLAR  - 2025, LA DISCIPLINA GEOGRAFIE 
 ÎNVĂȚĂMÂNT LICEAL, FILIERA TEHNOLOGICĂ
CLASA a IX-a

În baza prevederilor OME nr. 3.694/01.02  privind structura anului școlar  2024- 2025 și ale OME nr. 3965/2024 privind măsuri de aplicare şi corelare a planurilor de învăţământ pentru învăţământul profesional, liceal - filiera tehnologică şi postliceal cu structura anului şcolar 2024 - 2025, în organizarea procesului de învățământ se vor avea în vedere următoarele reglementări:
• Pentru clasele a IX-a – a XI-a zi și a IX-a – a XII-a seral din învățământul liceal și profesional, filiera tehnologică, anul școlar are o durată de 37 de săptămâni de cursuri și se încheie la data de 23 iunie 2025.
• Pentru clasele a XII-a zi și a XIII-a seral din învățământul liceal și profesional, filiera tehnologică, anul școlar are o durată de 34 de săptămâni de cursuri și se încheie la data de 2 iunie 2025. 
• Pentru clasele din învățământul liceal și profesional, filiera tehnologică, ale căror planuri-cadru de învățământ în vigoare prevăd un număr mai mare de 37 de săptămâni, în organizarea procesului de învățământ se va avea în vedere menținerea structurii, a numărului total de ore/săptămână și a numărului de săptămâni alocate stagiilor de pregătire practică prevăzute în planurile-cadru de învățământ în vigoare, dar cu reducerea numărului de săptămâni de cursuri pentru disciplinele și modulele din ariile curriculare, astfel:
1. Învățământ de zi:
 Pentru clasa a IX-a liceu: 
· 34 de săptămâni de pregătire teoretică și pregătire practică; 
· 3 săptămâni de stagii de pregătire practică; 
 Pentru clasa a IX-a învățământ profesional: 
· 32 de săptămâni de pregătire teoretică și pregătire practică săptămânală; 
· 5 săptămâni de stagii de pregătire practică;
 Pentru clasa a X-a liceu: 
· 34 de săptămâni de pregătire teoretică și pregătire practică; 
· 3 săptămâni de stagii de pregătire practică; 
 Pentru clasa a XI-a liceu, profil Tehnic și Resurse naturale și protecția mediului: 
· 32 de săptămâni de pregătire teoretică și pregătire practică; 
· 5 săptămâni de stagii de pregătire practică; 
 Pentru clasa a XI-a liceu, profil Servicii: 
· 33 de săptămâni de pregătire teoretică și pregătire practică;
· 4 săptămâni de stagii de pregătire practică; 
 Pentru clasa a XII-a liceu: 
· 29 de săptămâni de pregătire teoretică și pregătire practică; 
· 5 săptămâni de stagii de pregătire practică. 

2. Învățământ seral:
 Pentru clasele din învățământul liceal, cu excepția claselor a XIII-a, se respectă numărul de săptămâni de cursuri stabilit prin planurile-cadru de învățământ în vigoare.
 Pentru clasa a XIII-a învățământ seral: 
· 29 de săptămâni de pregătire teoretică și pregătire practică; 
· 5 săptămâni de stagii de pregătire practică.




CLASA A IX-A
(pentru toate profilurile și specializările)

• Număr de ore alocate: - 1 oră pe săptămână (TC), respectiv 34 de ore pe an 
• Structura avută în vedere la realizarea planificării calendaristice:
Modul 1: 09.09.2024 - 25.10.2024
Modul 2: 04.11.2024 - 20.12.2024
Modul 3: 08.01.2025 - 21.02.2025*
Modul 4: 03.03.2025 – 17.04.2025  
Modul 5: 28.04.2025 - 27.06.2025 
– cu două săptămâni de instruire practică în perioada celor 2 programe ”Școala Altfel” și ” Săptămâna Verde”**
– cu o săptămână de instruire practică** 

  *  Se va modifica în funcție de decizia ISJ/ISMB
**  Se va modifica/ajusta în funcție de intervalele (săptămânile) de desfășurare a stagiilor de instruire practică stabilite la nivelul fiecărei unități de învățământ.

PLANIFICARE CALENDARISTICĂ ANUALĂ 
GEOGRAFIE FIZICĂ (,,PĂMÂNTUL PLANETA OAMENILOR”)
	Unitatea de învățare
	Competențe specifice
	Conținuturi
	Nr. de ore alocate
	Săptămâna
	Observații/
Evaluare

	MODUL DE ÎNVĂȚARE 1

	1. Pământul - o entitate a Universului
	1.1.
1.2.
1.3.
2.1.
3.2.
	· Elemente de geografie generală. (evaluare inițială)
· Universul şi Sistemul solar
· Evoluţia Universului şi a Terrei
· Caracteristicile Pământului şi consecinţele geografice 
	4
	1 – 4
	Observarea sistematică
Autoevaluare/
Interevaluare
Evaluare orală

	2. Măsurarea 
şi reprezentarea spaţiului terestru

	1.1.
2.2.
4.1.
4.2.
4.3.
4.4.
4.5.
	· Coordonatele geografice
· Reprezentări cartografice
· Măsurarea şi calculul distanţelor şi al suprafeţelor pe hărţi geografice şi în orizontul local
· Reprezentările cartografice şi societatea omenească
· *GIS, teledetecție, imagini satelitare
Recapitulare și evaluare
	3
	5 – 7
	
Observarea sistematică

Autoevaluare/
Interevaluare

Evaluare scrisă (T1)

	Vacanță (28.10.2024 – 31.10.2024)

	MODUL DE ÎNVĂȚARE 2

	3. Relieful terestru

	1.1.
1.2.
3.2.
4.2.
4.5.
5.3.
5.4.

	· Scoarţa terestră ca suport al reliefului: structură şi alcătuire petrografică
· Unităţile majore ale reliefului terestru
· Agenţi, procese şi forme de relief
· Tipuri şi unităţi de relief
· Analiza şi interpretarea  reliefului
· Relieful şi societatea omenească
· Relieful orizontului local
· Aplicaţii practice în orizontul local
· *Modificări naturale actuale ale reliefului. Modificări accentuate antropic
Recapitulare și evaluare
	






7
	






8 – 14
	
Observarea sistematică


Autoevaluare/
Interevaluare







Evaluare scrisă (T2)

	Vacanță (21.12.2024 – 7.01.2025)

	MODUL DE ÎNVĂȚARE 3

	4. Atmosfera terestră 
	1.1.
1.2.
3.2.
4.1.
4.5.
4.6.
5.4.

	· Alcătuirea şi structura atmosferei
·  Factorii genetici ai climei
·  Climatele Terrei 
· Evoluţia şi tendinţele de evoluţie a climei
· Hărţile climatice şi harta sinoptică. Analiza şi interpretarea datelor
· Clima şi societatea omenească
· Clima orizontului local
*Modificări climatice actuale și impactul acestora asupra societății umane
Recapitulare și evaluare
	7
	15 – 21
	


Observarea sistematică

Autoevaluare/
Interevaluare




Evaluare scrisă (T3)

	Vacanță de ski(22.02.2025 – 02.03.2025)

	MODUL DE ÎNVĂȚARE 4*

	5. Apele Terrei
	1.1.
1.2.
3.2.
4.1.
4.5.
4.6.
5.4.
5.5.
	· Componentele hidrosferei
· Apele oceanice (oceanosfera) și apele continentale
· Analiza şi interpretarea unor date hidrologice
· Hidrosfera şi societatea omenească
· Hidrografia orizontului local
· Aplicaţii practice în orizontul local
*Modificări ale componentelor hidrosferei (naturale și antropice)
Recapitulare și evaluare
	7
	22 – 28
(orientativ)
	

Observarea sistematică

Autoevaluare/
Interevaluare


Evaluare scrisă (T4)

	Vacanță (18.04.2025 – 27.04.2025)

	MODUL DE ÎNVĂȚARE 5*

	6. Viaţa şi solurile pe Terra
	1.1.
1.2.
3.2.
4.5.
4.6.
5.4.
5.5.
	· Biosfera şi organizarea ei.
   Evoluţia vieţii pe Terra
· Pedosfera
· Zonele biopedoclimatice
· Biosfera, solurile şi activitatea omenească
· Aplicaţii în orizontul local
*Transformări recente în învelișul biotic cu implicații asupra societății umane
Recapitulare și evaluare
	2
	29 – 30
(orientativ)
	


Observarea sistematică

Autoevaluare/
Interevaluare


Evaluare scrisă (T5)

	7. Mediul, peisajul şi societatea omenească 
	1.1. 
1.4.
2.3.
2.4. 
2.5. 
5.5.


	· Interacţiunile dintre elementele
   naturale ale mediului
· Interacţiunile dintre om şi
   mediul terestru
· Peisajele naturale
· Factorii geoecologici naturali
· Tipurile de mediu natural
· Rolul mediului geografic în evoluţia şi dezvoltarea  societăţii omeneşti 
· Mediul orizontului local
Recapitulare și evaluare
	2
	31 – 32 
(orientativ)
	


Observarea sistematică

Autoevaluare/
Interevaluare




Evaluare orală

	8. *Modificări 
globale ale mediului 
natural
	1.1.
1.2.
1.3.
1.4.
2.4.
2.5.
4.1.
4.6.
5.4.
5.5.
	· *Mediul natural ca sistem global. Interacțiuni, sisteme, structuri
· *Modificări naturale
· *Modificări influențate antropic
· *Intercondiționarea transformărilor mediului natural
Recapitulare și evaluare finală
	


4






	


33 – 37
(orientativ)





	Observarea sistematică

Autoevaluare/
Interevaluare

Evaluare finală

	*include o  săptămână de instruire practică 
(la decizia unității de învățământ, între S29 și S37)



 Planificarea calendaristică este întocmită în conformitate cu programa școlară pentru disciplina Geografie, clasa a IX-a, aprobată prin OMECT nr. 3458/09.03.2004, structura anului școlar 2024-2025 aprobată prin OME nr. 3.694/01.02 2024, măsurile de aplicare și corelare a planurilor de învățământ pentru învățământul profesional, liceal - filiera tehnologică și postliceal cu structura anului școlar 2024-2025 aprobate prin OME nr. 3965/2024 şi metodologia de proiectare şi de organizare a instruirii promovată de ghidurile metodologice de curriculum şi didactică.
 Numărul de ore din prezenta planificare are o valoare orientativă și, de asemenea, intervalul de săptămâni din structura anului școlar. 
 La Art. 4 alin. (2) din OME nr. 3505/31.03.2024 privind structura anului şcolar 2024-2025 se precizează că, pentru clasele din învățământul liceal - filiera tehnologică, în perioadele dedicate programelor „Școala altfel” și „Săptămâna verde” (din intervalul 09 septyembrie – 20 iunie 2025) se organizează activități de instruire practică. 
 Planificarea calendaristică se va modifica/ajusta în funcție de intervalele de desfășurare a celor trei săptămâni de stagii de pregătire practică, stabilite la nivelul fiecărei unități de învățământ.
 Conținuturile evidențiate printr-un asterisc (*) și prin caractere italice reflectă realitatea/ problematica lumii contemporane asumate prin studiul Geografiei și nu sunt obligatorii. Cadrele didactice pot opta sau nu pentru realizarea acestor conținuturi, în funcţie de resursele de timp şi de particularităţile colectivelor de elevi.
image1.png


reading content from C:\Users\Asus\Desktop\Bee\See\Adeverință.docx


image6.png

image7.png

image8.png

image9.png

image10.png

image11.png

image12.png

image13.png

image1.jpeg

image2.png

image3.png

image4.png

image5.png


reading content from C:\Users\Asus\Desktop\Bee\See\CHANGELOG.md

# Lab 03
> 2025-03-10

> **Main goal**: Component-based thinking
---

## Hour 1:
- Intro to DBMS history
- ORM vs SQL
    - Explain mappings, like 1d light switches to 2d floor map
    - Link to Dependency Inversion
- "Tech stack" is a bad phrase. Learn about layer above and below you.
    - So if the abstraction fails, you can fix your way around it
    - https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/
    - Don't be a React developer. Be a web developer.
        - LAMP (Linux, Apache, MySQL, PHP)
        - MEAN (MongoDB, Express, Angular, Node)
        - etc.
    - Learn about web standards. Learn about the browser platform.


## Hour 2:
- Show Quirks.cpp
    - Link: https://github.com/WebKit/WebKit/blob/main/Source/WebCore/page/Quirks.cpp#L1130
- Chaos Monkey
    - Link to Antifragile
    - Exercise: how much is 5-nines? 4-nines? 3-nines?
- Snippet indent exercise. Explain the real power of Haskell types (runnable UML!)
    - "functional core, imperative shell" architecture


## Hour 3:
- Write Fizz Buzz in 3 ways (simple, 1 buffer, buffered writer)
- Explain the N+1 problem


#### Sources:
- https://www.martinfowler.com/bliki/BlueGreenDeployment.html
- https://googleblog.blogspot.com/2008/08/search-experiments-large-and-small.html
- https://www.slideshare.net/slideshow/culture-1798664/1798664#23
- https://youtu.be/jeRWyYIgiU8?t=176
- https://0.30000000000000004.com
- https://martinfowler.com/bliki/OrmHate.html
- https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html

- Books mentioned:
    - https://en.wikipedia.org/wiki/Antifragile_(book)
    - https://en.wikipedia.org/wiki/Hacker%27s_Delight
    - https://www.amazon.com/Understanding-Software-Addison-Wesley-Professional-Computing/dp/0137589735


# Lab 02
> 2025-03-03

> **Main goal**: Understand GRASP
---


## Hour 1:
- Go through what 'Clean Code' promotes:
    - Link: https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29
    - Show counterexamples
- Write a `pluralize` function
    - Rust version
    - TypeScript version
- Show `gap` command
- Refactor method from the lab guide


## Hour 2:
- GRASP exercise


## Hour 3:
- GRASP exercise


#### Sources:
- https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction
- https://qntm.org/clean
- https://www.codecentric.de/en/knowledge-hub/blog/curly-braces
- https://github.com/tigerbeetle/tigerbeetle/blob/fe681fc34729e7afb3ae4ead33d1093ceb68d164/src/constants.zig#L14
- Style:
    - https://cbea.ms/git-commit/
    - https://go.dev/doc/contribute#commit_messages
    - https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716
    - http://number-none.com/blow/john_carmack_on_inlined_code.html
    - https://google.github.io/styleguide/cppguide.html#Exceptions
    - https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst
    - https://testing.googleblog.com/2023/10/improve-readability-with-positive.html
- Big functions:
    - https://github.com/torvalds/linux/blob/master/kernel/fork.c#L2147-L2705
    - https://github.com/gcc-mirror/gcc/blob/master/gcc/c/c-parser.cc#L2306-L3175
- Big comments:
    - https://github.com/golang/go/blob/master/src/math/big/natdiv.go


# Lab 01
> 2025-02-24

> **Main goal**: Understand SOLID
---


## Hour 1: Warm up, important concepts from software engineering
- "Software engineering is programming integrated over time"
- Explained the origins of OOP
    - Simula vs Smalltalk
    - Alan Kay's version
    - Steve Jobs selling objects for the NeXT operating system
- These principles of software design aren't generally applicable
- Style:
    - coding styles
    - why 80 columns
    - case formats
    - why code formatters exist (explain what gofmt does)
    - commit styles
    - version control systems
- Explained why Rust/Golang don't have classes (prefer composition over inheritance)
- Don't try to be Netflix or Google (design for the problem)


## Hour 2:
- Self-check test
- Explained a few items from the test


## Hour 3:
- SOLID live demos
    - S = Single Responsibility Principle
    - O = Open/Closed Principle (OCP)
    - L = Liskov Substitution Principle (LSP)
    - I = Integration Segregation Principle (ISP)
    - D = Dependency Inversion Principle (DIP)


#### Sources:
- https://abseil.io/resources/swe-book/html/ch01.html
- https://overreacted.io/goodbye-clean-code/
- https://www.youtube.com/watch?v=tD5NrevFtbU
- https://www.youtube.com/watch?v=oKg1hTOQXoY (10:00)
- https://www.youtube.com/watch?v=Gk-9Fd2mEnI
- https://simonwillison.net/2024/Jun/17/russ-cox/

- Books mentioned:
    - https://en.wikipedia.org/wiki/Understanding_Media
    - https://en.wikipedia.org/wiki/The_medium_is_the_message


reading content from C:\Users\Asus\Desktop\Bee\See\CN3a_2022.pdf


LABORATORY WORK NO. 3a 
OPTICAL FIBERS AND COMPONENTS 

 

 

1. Objectives 

 
The objective of this work is gaining knowledge on optical fibers and components, link 

performance analysis and the optical power budget calculus. 

 

2. Theoretical considerations  

 
2.1 Optical fibers and components 

The current laboratory work continues the focus on the Physical layer of the ISO/OSI stack 

by providing knowledge on optical fibers and components. Furthermore, on part 3b, the main 

network devices and elements of structured cabling are presented. 

Once the drop in the price of optical fibers, and appropriate communications equipment, this 

has become the environment of choice for new high-speed connections (exterior and interior).  

To transmit data, optical fibers send light signals along glass or plastic cores (of the order 

tens of microns (μ), which constitutes a wavelength guide for light, obtained from a 

combination of silicon dioxide and other elements).  

An optical fiber strand is the basic element of an optical fiber cable (a cable contains several 

strands). A strand has three layers: core, cladding and coating. A fiber optic cable consists of 

several components: fiber strand(s), buffer, protective materials, outer jacket. 

The core is wrapped by material made of silicon dioxide having a refractive index lower than 

the core called cladding. In order to protect the cladding, this is wrapped in a plastic material. 

This is called buffer and is wrapped in a material, usually Kevlar, which confers resistance of 

fiber at the time of installation. Optical fiber buffers are of two categories: tight (a protective 

covering is applied over the coating of each fiber strand) or  loose-tube (several strands inside 

a tube filled with a protective gel). For outdoor, long-distance installation, loose-tube fiber is 

preferred. The last wrapper is the jacket which protects the fiber against abrasive materials, 

solvents and other factors. The color enclosure in the case of multimode optical fiber is 

usually orange and in the case of single-mode optical fiber is usually yellow. Each fiber 

optics cable is composed of two fibers wrapped separately, a fiber being used for 

transmission and another for the reception, ensuring in this way a full-duplex connection. A 

cable of optical fiber may contain from two up to hundred separate fiber strands (usually in 

LANs, up to 24). Figure 2.1 presents the layer of an optical fiber and an optical fiber 

transversal section. 



COMPUTER NETWORKS 

 2 

  
Figure 2.1 a. Optical fiber layers               b. Optical fiber transversal section 

 

For the signal to be reflected without loss, the following two conditions need to be met: 

• Optical-fiber must have a refractive index higher than the material surrounding it; 

• The angle of incidence of light signal must be greater than the critical angle of fiber 

and of the material surrounding it. The angle of incidence of light signal can be 

controlled by using the next two factors: 

o Numerical aperture of the fiber is the range of angles of the light signal for 

which the reflection is complete; 

o The modes are the ways that the signal light can follow. 

Unlike copper-based transmission media, optical fiber is not susceptible to, and it does not 

generate electromagnetic or crosstalk interference. 

Two main optical fibers are commonly used in LANs and WANs: single-mode and 

multimode. Single-mode optical fiber is used for long distance links and for vertical cabling 

in buildings (building’s backbone). Multimode optical fiber is commonly used in horizontal 

and vertical cabling. Multimode fiber has a larger core diameter compared to single-mode. 

Thus, multimode does not require the same precision as single-mode, resulting in less 

expensive connectors, transmitters etc. 

For the single-mode fiber the core diameter is small enough as to permit only one mode (one 

way) light signal, being sent in a straight line through the middle of the core. Single-mode 

optical fiber cables use cores with diameter between 8μ and 10μ. The most used single-mode 

optical fibers have 9μ diameter and cladding with a diameter of 125μ. They are usually 

referred as 9/125μ optical fibers. Light source used is the infrared laser. It is recommended 

caution when using lasers as source of light since it may affect the eyes. Single-mode fibers 

may transmit data at distances over 100km. The loss on km of single-mode optical fiber is 

specified by the manufacturer. In the case of single-mode fiber, the refractive index of glass 

stays constant. This type of glass is called step index glass.  

 

The core of multimode fiber has a sufficiently large diameter as to permit several modes 

(several ways) for light signal. Standard multimode optical fiber cables have a core diameter 

of 62, 5μ or 50μ and cladding with a diameter of 125μ. They are usually referred as optical 

fibers of 62.5/125μ or 50/125μ. Usually, the light sources used with multimode fibers are 

Infrared Light Emitting Diode (LED) or Vertical Cavity Surface Emitting Lasers (VCSEL). 

LED-s are cheaper and require less safety measures than lasers. The disadvantage of LED is 

that may not transmit light signals at distances as large as lasers. Multimode fibers of 

62.5/125 may transmit data at distances of up to 2000m. The loss of multimode optical fiber 

is specified by the manufacturer. In the case of multimode fiber, the refractive index of glass 

may be constant (multimode step index glass) or may also decreases from the center to the 



OPTICAL FIBRES AND COMPONENTS 

 3 

exterior  (variable or graded-index glass and allows various illuminating modes to reach the 

receiver at the same time).  

 

In optical fiber, beside propagation, the light is subjected to two main phenomena: 

attenuation and dispersion. Attenuation or absorption is essentially due to the presence of 

hydroxyl ions -OH and of the various metal ions. Light may also be spread by micro crystals, 

lower than the wavelength, which form at the cooling of the glass. Attenuation limits the 

length of optical fiber to be used. The dispersion or impulse width widening is mainly due in 

multimode fibers to the different length of the modes. The chromatic dispersion appears due 

to the variation of the refraction index function of the light colour or wavelength. The 

dispersion limits the use of optical fiber in the frequency or in bandwidth. The two limitations 

multiplied characterize most accurate an optical fiber. 20MHz-km values are obtained for 

fiber with step index, 1GHz-km for the variable index and 1000GHz-km for the single-mode 

in which there is no modal dispersion.  

 

Optical fiber transmitters convert electrical signals in equivalent luminous pulses. There are 

two types of light source used by transmitters for optical-fiber: 

• The LED which produces infra-red light having a wavelength of 850nm or 

1310nm. They are used with multimode fibers. Coupling to optical fiber can be 

improved by using a spherical lens; 

• LASER semiconductor diode containing which produces infra-red light having a 

wavelength of 1310nm or 1550nm. They are used with multimode or single-mode 

fibers. 

 

There are two types of basic design for LEDs: with surface emission and with edge emission. 

At surface emission led, the emission of light is perpendicular to the plane of junction 

through a thin transparent layer. They emit in a geometric radial spectrum. At edge emission 

led the light is emitted in a plane parallel to the junction at semiconductor edge. The materials 

used are often compounds III V as GaAs or Al×GA1-XAs for wavelengths of 0.8-0.9 μm and 

Ga×In1-XPYAs1-y for wavelengths of 1.3-1.6 μm. Emission spectrum of a LED is between 25 

to 40 μm for small wavelengths and 50-100 μm for larger wavelengths. 

 

LASER semiconductor diodes, laser diodes (LD), are obtained by introducing a led into an 

optical resonant cavity. The effect of laser only appears at the existence of a direct current 

high enough to achieve an inversion of the population of the electrons and holes from the two 

energy strips of conduction and valence. The current value from which this effect appears is 

called limit current. Under this current the device acts as an ordinary led. Since the light 

emitted by a laser is much more coherent than issued by a LED, the efficiency of the optical 

fiber coupling is higher. Optical power also captured by laser is greater than that emitted by 

the LED. 

 

An analysis compared between the two types of transmitters is clearly in favour of LD 

because the possibility to use higher frequencies, narrower spectrum and in favour of the 

LED due to price and power stability in relation to temperature. 

 

The life expectancy of both devices is equal and is of the order of 10 million hours. 

 



COMPUTER NETWORKS 

 4 

The fiber optics receivers convert luminous pulses into equivalent electrical signals. 

Semiconductor devices normally used for optical fiber are classified in two types: simple and 

with internal gain. The first may be called PIN photodiode by type of doping (p intrinsic and 

n) and the second category is called APD (Avalanche Photo- Diodes). These devices are 

sensible at 850, 1310 and 1550nm wavelengths, wavelengths used by transmitters for optical 

fiber. As semiconductor materials are used Si for wavelengths of 800-900 nm and Ge or 

InGaAsP for 1300 and 1500 nm. Si has optimum sensitivity only within a reduced 

frequencies range but Ge has an appreciable darkness current and is more sensitive to noise. 

For this reason last possibility is the best but requires a more sophisticated manufacturing 

technology and therefore has a higher price.  

In order to connect multiple fibers or for achieving a longer fiber, splices (junctions) may be 

used. Splices are of two types: mechanical and fusion. Attenuations introduced are lower than 

0.5dB (ANSI/TIA-568-C.3 specifies that mechanical or fusions splices shall not exceed a 

maximum optical insertion loss of 0.3dB). At mechanical splices the two ends of the fiber, 

carefully cut, cleaned and polished are caught in a rigid mechanical holder that they fix to 

each other in an fixed ensemble. Fusion splices shall be carried out by heating close to the 

melting point. At this moment the two fibers are pressed against one another and cooled. 

These operations shall be preceded by cutting operations and finishing their ends and prior 

alignment of the two ends which will be connected. Fusion splices also remake draw/bursting 

resistance of the fiber at approximate 90% of the original value. To protect the splices, splice 

enclosures are used. 

Connectors in the optical fiber allow the connection to ports. The common used connectors 

are SC (Subscriber Connector) - snap on type, ST (Straight Tip) - twist on type, FC (Ferrule 

Connector) - screw on type, LC (Lucent Connector) - snap on type and MTP/MPO - 

push/pull type, for multimode optical fibers and for single-mode optical fibers. Attenuation 

introduced by an optical connector, even of superior quality is greater than that introduced by 

a splice, having values of approximately 1 dB. Connectors are high precision mechanical 

equipment and usually one end of the fiber is in the connector and one is free. In this case 

attaching a connector shall be reduced to the execution of a splice. Such a solution is usually 

more advantageous than mounting a connector directly to the end of the fiber because 

prefabricated connectors ensure the accuracy of mounting much higher. If the optical fiber is 

ended into an optical fiber terminator for redistribution this end connector is also called pig-

tail and is prefabricated type. A special category of connectors is optical cords for distribution 

or connection. These are special optical fibers with connectors at both ends allowing small 

fiber curvature radii of approximately 2,5-5 cm. Their color is yellow for single-mode fiber 

and orange for multimode fiber 

 

Repeaters are optical amplifiers receiving light signals attenuated as a result of the distance 

traveled through optical fiber, remake the form, power and time parameters of these signals 

and send them away. 

 

Patch panels for optical fiber are similar with copper cable patch panels, increasing 

flexibility of the optical networks. For connecting different equipment, an optical fiber patch 

cord is used (also known as a zip cord - two flexible optical fibers with connectors at each 

end). 

 



OPTICAL FIBRES AND COMPONENTS 

 5 

Additionally, several other active or passive devices are used with optical fibers (e.q.: optical 

couplers - combines or splits optical signals; optical attenuators - reduce the power level of an 

optical signal; optical isolators; fiber-optic switches; optical multiplexers, etc.). 

 

The ISO/IEC 11801-1 specifies the  requirements for coaxial, twisted-pair copper and optical 

fiber. The ISO/IEC 11801 (Europe) and ANSI/TIA-568-C (USA and Canada) standards 

define 7 classes of optical fibers (single-mode and multimode) as shown in table 2.1, together 

with several important parameters (optical fiber requirements, the cable transmission 

performance and the physical cable requirements): 

 
Table 2.1 Optical fiber characteristics 

 
 

Multimode Single-mode 

Type OM1 

62,5/125 

μm 

OM2 

50/125 

μm 

OM3 

50/125 

μm 

OM4 

50/125 

μm 

OM5 

50/125 

μm 

OS1 

9/125 μm 

OS2 

9/125 μm 

Wavelength 850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

850, 

1300nm 

1300nm, 

1550nm 

(1383nm) 

1300nm, 

1550nm 

Max. attenuation 

(db/km)  

2.6 /  

2.4 

3.56 / 

2.3 

2.6 /  

1.9 

2.9 /  

1.5 

2.9 /  

1.5 

1 0.4 

Light source LED (Light-Emitting Diode) /  

VCSEL (Vertical Cavity Surface-Emitting Lasers 

Light Source)  

LASER (Light 

Amplification by 

Stimulated Emission of 

Radiation) 

Distance/ 
data rate 

1 Gbps 275m 550m - - - 5-120km 

10Gbps 33m 82m 300m 400m 400m 10-80km 

40-100 

Gbps 

- - 100m 150m 150m 2-80km 

Color orange/ 

slate 

orange aqua violet/ 

aqua 

green/ 

lime 

yellow yellow 

 

Incorrect installation of optical fiber has as result the increase in attenuation for the optical 

signal. The scope or exaggerated than optical fiber may cause cracks in the heart to disperse 

the signal light. Exaggerated stretching or bending of the optical fiber may cause small cracks 

of the core which will scatter the light signal. Exaggerated bending of the optical fiber may 

have as a result the drop in incident angle of the light signal under critical angle of total 

reflection. For the connector installation the heads must be cut off and finished. After 

installation, the heads of the optical fibbers, the fiber connectors and ports must be kept clean 

so that no attenuation will be introduced. Before use of optical fiber cables, their attenuation 

must be tested. At the design of an optical-fiber links, loss of power signal that can be 

https://en.wikipedia.org/wiki/Optical_fiber


COMPUTER NETWORKS 

 6 

tolerated must be calculated. This is called the budget of loss of optical link. Loss of power is 

measured in decibels (dB). 

 

For optical fiber link testing there are several methods: continuity testing, visual fault locator, 

measurement of optical power output, OTDR and BER test error rate. 

 

Continuity testers are used to test the continuity in an optical fiber. A visual fault locator 

(VFL) tool allows a technician to identify breaks, macrobends (refers to the minimum 

bending radius) or poor fusion splices. 

 

The measurement of optical power output determines the loss of power through the optical 

link by measuring the output power at a known input power. The unit of measurement for 

optical power is the miliwatt (mW) but for practical reasons shall be used other unit of 

measure which measure the gain (G) or loss (L) in a system, namely decibel (DB). 

 

The procedure OTDR Optical Time Domain Reflectometer is the procedure by which the 

attenuation characteristics of an optical fiber and its length may be visualized. This procedure 

is the only through which can be detected positions such breaks in optical fibre. OTDR 

displays a graphic having as X axis the fibre length and as Y axis the attenuation. From this 

graphic, the fiber attenuation and the splices and connectors quality can be deduced. Also can 

be determined the braking position in the cable if externally the cable is not affected. 

 

The BER test (Bit Error Rate) is the final test for a data link through optical fiber. This test or 

criterion shows at how many bits transmitted through the fibre an error due fibre will be 

produced. The BER test must meet the requirements imposed by the producers of the DTE 

equipment that are coupled to the optical fibre. For computer networks they ask to be less 

than 1 bit of error at 109/1012 bits transmitted or BER < 10-9/10-12. For the testing is required a 

generator of random bit sequence and an interface to optical fibre if a loop is tested or two if 

a single fibre is tested. In order to have significant results, the test must be carried out over a 

period long enough so as to provide a sufficient number of bits. The test period of one day or 

two are common if it is working at a large bit rate in the use of optical fibre link and small 

BER. A counter may automatically count the number of errors detected. 

 

Calculation of optical power budget shall be made according to the following table. 

 
Table 2.2 Optical power budget 

 

Crt.  Optical loss or power DB  

1.  The km loss in Optical Fibre db/km X _____km fibre _____dB  

2.  The loss in Splices ___dB/splice X _____splices _____dB  

3.  The loss in Connectors __dB/connector X ___ connectors _____dB  

4.  Losses on other components _____dB  

5.  Margin of error _____dB  

6.  Total loss on the Link (1+2+3+4+5) _____dB  

7.  The power of average emission of the transmitter _____dB  

8.  Average power received by the receiver (7-6)  _____dB  

9.  The dynamic of the receiver _____dB at _____dB   

10.  Receiver sensitivity at a rate of errors given by BER _____dB  

11.  Available Remaining Power  (8-10) _____dB  



OPTICAL FIBRES AND COMPONENTS 

 7 

Remarks  

 

For item 3. the transmitter connection losses to the optical will not be taken into account, 

these being already included. The amount calculated in item 8. must be within the range of 

item 9. for the receiver to operate correctly. The amount calculated in item 11 must be 

positive in order to have a functional optical data link.  

 

The error margin is due to take into account the average values for all link components. The 

dispersion of these values around the mean value is known and may take a margin of error 

large enough to cover deviations from an average with a probability of 99.9% or more. As the 

number of items is greater and as it is desirable a larger cover probability than a larger error 

margin will be taken. 

 

Optical emission power of the transmitter is a catalogue data and includes the loss of 

connection at one end of the optical fiber in the case in which the connection is made in 

accordance with recommendations. The power is greater at the LASER diodes and smaller at 

the LED. In the case of LASER usage for relatively short distances an attenuator is necessary 

so that the receiver will not be destroyed. 

 

Receiver dynamics represents the power range which a receiver can transform in electrical 

signal without loss of information. 

 

It is also needed a minimum optical power necessary for fulfilling the tolerated error rate 

condition which for computer networks is situated at the value of 1 bit erroneous at one 

billion bits transmitted. 

 

Calculus example of the optical power budget  

 

Optical fiber diameter: Core 62.5μm/Cladding 125μm. 

Numerical aperture of the fiber NA: 0.275. 

The wavelength of the optical equipment: 1310μm.  

 
Table 2.3 Calculus example 

 
Crt.  Optical loss or power DB  

1.  The km loss in Optical Fiber 1,8db/km X 3,5km fiber 6,3dB  

2.  The loss in Splices 0,5dB/splice X 2 splices 1,0dB  

3.  The loss in Connectors 1,0dB/connector X 2 connectors 2,0dB  

4.  Losses on other components 0,0dB  

5.  Margin of error 2,0dB  

6.  Total loss on the Link (1+2+3+4+5) 11,3dB  

7.  The power of average emission of the transmitter -10,0dB  

8.  Average power received by the receiver (7-6)  -21,3dB  

9.  The dynamic of the receiver _____dB at _____dB  

10.  Receiver sensitivity at a rate of errors given by BER -26,0dB  

11.  Available Remaining Power  (8-10) +4,7dB  

 

The power at the receiver is in the dynamic of the receiver, which makes possible its 

function, and the remaining available power is positive, ensuring a viable connection. 



COMPUTER NETWORKS 

 8 

 

There should be taken into account the fact that during the life of the link, aging phenomena 

may occur, leading to increase the power loss, as well as the fact that optical fiber may be 

broken accidentally and needs to be spliced.  

 

A calculation made to the limit endangers the length of service of a link through optical fiber. 

 

 

 

3. Lab activity 

3.1 The characteristics of various types of optical fibers, components and aspects related to 

the cabling of computer networks using this transmission environment should be discussed. 

3.2 Explore the fiber optic infrastructure deployed in the oceans available at 

https://www.submarinecablemap.com/ 

3.3 A 9/125μ single-mode optical fiber having the length of 2,5km and the loss equal to 

0,5dB/km, which connects two DTE equipments is considered. The attenuation introduced by 

splices and connectors is equal to 0,5 and 1dB respectively. The error margin taken into 

consideration is 3dB. The power of average emission of the transmitter is -15dB, the receiver 

sensitivity at a rate of errors given by BER 10-9 is -25dB and dynamic of the receiver is in the 

range -10 ÷ -30dB. Calculate the optical power budget. 

 

 

Notes 

 



reading content from C:\Users\Asus\Desktop\Bee\See\CN3b_2022.pdf


LABORATORY WORK NO. 3b 
STRUCTURED CABLING 

 

1. Objectives 

 
The objective of this paper is the knowledge of structured cabling, networks topology and the 

function of the different network devices. 

 

2. Theoretical considerations 

 
2.1 Physical media analysis 

 

In the physical media analysis, we may choose several factors of performance such as: the 

speed of transfer, bandwidth, reliability or the error rate, the duration of service, the average 

duration between the two defects, defects tolerance, direct costs, indirect costs, the cost per 

port or equipment connected, the cost per bandwidth or the total cost per port per bandwidth. 

The bandwidth, LB is a factor of intrinsic performance particular to each medium. The 

reliability, F, is also a factor of intrinsic performance of each medium and shall be the ratio of 

the number of bits erroneously transmitted to the total number of bits transmitted. The service 

duration, De, is the length of time after the environment should be replaced, due to aging 

phenomena. The average duration between two faults, DMDD, is the statistical average time 

between two successive malfunctions of the environment for the standardised period of life. 

Defects tolerance, Td, is a factor of performance induced on the physical environment by the 

technology and network architecture used, but in many cases a given environment does not 

allow a error tolerance architecture or only one limited. Direct costs, Cd, are represented by 

the actual cost of the environment along with connectors, the auxiliary materials necessary 

for correct posing, and the cost of labour for communication environment realisation and 

environment testing. The cost per port, Cp, it is a synthetic factor which has a greater decision 

value, being a global decision criterium and reflecting the total costs for carrying out physical 

infrastructure related to the total number of ports or equipment connected. The cost per port 

per speed of transfer, Cpv, is a factor performance more usefull which alleviates taking a 

correct decision in the implementation of a local area network, including the possibility of 

future extension without the need for change the environment. The total cost per port per 

speed, Ctpv, is a complex factor of performance which characterizes a local area network at 

global level also including the equipment or technology costs. Characterization of 

performance factors above referred of the physical communication media previously 

presented is summarized in the following table. Performance factors, and in particular the 

type of cost, shall be classified relatively without giving absolute values which may be 

affected very rapidly in time. 

 
Table 2.1  Performance factors 

 

 

Medium Lb 

Gbps 

Reliability De 

years 

DMDD Td Cd Cp Cpv Ctpv Recomanded 

in usage 

Further use 

UTP Cat 6,7 >1 Medium 15 years Yes Medium Small Small Small Yes Yes  

Multimode OF >1 Large 30 years Yes Large Medium Medium Medium Yes Yes 

Single-mode OF >1 Large 30 years Yes V. Large V. Large Large Large Yes Yes 



COMPUTER NETWORKS 

 2 

2.2 Structured cabling  

 

There are three standard network topologies bus, star and ring: 

• Bus topology is the oldest method of interconnecting computers in a network. 

Data is transmitted to all the stations but is accepted only by the destination 

station, and the reflection of the signal is stopped using terminators. Figure 2.1 a. 

represents the bus topology; 

• Star topology has replaced the bus topology, the main feature is that it has a 

central component called hub through this component data is transmitted from one 

station to all the others. The star topology offers the resources and means for 

central administration. Figure 2.1 b. represents the star topology; 

• Ring topology stations are connected through a cable shaped as a ring and every 

station is acting as a repeater amplifying the signal. Figure 2.1 c. represents the 

star topology. 

 

Today most of the topologies used are combinations of star, ring and bus topologies. The bus-

star topology supposes connecting networks with star topology through linear branches (bus). 

Problems of connectivity appear when a concentrator fails. The ring-star topology also 

known as ring cabled as a star. In this case there is a central concentrator that connects all the 

other concentrators to which the stations are connected. 

 

 

 

 

 

 

 

 

 

 

 

 

 
      a. bus topology            b. star topology         c. ring topology 

 
Figure 2.1 Standard network topologies 

 

Under the generic name of active elements are grouped all of the network components that 

need a power supply and can work with electric, optic signals or both. Network interface 

cards are active elements of layer 2 providing the stations with the network connectivity. 

Every network interface card has its own 48 bits MAC address assigned from fabrication. 

This address is unique for every network card and it is composed of 2 parts: the 24 most 

significant bits identifies the producer, and the 24 least significant bits are assigned by the 

producer. The network interface cards used in PC’s need an I/O address space and a hardware 

interrupt. The interrupt is activated every time an event (a frame reception in most of the 

cases) appears requiring software attention, and the I/O address space represents the address 

region in which the card registers are accessible (written, read, by its driver). Usually both the 

interrupt and the I/O space are configurable to avoid conflicts with other devices. 

 

Station 

 

 

Station 

 

 

Station 

 

 

Switch 

 

 

Station 

 

 

Station 

 

Station 

 

 

Station 

 

Station 

 

 

Station 

 

 

Station 

 

 

Station 

 

 

Station 

 



STRUCTURED CABLING 

 3 

The overcome of the length limitations of cables is done by using repeaters. These are 

simple devices, connected at many network segments amplifying the signal that passes 

through them. Repeaters operate at the physical layer (they don’t have the frame notion or 

package transmitted through the network) and they broadcast the amplified signals on all 

their outputs.  

 

With the growth of the network dimensions, problems will appear if there are used only 

repeaters. The limitation for the stations that create such a network is the fact that 

repeaters/hubs(multiport repeaters) split the bandwidth, being situated in a single collision 

domain. In order to solve this problem we use bridges, equipments that operate at the second 

layer in the OSI hierarchy, and they represent devices much more complex than repeaters 

because they perform frame filtering based on MAC addresses and a separation of collision 

domains. Bridges don’t forward the frames that are local for a network, but only the ones that 

have destination addresses located in other networks. They store the frames and realize a 

retransmission only to the network in which the destination is situated. When the bridges are 

powered-up they know nothing about the network configuration and the addresses of the 

computers connected to it, but they learn the network topology while they forward the 

frames. Initially they allow all the frames to pass in all directions. But in time, as frames pass 

through, the bridge inspects the source address of each frame and completes the MAC tables, 

with the station address and the port at which the station is connected. Based on these tables 

they decide on which port the frames must be retransmitted. Frames sent at broadcast or 

multicast addresses will be retransmitted further away on all ports. Switches are layer 2 

equipments that take frames forwarding decisions based on the MAC address, so to direct the 

data only on the port corresponding to the destination host. These devices can be seen as 

devices capable to offer the connectivity of a hub and they manage the traffic like a bridge. 

Designing networks with complex topologies is done using switches. 

 

Routers are layer 3 equipments that route the packets based on the address used by routable 

protocols (for example Internet Protocol-IP or Internetwork Packet Exchange – IPX) with the 

help of the routing protocols (for example Routing Information Protocol RIP, Interior 

Gateway Routing Protocol – IGRP, Enhanced Interior Gateway Routing Protocol – EIGRP or 

Open Shortest Path First - OSPF). There are two main router types: dedicated routers and 

routers built from general purpose computers that have more interfaces. The computer routers 

have the advantage of cost and simplicity and can be used for other jobs. Dedicated routers 

are much more efficient and flexible, have much more interfaces and support more protocols 

and medium access types. Dedicated routers are devices specialized for the routing job. Due 

to the specialized hardware and powerfully optimized software, they achieve superior 

performance. They offer a wide range of speeds, physical interfaces and communication 

protocols. Usually these are manufactured by specialized firms (Cisco, Juniper, HPE etc.) 

their operating system is specific and has all the software need for the router to function 

properly. Dedicated routers support almost any transmission medium, used with any 

communication protocol, with a large range of sockets and adaptors. 

 

Taking in consideration the costs for realizing or modifying a network cabling it has been 

proved that once a network has been set in place is better to stay in use as long as possible 

and that it should be able to be used with novel communication technologies. The solution for 

this problem was in the elaboration of the structured cabling concept, defined later through 

several international standards. 



COMPUTER NETWORKS 

 4 

The ISO/IEC 11801 (Europe) and ANSI/TIA-568-C (USA and Canada) standard refer to the 

ways of cabling commercial edifices, specifying the cabling structure, the necessary minimal 

configuration, the categories of cables and components that must be used, ways of 

installation, performance requests that have to be met, acceptable distance limits and other 

parameters, and also ways and methods for testing them. Another problem that is approached 

is the problem of designing the cabling for a much more complex building group, in this way 

a complex project needs to be configured in a hierarchic (tree-like) structure, allowing the 

possibility to add redundant links. The standard specifications refer to some of the following 

aspects: 

• Minimal request for realizing the cabling of a building 

o The cabling topology and allowed distances; 

o Component elements of the cabling; 

o Transmission media used with the needed parameters specification; 

o Vertical and horizontal cabling realization mode; 

o Ways of identifying the cables used; 

o Project documentation. 

• Subsystems and components of the structured cabling system 

o The subsystem from the entrance in the building; 

o The equipment room; 

o The backbone cabling; 

o The telecommunication closet; 

o Horizontal cabling; 

o The work area components. 

 

The cabling topology specified in the ISO/IEC or ANSI/TIA standard is a star, hierarchically 

organized (extended star). The topology center is main distribution facility, the second 

hierarchic level is the intermediary distribution facility afferent to one area edifice, and at the 

lower level is the telecommunication closet related to a floor or a group of rooms. The 

constitutive elements are: 

• The main distribution facility – the distribution center to the other edifices; 

• The intermediary distribution facility – are local to edifices; 

• The telecommunication closet – is represented by the local distribution closets for 

the cables that connect the stations or related to the vertical cabling; 

• The inter-edifice section – identifies the main cables that interconnect the main 

distribution center; 

• The internal section – connects the intermediate commuter with the distribution 

offices; 

• The equipment room – related to a cabling plan with passive and active 

equipments; 

• The entrance infrastructure – for the interfacing of the exterior cabling system 

with the interior one; 

• The work area – the working stations, interconnection cables, external adaptors 

between cables; 

• Intermediate panels – identifies the connection panels for the transmission 

mediums; 

• Terminator blocks – represent the cable mechanical terminators; 

• Communication outlets, cabling adaptors. 



STRUCTURED CABLING 

 5 

 

The usual transmission media are: 

• Twisted cable (category 6 and above); 

• Multimode or single-mode optical fiber; 

 

Types of the connectors used are: 

• RJ-45 connectors for TP cables; 

• LC, SC or ST type connectors for optical fiber; 

 

So, in order to accommodate a much easier and efficient way to manage the network, the 

cabling is structured using concentrators (on different levels). At each level a concentrator 

must be implemented, and if the covered area is too large than several concentrators can be 

used. At the working stations the UTP cable is ended in RJ-45 connectors, and at the 

concentrator in boxes or patch panels. The cumulative length of the cable and UTP patch cord 

used for connecting a computer at the equipment from the concentrator is not allowed to be 

greater than 100m. In the floor concentrator the switches or other equipments are situated. 

 

The advantages concentrators offer (and also the topologies based on concentrators) are: 

• possibility to extend or modify the cable system; 

• usage of different ports, adapted at different types of cables; 

• possibility of a central monitoring of the activity and the network traffic. 

 

Types of concentrators: 

• Active concentrators – that regenerates and transmits the signal; 

• Passive concentrators – can be considered the cabling panels or the connection 

blocks representing only connection points without any signal amplification. Also 

there are hybrid concentrators that allow the usage for connection of different 

cable types. 

 

The cables must be labeled according to the standard, the ventilation must be sufficient to 

prevent equipment overheating, security measures must be set and fire protection must be 

provided. The floor concentrator is connected to the building concentrators, link that can be 

realized with a category 6 cable or with multi-mode optical fiber. Additionally, redundant 

links can be added between the floor concentrators and between the buildings. The building 

group concentrator is connected to the buildings concentrators with multimode or single-

mode optical fiber. Installation standards are referring to the cable installation (maximum 

tension allowed on the cable, mechanical connection type), masked horizontal cabling, 

ground protection, and the specific protection of the optical fibers cables. 

 



COMPUTER NETWORKS 

 6 

3. Lab activity 

 
3.1 The topologies of the computer networks are going to be discussed underlining their 

advantages and disadvantages. 

3.2 The function of the following network devices will be discussed: network interface card, 

concentrator, repeater, bridge, switch and router. 

3.3 Aspects of the structured cabling and ISO-IEC/ANSI-TIA standard will be discussed. 

3.4 Floor cabling will be analyzed, and the elements of the structured cabling will be pointed 

out. 

3.5 Identify and analyze the structured cabling design at your workplace/home. How is your 

network connected to the WAN/ISP (what type of cable, device, etc)? How is your device 

connected to the internal network? 

 

 

 

 

Notes 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 



reading content from C:\Users\Asus\Desktop\Bee\See\CVGenenral.pdf


0770644019

braica.patricia@yahoo.com

Satu Mare / Cluj Napoca,
Romania

Computer Science Student
Technical University of Cluj-Napoca
expected graduation year 2026

EDUCATION

ABOUT ME

MOST RELEVANT COURSES

English C1
German B1

LANGUAGE

PATRICIA MARIA BRAICA
S T U D E N T

Completing the Fundamental Algorithms and Data Structures in C
course set me on the path to efficiency in programming.

Fundamental Algorithms in C

I successfully completed an Object-Oriented Programming (OOP)
course using Java, which included a mandatory project.

OOP on Java and C++

Through the completion of an SQL course, I acquired the essential
skills required for effective database management.

SQL programming

Romanian (Native)

linkedin.com/in/patricia-
maria-braica-00534b298

Successfully completing the Logic Design of Circuits course has
been instrumental in building a strong foundation for my
understanding of hardware systems.

Logic Design of Circuits, Assembly, VHDL

EXPERIENCE IN IT
I created a Java applications utilizing the JavaFX framework, seamlessly connected to a database using
SQL, and enhanced the user interface with CSS(My projects: Order app for a backery simulation,
Polynomial Calculator, Queue Management Simulator in real time using multithreading, Order management  
simulation using Reflection techiques. )
I successfully implemented a VHDL project on the Nexys 4 board, featuring the display of eight
dynamic animations conveying a message, resembling a digital advertisement.

Through the completion of an SQL course, I acquired the essential skills required for
effective database management.

PROGRAMMING LANGUAGES 
C,C++, Java, SQL, VHDL, Assembly x86, Arduino, Haskell, Git Bash, LaTeX, Python, Prolog

Attended domain related competitions: CodeRun competiotion by BEST, in Cluj-Napoca,
WIDS(Women in Data Science) - predict ADHD in women, on Kagggle.

Github and GitLab repos:
https://github.com/Patriciadah
https://pastebin.com/UtuJW7m2

Organized, results-driven, and experienced in structuring learning
programs. Studying in English enhances my understanding of technical
terms. Broad knowledge in computer science: software engineering, AI,
full-stack development, cybersecurity and more. Strong vision for
teamwork and project execution.

Implemented PDDL-like theorem proving to detect deception in
Among Us. Designed AI solutions for Sliding Tile Puzzle and All Lights
Out using automated planning. Integrated AI into the Pac-Man
framework for decision-making and pathfinding, leveraging
adversarial search.

AI Technologies in Python

https://www.linkedin.com/in/patricia-maria-braica-00534b298
https://www.linkedin.com/in/patricia-maria-braica-00534b298
https://github.com/Patriciadah
https://pastebin.com/UtuJW7m2


reading content from C:\Users\Asus\Desktop\Bee\See\EY.txt

PE@!HxG433M4hTyt

reading content from C:\Users\Asus\Desktop\Bee\See\FileIndexRowMapper.java

package com.example.searchengine_ver1.backendapi.repository;

import com.example.searchengine_ver1.model.FileIndex;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;

public class FileIndexRowMapper implements RowMapper<FileIndex> {
    @Override
    public FileIndex mapRow(ResultSet rs, int rowNum) throws SQLException {
        return new FileIndex(
                rs.getLong("id"),
                rs.getString("file_name"),
                rs.getString("file_path"),
                rs.getString("file_type"),
                rs.getString("file_content"),
                rs.getTimestamp("indexed_at").toLocalDateTime()
        );
    }
}


reading content from C:\Users\Asus\Desktop\Bee\See\FileIndexService.java

package com.example.searchengine_ver1.backendapi.service;

import com.example.searchengine_ver1.model.FileIndex;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FileIndexService {
    private final FileIndexRepository fileIndexRepository;

    @Autowired
    public FileIndexService(FileIndexRepository fileIndexRepository) {
        this.fileIndexRepository = fileIndexRepository;
    }

    public void indexFiles(List<FileIndex> files) {
        fileIndexRepository.saveAll(files);
    }

    public List<FileIndex> searchFiles(String query) {
        return fileIndexRepository.searchFiles(query);
    }
}


reading content from C:\Users\Asus\Desktop\Bee\See\files_border_tracing.zip


gray_background.bmp


horizontal_ellipse.bmp


object_holes.bmp


skew_ellipse.bmp


star.bmp


star_R90.bmp


triangle_down.bmp


triangle_up.bmp


vertical_ellipse.bmp


reconstruct.txt
159 175
3149
5 4 4 4 5 4 4 5 4 5 4 5 4 5 5 5 4 5 6 5 5 5 6 5 5 6 5 6 6 5 6 6 5 6 6 6 6 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 6 6 6 6 7 6 6 6 7 6 7 6 7 6 7 7 7 6 7 7 0 7 7 7 0 7 7 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 2 3 3 2 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 6 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 3 2 3 2 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 7 7 6 7 7 6 7 7 6 7 7 6 7 7 6 7 6 7 7 6 7 7 6 7 7 6 7 7 6 7 7 6 6 5 5 6 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 2 1 1 2 1 7 6 7 7 6 7 6 7 7 6 7 7 6 7 7 6 7 7 6 7 7 6 7 6 7 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 7 6 7 7 6 7 6 7 7 6 7 7 6 7 6 7 7 6 7 6 7 7 6 7 7 6 7 6 7 7 6 7 7 6 7 6 7 7 6 7 7 6 7 6 7 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 3 2 3 2 3 3 2 3 2 3 3 2 3 3 2 3 2 3 3 2 3 3 2 3 2 3 3 2 3 3 2 3 2 3 3 2 3 2 3 3 2 3 3 2 3 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 1 1 0 1 1 1 1 1 1 2 1 1 2 1 2 1 2 2 1 2 4 3 4 4 3 4 4 4 3 4 4 3 4 6 5 6 6 5 6 5 5 6 5 5 5 4 5 4 5 4 5 4 4 4 4 4 4 4 4 3 4 4 3 4 3 4 3 3 3 3 2 3 2 3 2 2 3 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 1 2 1 2 1 1 1 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 7 0 0 7 0 7 7 7 7 7 6 7 6 7 6 0 1 0 0 0 0 1 0 0 0 0 1 0 2 3 2 3 2 2 3 3 2 3 3 3 3 3 3 4 3 3 4 3 4 4 3 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 



reading content from C:\Users\Asus\Desktop\Bee\See\fisa_tabele (1).docx

Fisa de lucru – Tabele

Aplicatia 1

1. Creaţi un document Word nou, cu următoarele setări de pagină: format A4, margini: dreapta 1.75 cm, stânga 1.62 cm, sus 2.04 cm, jos 2.37 cm, orientarea paginii orizontală(landscape).
 realizaţi un antet aliniat la stânga, care să conţină “Date elevi” ;
 numerotarea paginii: stânga – sus utilizând cifre romane cu dimensiunea de 14, bold, fontul Tahoma.

1. Creati un tabel cu urmatoarea structura :
	
	Nr. crt.
	Numele si Prenumele
	Disciplina

	
	
	Matematica
	Lb. Romana
	Informatica

	
	
	Note
	Media
note 
	Teza
	Media 
finală
	Note
	Teza
	Note
	Teza

	
	
	N1
	N2
	
	
	
	N1
	N2
	
	N1
	N2
	

	1.
	Popescu Ion
	7
	8
	
	5
	
	5
	7
	6
	10
	8
	10

	
	
	
	
	
	
	
	
	
	
	
	
	



 Cerinte :
1. pentru tabel conturul exterior:linie dubla,grosime linie-4 ½ pt, culoare verde
1. -liniile dintre coloane sa fie punctate de culoare albastru si grosime 3 pt
1. Adaugati si pentru disciplinele Lb. Romana si Informatica coloanele Media note și Media finală, ca si la Matematica
1. Completati coloana Media note ca fiind (N1+N2)/2 iar Media finală dupa formula (3*media note +teza)/4
1.  adaugati inca 5 linii pe care le completati cu date
1. Sortati tabelul descrescator dupa nume


Aplicatia 2
Realizati urmatoarele tabele:
	
	INTERNET
	INTERNET
	Cea mai mare retea de informatii si comunicare din lume

	
	TCP/IP
	Protocol prin care retelele comunica intre ele in cadrul retelei mari

	
	URL
	Adresa unei pagini de Internet

	
	Adresa IP
	Adresea unui calculator in Internet

	
	ISP
	Furnizor de servicii Internet (firma care faciliteaza accesul la Internet)



	VOCABULAR

	Site Web
	Loc in www, unde se gasesc mai multe pagini web

	Pagina Web
	In limba engleza web-page; o pagina in www

	Pagina de start (homepage)
	Pagina principala a unui site web




	VOCABULAR

	e-mail
	Electronic mail; posta electronica; metoda de transmitere a mesajelor prin Internet

	attachment
	Fisiere atasate mesajului si trimise impreuna cu acesta





	
O adresa de e-mail (de exemplu: operarepc_1@yahoo.com) este alcatuita din urmatoarele componente: 


	Numele de utilizator
	Numele de utilizator sub care v-at inregistat in serverul de mail (Operarepc_1)

	@
	At, cunoscut si sub denumirea coada de maimuta

	domeniu
	Numele serverului de e-mail sau al furnizorului, care are in administrare casuta postala (Yahoo.com)




	
Alcatuirea e-mail-urilor


	Butonul Compose




	To
	Aici trebuie introdusa adresa destinatarului. 
E-mail-urile cu adresa gresita se intorc cu mesaj de eroare.

	Cc (Carbon copy – copie)
	Daca aici este introdusa o adresa de e-mail, mesajul este transmis si acelei persoane.

	Bcc (Blind carbon copy – copie oarba)
	La fel ca la Cc, numai ca destinatarul nu vede adresa celeilalte persoane careia i-a mai fost transmis e-mail-ul. 

	Subject (subiect)
	Aici scrieti un cuvant cheie (titlul care reprezinta esenta mesajului

	Corpul mesajului
	In acest spatiu se scrie textul. 

	Butonul Send





Aplicatia 3

Realizati in Ms. Word tabelul de mai jos urmand ca pentru fiecare simbol „?” sa inseram formula de calcul necesara fiecarei celule






image1.png


reading content from C:\Users\Asus\Desktop\Bee\See\fisa_tabele.docx

Fisa de lucru – Tabele

Aplicatia 1

1. Creaţi un document Word nou, cu următoarele setări de pagină: format A4, margini: dreapta 1.75 cm, stânga 1.62 cm, sus 2.04 cm, jos 2.37 cm, orientarea paginii orizontală(landscape).
 realizaţi un antet aliniat la stânga, care să conţină “Date elevi” ;
 numerotarea paginii: stânga – sus utilizând cifre romane cu dimensiunea de 14, bold, fontul Tahoma.

1. Creati un tabel cu urmatoarea structura :
	
	Nr. crt.
	Numele si Prenumele
	Disciplina

	
	
	Matematica
	Lb. Romana
	Informatica

	
	
	Note
	Media
note 
	Teza
	Media 
finală
	Note
	Teza
	Note
	Teza

	
	
	N1
	N2
	
	
	
	N1
	N2
	
	N1
	N2
	

	1.
	Popescu Ion
	7
	8
	
	5
	
	5
	7
	6
	10
	8
	10

	
	
	
	
	
	
	
	
	
	
	
	
	



 Cerinte :
1. pentru tabel conturul exterior:linie dubla,grosime linie-4 ½ pt, culoare verde
1. -liniile dintre coloane sa fie punctate de culoare albastru si grosime 3 pt
1. Adaugati si pentru disciplinele Lb. Romana si Informatica coloanele Media note și Media finală, ca si la Matematica
1. Completati coloana Media note ca fiind (N1+N2)/2 iar Media finală dupa formula (3*media note +teza)/4
1.  adaugati inca 5 linii pe care le completati cu date
1. Sortati tabelul descrescator dupa nume


Aplicatia 2
Realizati urmatoarele tabele:
	
	INTERNET
	INTERNET
	Cea mai mare retea de informatii si comunicare din lume

	
	TCP/IP
	Protocol prin care retelele comunica intre ele in cadrul retelei mari

	
	URL
	Adresa unei pagini de Internet

	
	Adresa IP
	Adresea unui calculator in Internet

	
	ISP
	Furnizor de servicii Internet (firma care faciliteaza accesul la Internet)



	VOCABULAR

	Site Web
	Loc in www, unde se gasesc mai multe pagini web

	Pagina Web
	In limba engleza web-page; o pagina in www

	Pagina de start (homepage)
	Pagina principala a unui site web




	VOCABULAR

	e-mail
	Electronic mail; posta electronica; metoda de transmitere a mesajelor prin Internet

	attachment
	Fisiere atasate mesajului si trimise impreuna cu acesta





	
O adresa de e-mail (de exemplu: operarepc_1@yahoo.com) este alcatuita din urmatoarele componente: 


	Numele de utilizator
	Numele de utilizator sub care v-at inregistat in serverul de mail (Operarepc_1)

	@
	At, cunoscut si sub denumirea coada de maimuta

	domeniu
	Numele serverului de e-mail sau al furnizorului, care are in administrare casuta postala (Yahoo.com)




	
Alcatuirea e-mail-urilor


	Butonul Compose




	To
	Aici trebuie introdusa adresa destinatarului. 
E-mail-urile cu adresa gresita se intorc cu mesaj de eroare.

	Cc (Carbon copy – copie)
	Daca aici este introdusa o adresa de e-mail, mesajul este transmis si acelei persoane.

	Bcc (Blind carbon copy – copie oarba)
	La fel ca la Cc, numai ca destinatarul nu vede adresa celeilalte persoane careia i-a mai fost transmis e-mail-ul. 

	Subject (subiect)
	Aici scrieti un cuvant cheie (titlul care reprezinta esenta mesajului

	Corpul mesajului
	In acest spatiu se scrie textul. 

	Butonul Send





Aplicatia 3

Realizati in Ms. Word tabelul de mai jos urmand ca pentru fiecare simbol „?” sa inseram formula de calcul necesara fiecarei celule






image1.png


reading content from C:\Users\Asus\Desktop\Bee\See\geometrical_features_images.zip


Single Object/skew_line.bmp


Single Object/horizontal_line.bmp


Single Object/vertical_line.bmp


Single Object/skew_ellipse.bmp


Single Object/horizontal_ellipse.bmp


Single Object/vertical_ellipse.bmp


Single Object/vertical_ellipse_Z150%.bmp


Single Object/star_R90.bmp


Single Object/star.bmp


Single Object/star_Z125%.bmp


Single Object/triangle_down.bmp


Single Object/triangle_up.bmp


Multiple Objects/geometrical_features.bmp


reading content from C:\Users\Asus\Desktop\Bee\See\lab-05.zip


lab-05/decision_trees.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:20.649366400Z",
     "start_time": "2025-03-26T12:20:20.308938400Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#for graphviz install python-graphviz:\n",
    "#conda install python-graphviz\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true,
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:20.853102400Z",
     "start_time": "2025-03-26T12:20:20.311337400Z"
    }
   },
   "outputs": [],
   "source": [
    "input_file = \"data/restaurant.csv\"\n",
    "# input_file = \"data/restaurant100v3.csv\"\n",
    "\n",
    "# comma delimited is the default\n",
    "data = pd.read_csv(input_file, header = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.089705200Z",
     "start_time": "2025-03-26T12:20:20.323978700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    Alt  Bar  Fri  Hyn   Pat Price Rain  Res     Type    Est WillWait\n0   Yes   No   No  Yes  Some   $$$   No  Yes   French   0–10      Yes\n1   Yes   No   No  Yes  Full     $   No   No     Thai  30–60       No\n2    No  Yes   No   No  Some     $   No   No   Burger   0–10      Yes\n3   Yes   No  Yes  Yes  Full     $  Yes   No     Thai  10–30      Yes\n4   Yes   No  Yes   No  Full   $$$   No  Yes   French    >60       No\n..  ...  ...  ...  ...   ...   ...  ...  ...      ...    ...      ...\n95   No  Yes  Yes  Yes  Full     $  Yes   No   Burger  30–60      Yes\n96  Yes  Yes  Yes   No  Full    $$   No   No   Burger    >60       No\n97   No  Yes  Yes  Yes  Full     $  Yes  Yes  Italian  10–30       No\n98  Yes   No   No   No   NaN    $$  Yes   No     Thai   0–10       No\n99   No  Yes  Yes  Yes  Full    $$  Yes   No   Burger  30–60      Yes\n\n[100 rows x 11 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt</th>\n      <th>Bar</th>\n      <th>Fri</th>\n      <th>Hyn</th>\n      <th>Pat</th>\n      <th>Price</th>\n      <th>Rain</th>\n      <th>Res</th>\n      <th>Type</th>\n      <th>Est</th>\n      <th>WillWait</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Some</td>\n      <td>$$$</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>French</td>\n      <td>0–10</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Thai</td>\n      <td>30–60</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Some</td>\n      <td>$</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Burger</td>\n      <td>0–10</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Thai</td>\n      <td>10–30</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Full</td>\n      <td>$$$</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>French</td>\n      <td>&gt;60</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Burger</td>\n      <td>30–60</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Full</td>\n      <td>$$</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Burger</td>\n      <td>&gt;60</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Italian</td>\n      <td>10–30</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>$$</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Thai</td>\n      <td>0–10</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$$</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Burger</td>\n      <td>30–60</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 11 columns</p>\n</div>"
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.352486800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(100, 11)"
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.365469300Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Index(['Alt', 'Bar', 'Fri', 'Hyn', 'Pat', 'Price', 'Rain', 'Res', 'Type',\n       'Est', 'WillWait'],\n      dtype='object')"
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.397138200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "   Alt  Bar  Fri  Hyn   Pat Price Rain  Res    Type    Est WillWait\n0  Yes   No   No  Yes  Some   $$$   No  Yes  French   0–10      Yes\n1  Yes   No   No  Yes  Full     $   No   No    Thai  30–60       No\n2   No  Yes   No   No  Some     $   No   No  Burger   0–10      Yes\n3  Yes   No  Yes  Yes  Full     $  Yes   No    Thai  10–30      Yes\n4  Yes   No  Yes   No  Full   $$$   No  Yes  French    >60       No",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt</th>\n      <th>Bar</th>\n      <th>Fri</th>\n      <th>Hyn</th>\n      <th>Pat</th>\n      <th>Price</th>\n      <th>Rain</th>\n      <th>Res</th>\n      <th>Type</th>\n      <th>Est</th>\n      <th>WillWait</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Some</td>\n      <td>$$$</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>French</td>\n      <td>0–10</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Thai</td>\n      <td>30–60</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Some</td>\n      <td>$</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Burger</td>\n      <td>0–10</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Full</td>\n      <td>$</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Thai</td>\n      <td>10–30</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Full</td>\n      <td>$$$</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>French</td>\n      <td>&gt;60</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.400168900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Alt         object\nBar         object\nFri         object\nHyn         object\nPat         object\nPrice       object\nRain        object\nRes         object\nType        object\nEst         object\nWillWait    object\ndtype: object"
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.413095900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array(['Alt', 'Bar', 'Fri', 'Hyn', 'Pat', 'Price', 'Rain', 'Res', 'Type',\n       'Est', 'WillWait'], dtype=object)"
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.428947700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([1, 3, 0, 3, 1, 2, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 2, 0, 3, 0, 2,\n       3, 0, 1, 3, 0, 3, 1, 2, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 2, 0, 3,\n       0, 2, 3, 0, 1, 3, 0, 3, 1, 2, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 2,\n       0, 3, 0, 2, 3, 0, 1, 3, 0, 3, 1, 2, 0, 3, 0, 2, 3, 0, 1, 3, 0, 3,\n       1, 2, 0, 3, 0, 2, 3, 0, 0, 2, 3, 0])"
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(data['Type']) # only for one attribute\n",
    "data_encoded = le.transform(data['Type'])\n",
    "data_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.105057900Z",
     "start_time": "2025-03-26T12:20:20.435868300Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array(['Burger', 'French', 'Italian', 'Thai'], dtype=object)"
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "le.classes_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.150275400Z",
     "start_time": "2025-03-26T12:20:20.446589400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    Alt  Bar  Fri  Hyn  Pat  Price  Rain  Res  Type  Est  WillWait\n0     1    0    0    1    1      2     0    1     1    0         1\n1     1    0    0    1    0      0     0    0     3    2         0\n2     0    1    0    0    1      0     0    0     0    0         1\n3     1    0    1    1    0      0     1    0     3    1         1\n4     1    0    1    0    0      2     0    1     1    3         0\n..  ...  ...  ...  ...  ...    ...   ...  ...   ...  ...       ...\n95    0    1    1    1    0      0     1    0     0    2         1\n96    1    1    1    0    0      1     0    0     0    3         0\n97    0    1    1    1    0      0     1    1     2    1         0\n98    1    0    0    0    2      1     1    0     3    0         0\n99    0    1    1    1    0      1     1    0     0    2         1\n\n[100 rows x 11 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt</th>\n      <th>Bar</th>\n      <th>Fri</th>\n      <th>Hyn</th>\n      <th>Pat</th>\n      <th>Price</th>\n      <th>Rain</th>\n      <th>Res</th>\n      <th>Type</th>\n      <th>Est</th>\n      <th>WillWait</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 11 columns</p>\n</div>"
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_encoded = data.apply(le.fit_transform) # for all the attributes\n",
    "data_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.152946400Z",
     "start_time": "2025-03-26T12:20:20.471607500Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn import tree\n",
    "clf1 = tree.DecisionTreeClassifier(criterion=\"entropy\")\n",
    "x = data_encoded[data.columns.drop('WillWait')]\n",
    "y = data_encoded['WillWait']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.152946400Z",
     "start_time": "2025-03-26T12:20:20.481912500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    Alt  Bar  Fri  Hyn  Pat  Price  Rain  Res  Type  Est\n0     1    0    0    1    1      2     0    1     1    0\n1     1    0    0    1    0      0     0    0     3    2\n2     0    1    0    0    1      0     0    0     0    0\n3     1    0    1    1    0      0     1    0     3    1\n4     1    0    1    0    0      2     0    1     1    3\n..  ...  ...  ...  ...  ...    ...   ...  ...   ...  ...\n95    0    1    1    1    0      0     1    0     0    2\n96    1    1    1    0    0      1     0    0     0    3\n97    0    1    1    1    0      0     1    1     2    1\n98    1    0    0    0    2      1     1    0     3    0\n99    0    1    1    1    0      1     1    0     0    2\n\n[100 rows x 10 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt</th>\n      <th>Bar</th>\n      <th>Fri</th>\n      <th>Hyn</th>\n      <th>Pat</th>\n      <th>Price</th>\n      <th>Rain</th>\n      <th>Res</th>\n      <th>Type</th>\n      <th>Est</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 10 columns</p>\n</div>"
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.272933300Z",
     "start_time": "2025-03-26T12:20:20.524367100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 12.2.1 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"602pt\" height=\"598pt\"\n viewBox=\"0.00 0.00 601.50 598.25\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 594.25)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-594.25 597.5,-594.25 597.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"363.25,-590.25 254.25,-590.25 254.25,-519.25 363.25,-519.25 363.25,-590.25\"/>\n<text text-anchor=\"middle\" x=\"308.75\" y=\"-572.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Hyn &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"308.75\" y=\"-557.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"308.75\" y=\"-541.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 100</text>\n<text text-anchor=\"middle\" x=\"308.75\" y=\"-525.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [51, 49]</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"300,-483.25 189.5,-483.25 189.5,-412.25 300,-412.25 300,-483.25\"/>\n<text text-anchor=\"middle\" x=\"244.75\" y=\"-465.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Est &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"244.75\" y=\"-450.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.702</text>\n<text text-anchor=\"middle\" x=\"244.75\" y=\"-434.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 42</text>\n<text text-anchor=\"middle\" x=\"244.75\" y=\"-418.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [34, 8]</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M287.44,-518.79C282.47,-510.64 277.12,-501.86 271.94,-493.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.95,-491.57 266.76,-484.85 268.97,-495.21 274.95,-491.57\"/>\n<text text-anchor=\"middle\" x=\"260.07\" y=\"-502.43\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"429,-483.25 318.5,-483.25 318.5,-412.25 429,-412.25 429,-483.25\"/>\n<text text-anchor=\"middle\" x=\"373.75\" y=\"-465.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Est &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"373.75\" y=\"-450.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.873</text>\n<text text-anchor=\"middle\" x=\"373.75\" y=\"-434.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 58</text>\n<text text-anchor=\"middle\" x=\"373.75\" y=\"-418.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 41]</text>\n</g>\n<!-- 0&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>0&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M330.39,-518.79C335.49,-510.55 340.99,-501.67 346.31,-493.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"349.12,-495.19 351.4,-484.85 343.16,-491.51 349.12,-495.19\"/>\n<text text-anchor=\"middle\" x=\"357.93\" y=\"-502.47\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"179,-376.25 68.5,-376.25 68.5,-305.25 179,-305.25 179,-376.25\"/>\n<text text-anchor=\"middle\" x=\"123.75\" y=\"-358.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Pat &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"123.75\" y=\"-343.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.904</text>\n<text text-anchor=\"middle\" x=\"123.75\" y=\"-327.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 25</text>\n<text text-anchor=\"middle\" x=\"123.75\" y=\"-311.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 8]</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M204.46,-411.79C194.15,-402.84 182.96,-393.13 172.29,-383.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"174.86,-381.46 165.01,-377.55 170.27,-386.75 174.86,-381.46\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"298.5,-368.38 197,-368.38 197,-313.12 298.5,-313.12 298.5,-368.38\"/>\n<text text-anchor=\"middle\" x=\"247.75\" y=\"-351.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"247.75\" y=\"-335.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n<text text-anchor=\"middle\" x=\"247.75\" y=\"-319.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 0]</text>\n</g>\n<!-- 1&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>1&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M245.75,-411.79C246.04,-401.56 246.36,-390.32 246.66,-379.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"250.15,-380.2 246.94,-370.1 243.16,-380 250.15,-380.2\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"127,-269.25 16.5,-269.25 16.5,-198.25 127,-198.25 127,-269.25\"/>\n<text text-anchor=\"middle\" x=\"71.75\" y=\"-251.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Pat &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"71.75\" y=\"-236.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.985</text>\n<text text-anchor=\"middle\" x=\"71.75\" y=\"-220.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n<text text-anchor=\"middle\" x=\"71.75\" y=\"-204.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [6, 8]</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M106.43,-304.79C102.44,-296.73 98.14,-288.05 93.98,-279.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"97.24,-278.33 89.66,-270.92 90.96,-281.43 97.24,-278.33\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"246.12,-261.38 145.38,-261.38 145.38,-206.12 246.12,-206.12 246.12,-261.38\"/>\n<text text-anchor=\"middle\" x=\"195.75\" y=\"-244.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"195.75\" y=\"-228.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n<text text-anchor=\"middle\" x=\"195.75\" y=\"-212.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [11, 0]</text>\n</g>\n<!-- 2&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>2&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M147.72,-304.79C155.19,-293.9 163.44,-281.87 170.96,-270.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"173.72,-273.06 176.49,-262.84 167.95,-269.11 173.72,-273.06\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"95.5,-154.38 0,-154.38 0,-99.12 95.5,-99.12 95.5,-154.38\"/>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-137.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-121.33\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-105.58\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M63.76,-197.79C61.4,-187.45 58.8,-176.08 56.39,-165.57\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"59.86,-165.03 54.22,-156.07 53.04,-166.59 59.86,-165.03\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"224,-162.25 113.5,-162.25 113.5,-91.25 224,-91.25 224,-162.25\"/>\n<text text-anchor=\"middle\" x=\"168.75\" y=\"-144.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Type &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"168.75\" y=\"-129.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.845</text>\n<text text-anchor=\"middle\" x=\"168.75\" y=\"-113.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n<text text-anchor=\"middle\" x=\"168.75\" y=\"-97.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 8]</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M104.05,-197.79C111.98,-189.2 120.57,-179.9 128.82,-170.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131.35,-173.39 135.56,-163.67 126.21,-168.64 131.35,-173.39\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"146.5,-55.25 51,-55.25 51,0 146.5,0 146.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"98.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"98.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"98.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 8]</text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M143.68,-90.96C137.58,-82.5 131.04,-73.43 124.89,-64.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.73,-62.85 119.04,-56.78 122.05,-66.94 127.73,-62.85\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"260.5,-55.25 165,-55.25 165,0 260.5,0 260.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"212.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"212.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n<text text-anchor=\"middle\" x=\"212.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M184.51,-90.96C188.18,-82.86 192.1,-74.2 195.82,-66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"198.99,-67.49 199.93,-56.93 192.61,-64.6 198.99,-67.49\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"422.5,-368.38 321,-368.38 321,-313.12 422.5,-313.12 422.5,-368.38\"/>\n<text text-anchor=\"middle\" x=\"371.75\" y=\"-351.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"371.75\" y=\"-335.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 24</text>\n<text text-anchor=\"middle\" x=\"371.75\" y=\"-319.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 24]</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M373.08,-411.79C372.89,-401.56 372.68,-390.32 372.48,-379.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"375.98,-380.03 372.29,-370.1 368.98,-380.17 375.98,-380.03\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"549.25,-376.25 440.25,-376.25 440.25,-305.25 549.25,-305.25 549.25,-376.25\"/>\n<text text-anchor=\"middle\" x=\"494.75\" y=\"-358.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Type &lt;= 1.0</text>\n<text text-anchor=\"middle\" x=\"494.75\" y=\"-343.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"494.75\" y=\"-327.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 34</text>\n<text text-anchor=\"middle\" x=\"494.75\" y=\"-311.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 17]</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M414.04,-411.79C424.35,-402.84 435.54,-393.13 446.21,-383.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"448.23,-386.75 453.49,-377.55 443.64,-381.46 448.23,-386.75\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"455.5,-261.38 360,-261.38 360,-206.12 455.5,-206.12 455.5,-261.38\"/>\n<text text-anchor=\"middle\" x=\"407.75\" y=\"-244.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"407.75\" y=\"-228.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n<text text-anchor=\"middle\" x=\"407.75\" y=\"-212.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 9]</text>\n</g>\n<!-- 12&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>12&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M465.78,-304.79C456.58,-293.68 446.39,-281.38 437.15,-270.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440.03,-268.22 430.95,-262.76 434.64,-272.69 440.03,-268.22\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"584,-269.25 473.5,-269.25 473.5,-198.25 584,-198.25 584,-269.25\"/>\n<text text-anchor=\"middle\" x=\"528.75\" y=\"-251.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Res &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"528.75\" y=\"-236.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.904</text>\n<text text-anchor=\"middle\" x=\"528.75\" y=\"-220.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 25</text>\n<text text-anchor=\"middle\" x=\"528.75\" y=\"-204.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 8]</text>\n</g>\n<!-- 12&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>12&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M506.07,-304.79C508.59,-296.99 511.31,-288.62 513.95,-280.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"517.26,-281.59 517.01,-271 510.6,-279.44 517.26,-281.59\"/>\n</g>\n<!-- 15 -->\n<g id=\"node16\" class=\"node\">\n<title>15</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"479.62,-162.25 381.88,-162.25 381.88,-91.25 479.62,-91.25 479.62,-162.25\"/>\n<text text-anchor=\"middle\" x=\"430.75\" y=\"-144.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Est &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"430.75\" y=\"-129.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"430.75\" y=\"-113.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n<text text-anchor=\"middle\" x=\"430.75\" y=\"-97.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 8]</text>\n</g>\n<!-- 14&#45;&gt;15 -->\n<g id=\"edge15\" class=\"edge\">\n<title>14&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"black\" d=\"M496.12,-197.79C488.1,-189.2 479.42,-179.9 471.09,-170.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"473.65,-168.59 464.27,-163.67 468.54,-173.37 473.65,-168.59\"/>\n</g>\n<!-- 18 -->\n<g id=\"node19\" class=\"node\">\n<title>18</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"593.5,-154.38 498,-154.38 498,-99.12 593.5,-99.12 593.5,-154.38\"/>\n<text text-anchor=\"middle\" x=\"545.75\" y=\"-137.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"545.75\" y=\"-121.33\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n<text text-anchor=\"middle\" x=\"545.75\" y=\"-105.58\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 0]</text>\n</g>\n<!-- 14&#45;&gt;18 -->\n<g id=\"edge18\" class=\"edge\">\n<title>14&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"black\" d=\"M534.41,-197.79C536.07,-187.56 537.89,-176.32 539.57,-165.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"543.02,-166.51 541.16,-156.08 536.11,-165.4 543.02,-166.51\"/>\n</g>\n<!-- 16 -->\n<g id=\"node17\" class=\"node\">\n<title>16</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"382.5,-55.25 287,-55.25 287,0 382.5,0 382.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"334.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"334.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"334.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 8]</text>\n</g>\n<!-- 15&#45;&gt;16 -->\n<g id=\"edge16\" class=\"edge\">\n<title>15&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"black\" d=\"M396.36,-90.96C387.55,-82.04 378.07,-72.45 369.24,-63.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"371.95,-61.28 362.43,-56.63 366.97,-66.2 371.95,-61.28\"/>\n</g>\n<!-- 17 -->\n<g id=\"node18\" class=\"node\">\n<title>17</title>\n<polygon fill=\"none\" stroke=\"black\" points=\"496.5,-55.25 401,-55.25 401,0 496.5,0 496.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"448.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"448.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"448.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 0]</text>\n</g>\n<!-- 15&#45;&gt;17 -->\n<g id=\"edge17\" class=\"edge\">\n<title>15&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"black\" d=\"M437.2,-90.96C438.65,-83.13 440.19,-74.79 441.67,-66.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"445.1,-67.51 443.48,-57.04 438.22,-66.24 445.1,-67.51\"/>\n</g>\n</g>\n</svg>\n",
      "text/plain": "<graphviz.sources.Source at 0x1f1fb0bb820>"
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1.fit(x,y)\n",
    "import graphviz\n",
    "dot_data = tree.export_graphviz(clf1, out_file = None, feature_names= x.columns)\n",
    "graph1 = graphviz.Source(dot_data)\n",
    "graph1\n",
    "#graph.render(\"restaurant\") # save it to pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.398443200Z",
     "start_time": "2025-03-26T12:20:21.097690600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    Alt_No  Alt_Yes  Bar_No  Bar_Yes  Fri_No  Fri_Yes  Hyn_No  Hyn_Yes  \\\n0    False     True    True    False    True    False   False     True   \n1    False     True    True    False    True    False   False     True   \n2     True    False   False     True    True    False    True    False   \n3    False     True    True    False   False     True   False     True   \n4    False     True    True    False   False     True    True    False   \n..     ...      ...     ...      ...     ...      ...     ...      ...   \n95    True    False   False     True   False     True   False     True   \n96   False     True   False     True   False     True    True    False   \n97    True    False   False     True   False     True   False     True   \n98   False     True    True    False    True    False    True    False   \n99    True    False   False     True   False     True   False     True   \n\n    Pat_Full  Pat_Some  ...  Type_Burger  Type_French  Type_Italian  \\\n0      False      True  ...        False         True         False   \n1       True     False  ...        False        False         False   \n2      False      True  ...         True        False         False   \n3       True     False  ...        False        False         False   \n4       True     False  ...        False         True         False   \n..       ...       ...  ...          ...          ...           ...   \n95      True     False  ...         True        False         False   \n96      True     False  ...         True        False         False   \n97      True     False  ...        False        False          True   \n98     False     False  ...        False        False         False   \n99      True     False  ...         True        False         False   \n\n    Type_Thai  Est_0–10  Est_10–30  Est_30–60  Est_>60  WillWait_No  \\\n0       False      True      False      False    False        False   \n1        True     False      False       True    False         True   \n2       False      True      False      False    False        False   \n3        True     False       True      False    False        False   \n4       False     False      False      False     True         True   \n..        ...       ...        ...        ...      ...          ...   \n95      False     False      False       True    False        False   \n96      False     False      False      False     True         True   \n97      False     False       True      False    False         True   \n98       True      True      False      False    False         True   \n99      False     False      False       True    False        False   \n\n    WillWait_Yes  \n0           True  \n1          False  \n2           True  \n3           True  \n4          False  \n..           ...  \n95          True  \n96         False  \n97         False  \n98         False  \n99          True  \n\n[100 rows x 27 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt_No</th>\n      <th>Alt_Yes</th>\n      <th>Bar_No</th>\n      <th>Bar_Yes</th>\n      <th>Fri_No</th>\n      <th>Fri_Yes</th>\n      <th>Hyn_No</th>\n      <th>Hyn_Yes</th>\n      <th>Pat_Full</th>\n      <th>Pat_Some</th>\n      <th>...</th>\n      <th>Type_Burger</th>\n      <th>Type_French</th>\n      <th>Type_Italian</th>\n      <th>Type_Thai</th>\n      <th>Est_0–10</th>\n      <th>Est_10–30</th>\n      <th>Est_30–60</th>\n      <th>Est_&gt;60</th>\n      <th>WillWait_No</th>\n      <th>WillWait_Yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 27 columns</p>\n</div>"
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2 = pd.get_dummies(data, columns=data.columns) #one hot encoding\n",
    "data_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.430311600Z",
     "start_time": "2025-03-26T12:20:21.142761900Z"
    }
   },
   "outputs": [],
   "source": [
    "clf2 = tree.DecisionTreeClassifier(criterion=\"entropy\")\n",
    "x2 = data_2[data_2.columns.drop(['WillWait_No', 'WillWait_Yes'])]\n",
    "y2 = data_2['WillWait_Yes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:21.571173Z",
     "start_time": "2025-03-26T12:20:21.152946400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "   Alt_No  Alt_Yes  Bar_No  Bar_Yes  Fri_No  Fri_Yes  Hyn_No  Hyn_Yes  \\\n0   False     True    True    False    True    False   False     True   \n1   False     True    True    False    True    False   False     True   \n2    True    False   False     True    True    False    True    False   \n3   False     True    True    False   False     True   False     True   \n4   False     True    True    False   False     True    True    False   \n\n   Pat_Full  Pat_Some  ...  Res_No  Res_Yes  Type_Burger  Type_French  \\\n0     False      True  ...   False     True        False         True   \n1      True     False  ...    True    False        False        False   \n2     False      True  ...    True    False         True        False   \n3      True     False  ...    True    False        False        False   \n4      True     False  ...   False     True        False         True   \n\n   Type_Italian  Type_Thai  Est_0–10  Est_10–30  Est_30–60  Est_>60  \n0         False      False      True      False      False    False  \n1         False       True     False      False       True    False  \n2         False      False      True      False      False    False  \n3         False       True     False       True      False    False  \n4         False      False     False      False      False     True  \n\n[5 rows x 25 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alt_No</th>\n      <th>Alt_Yes</th>\n      <th>Bar_No</th>\n      <th>Bar_Yes</th>\n      <th>Fri_No</th>\n      <th>Fri_Yes</th>\n      <th>Hyn_No</th>\n      <th>Hyn_Yes</th>\n      <th>Pat_Full</th>\n      <th>Pat_Some</th>\n      <th>...</th>\n      <th>Res_No</th>\n      <th>Res_Yes</th>\n      <th>Type_Burger</th>\n      <th>Type_French</th>\n      <th>Type_Italian</th>\n      <th>Type_Thai</th>\n      <th>Est_0–10</th>\n      <th>Est_10–30</th>\n      <th>Est_30–60</th>\n      <th>Est_&gt;60</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>"
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.082465900Z",
     "start_time": "2025-03-26T12:20:21.197712900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 12.2.1 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"673pt\" height=\"598pt\"\n viewBox=\"0.00 0.00 672.50 598.25\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 594.25)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-594.25 668.5,-594.25 668.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<polygon fill=\"#fefaf7\" stroke=\"black\" points=\"425.25,-590.25 316.25,-590.25 316.25,-519.25 425.25,-519.25 425.25,-590.25\"/>\n<text text-anchor=\"middle\" x=\"370.75\" y=\"-572.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Hyn_No &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"370.75\" y=\"-557.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"370.75\" y=\"-541.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 100</text>\n<text text-anchor=\"middle\" x=\"370.75\" y=\"-525.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [51, 49]</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<polygon fill=\"#8bc6f0\" stroke=\"black\" points=\"360.62,-483.25 244.88,-483.25 244.88,-412.25 360.62,-412.25 360.62,-483.25\"/>\n<text text-anchor=\"middle\" x=\"302.75\" y=\"-465.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Est_0–10 &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"302.75\" y=\"-450.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.873</text>\n<text text-anchor=\"middle\" x=\"302.75\" y=\"-434.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 58</text>\n<text text-anchor=\"middle\" x=\"302.75\" y=\"-418.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 41]</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M348.11,-518.79C342.77,-510.55 337.02,-501.67 331.46,-493.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"334.49,-491.32 326.12,-484.83 328.61,-495.13 334.49,-491.32\"/>\n<text text-anchor=\"middle\" x=\"320.07\" y=\"-502.58\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<polygon fill=\"#eb9f68\" stroke=\"black\" points=\"501,-483.25 378.5,-483.25 378.5,-412.25 501,-412.25 501,-483.25\"/>\n<text text-anchor=\"middle\" x=\"439.75\" y=\"-465.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Pat_Some &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"439.75\" y=\"-450.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.702</text>\n<text text-anchor=\"middle\" x=\"439.75\" y=\"-434.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 42</text>\n<text text-anchor=\"middle\" x=\"439.75\" y=\"-418.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [34, 8]</text>\n</g>\n<!-- 0&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>0&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M393.73,-518.79C399.14,-510.55 404.98,-501.67 410.62,-493.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"413.48,-495.1 416.04,-484.83 407.63,-491.26 413.48,-495.1\"/>\n<text text-anchor=\"middle\" x=\"421.94\" y=\"-502.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<polygon fill=\"#ffffff\" stroke=\"black\" points=\"238.75,-376.25 102.75,-376.25 102.75,-305.25 238.75,-305.25 238.75,-376.25\"/>\n<text text-anchor=\"middle\" x=\"170.75\" y=\"-358.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Type_Burger &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"170.75\" y=\"-343.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"170.75\" y=\"-327.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 34</text>\n<text text-anchor=\"middle\" x=\"170.75\" y=\"-311.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 17]</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M258.8,-411.79C247.44,-402.75 235.1,-392.94 223.35,-383.59\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"225.7,-380.99 215.7,-377.5 221.34,-386.47 225.7,-380.99\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<polygon fill=\"#399de5\" stroke=\"black\" points=\"358.5,-368.38 257,-368.38 257,-313.12 358.5,-313.12 358.5,-368.38\"/>\n<text text-anchor=\"middle\" x=\"307.75\" y=\"-351.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"307.75\" y=\"-335.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 24</text>\n<text text-anchor=\"middle\" x=\"307.75\" y=\"-319.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 24]</text>\n</g>\n<!-- 1&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>1&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M304.41,-411.79C304.9,-401.56 305.44,-390.32 305.93,-379.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"309.42,-380.26 306.4,-370.1 302.43,-379.92 309.42,-380.26\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<polygon fill=\"#f1bc96\" stroke=\"black\" points=\"166,-269.25 55.5,-269.25 55.5,-198.25 166,-198.25 166,-269.25\"/>\n<text text-anchor=\"middle\" x=\"110.75\" y=\"-251.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Res_No &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"110.75\" y=\"-236.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.904</text>\n<text text-anchor=\"middle\" x=\"110.75\" y=\"-220.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 25</text>\n<text text-anchor=\"middle\" x=\"110.75\" y=\"-204.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 8]</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.77,-304.79C146.12,-296.64 141.1,-287.86 136.24,-279.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"139.39,-277.82 131.39,-270.87 133.32,-281.29 139.39,-277.82\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<polygon fill=\"#399de5\" stroke=\"black\" points=\"279.5,-261.38 184,-261.38 184,-206.12 279.5,-206.12 279.5,-261.38\"/>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-244.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-228.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-212.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 9]</text>\n</g>\n<!-- 2&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>2&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M191.06,-304.79C197.32,-294.01 204.23,-282.11 210.55,-271.23\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"213.4,-273.3 215.4,-262.9 207.35,-269.79 213.4,-273.3\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<polygon fill=\"#e58139\" stroke=\"black\" points=\"95.5,-154.38 0,-154.38 0,-99.12 95.5,-99.12 95.5,-154.38\"/>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-137.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-121.33\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n<text text-anchor=\"middle\" x=\"47.75\" y=\"-105.58\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 0]</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M89.77,-197.79C83.3,-187.01 76.17,-175.11 69.64,-164.23\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"72.78,-162.66 64.63,-155.89 66.78,-166.26 72.78,-162.66\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<polygon fill=\"#ffffff\" stroke=\"black\" points=\"236.38,-162.25 113.12,-162.25 113.12,-91.25 236.38,-91.25 236.38,-162.25\"/>\n<text text-anchor=\"middle\" x=\"174.75\" y=\"-144.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Est_30–60 &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"174.75\" y=\"-129.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"middle\" x=\"174.75\" y=\"-113.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n<text text-anchor=\"middle\" x=\"174.75\" y=\"-97.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 8]</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M132.06,-197.79C137.03,-189.64 142.38,-180.86 147.56,-172.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"150.53,-174.21 152.74,-163.85 144.55,-170.57 150.53,-174.21\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<polygon fill=\"#399de5\" stroke=\"black\" points=\"165.5,-55.25 70,-55.25 70,0 165.5,0 165.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"117.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"117.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"117.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 8]</text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M154.33,-90.96C149.47,-82.68 144.27,-73.81 139.36,-65.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"142.4,-63.71 134.32,-56.86 136.36,-67.26 142.4,-63.71\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<polygon fill=\"#e58139\" stroke=\"black\" points=\"279.5,-55.25 184,-55.25 184,0 279.5,0 279.5,-55.25\"/>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-37.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-22.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"231.75\" y=\"-6.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 0]</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M195.17,-90.96C200.03,-82.68 205.23,-73.81 210.14,-65.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"213.14,-67.26 215.18,-56.86 207.1,-63.71 213.14,-67.26\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<polygon fill=\"#e58139\" stroke=\"black\" points=\"486.5,-368.38 385,-368.38 385,-313.12 486.5,-313.12 486.5,-368.38\"/>\n<text text-anchor=\"middle\" x=\"435.75\" y=\"-351.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"435.75\" y=\"-335.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 31</text>\n<text text-anchor=\"middle\" x=\"435.75\" y=\"-319.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [31, 0]</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M438.42,-411.79C438.03,-401.56 437.6,-390.32 437.2,-379.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440.71,-379.96 436.83,-370.1 433.71,-380.23 440.71,-379.96\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<polygon fill=\"#83c2ef\" stroke=\"black\" points=\"615,-376.25 504.5,-376.25 504.5,-305.25 615,-305.25 615,-376.25\"/>\n<text text-anchor=\"middle\" x=\"559.75\" y=\"-358.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Bar_No &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"559.75\" y=\"-343.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.845</text>\n<text text-anchor=\"middle\" x=\"559.75\" y=\"-327.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n<text text-anchor=\"middle\" x=\"559.75\" y=\"-311.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 8]</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M479.71,-411.79C489.93,-402.84 501.03,-393.13 511.61,-383.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"513.61,-386.78 518.83,-377.56 509,-381.51 513.61,-386.78\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<polygon fill=\"#399de5\" stroke=\"black\" points=\"550.5,-261.38 455,-261.38 455,-206.12 550.5,-206.12 550.5,-261.38\"/>\n<text text-anchor=\"middle\" x=\"502.75\" y=\"-244.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"502.75\" y=\"-228.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n<text text-anchor=\"middle\" x=\"502.75\" y=\"-212.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 8]</text>\n</g>\n<!-- 12&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>12&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M540.77,-304.79C534.98,-294.12 528.59,-282.36 522.74,-271.57\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"525.89,-270.04 518.04,-262.92 519.74,-273.38 525.89,-270.04\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<polygon fill=\"#e58139\" stroke=\"black\" points=\"664.5,-261.38 569,-261.38 569,-206.12 664.5,-206.12 664.5,-261.38\"/>\n<text text-anchor=\"middle\" x=\"616.75\" y=\"-244.07\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"middle\" x=\"616.75\" y=\"-228.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n<text text-anchor=\"middle\" x=\"616.75\" y=\"-212.57\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n</g>\n<!-- 12&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>12&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M578.73,-304.79C584.52,-294.12 590.91,-282.36 596.76,-271.57\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"599.76,-273.38 601.46,-262.92 593.61,-270.04 599.76,-273.38\"/>\n</g>\n</g>\n</svg>\n",
      "text/plain": "<graphviz.sources.Source at 0x1f1fb9405f0>"
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2.fit(x2,y2)\n",
    "import graphviz\n",
    "dot_data = tree.export_graphviz(clf2, out_file = None, feature_names=x2.columns,  \n",
    "                         filled=True)\n",
    "graph2 = graphviz.Source(dot_data)\n",
    "graph2\n",
    "#graph.render(\"restaurant2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.082465900Z",
     "start_time": "2025-03-26T12:20:21.805604800Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gogac\\anaconda3\\envs\\lab04\\Lib\\site-packages\\sklearn\\utils\\validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": "array([1])"
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#predict \n",
    "my_test=[1,0,0,1,0,2,0,1,1,0]\n",
    "clf1.predict([my_test])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.082465900Z",
     "start_time": "2025-03-26T12:20:21.809738900Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gogac\\anaconda3\\envs\\lab04\\Lib\\site-packages\\sklearn\\utils\\validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": "array([[0., 1.]])"
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1.predict_proba([my_test]) #change the example and see the prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.082465900Z",
     "start_time": "2025-03-26T12:20:21.825899100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "1.0"
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1.score(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.848917100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([1.  , 0.94])"
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#or use cross validation\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(clf1, x,y,cv=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Play with pandas frame in order to compute InfoGain\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.904785800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "0     Some\n1     Full\n2     Some\n3     Full\n4     Full\n      ... \n95    Full\n96    Full\n97    Full\n98     NaN\n99    Full\nName: Pat, Length: 100, dtype: object"
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Pat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.918347400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Alt  Bar  Fri  Hyn  Price  Rain  Res  Type  Est  WillWait\n",
      "Pat                                                            \n",
      "Full   43   43   43   43     43    43   43    43   43        43\n",
      "Some   25   25   25   25     25    25   25    25   25        25\n"
     ]
    },
    {
     "data": {
      "text/plain": "WillWait\nNo     30\nYes    13\nName: count, dtype: int64"
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no, yes = data['WillWait'].value_counts() #how many examples have WillWait='No', respectively Yes\n",
    "print(data.groupby('Pat').count())\n",
    "res = data['WillWait'][data['Pat']=='Full'].value_counts()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.939862800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "0.0"
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import log\n",
    "def B(probs):\n",
    "    return sum([-p*log(p,2) for p in probs if p>0])\n",
    "B([1, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.952754300Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "0.9997114417528099"
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B([no/(no+yes), yes/(no+yes)]) #entropy for WillWait"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:20:22.122526800Z",
     "start_time": "2025-03-26T12:20:21.966622900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Pat\nFull    43\nSome    25\nName: count, dtype: int64"
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#def remainder(attrib):\n",
    "data['Pat'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-26T12:22:32.341439900Z",
     "start_time": "2025-03-26T12:22:32.294314900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49 51\n",
      "Value of the attribute:  Some\n",
      "WillWait\n",
      "Yes    22\n",
      "No      3\n",
      "Name: count, dtype: int64\n",
      "pozitive and negative number of examples: 22 3\n",
      "Value of the attribute:  Full\n",
      "WillWait\n",
      "No     30\n",
      "Yes    13\n",
      "Name: count, dtype: int64\n",
      "pozitive and negative number of examples: 13 30\n"
     ]
    },
    {
     "data": {
      "text/plain": "np.float64(0.4872017229499642)"
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "remainder=0\n",
    "attrib='Pat'\n",
    "p=data['WillWait'].value_counts()['Yes']\n",
    "n=data['WillWait'].value_counts()['No']\n",
    "print(p,n)\n",
    "values = np.delete(data[attrib].unique(), 2, 0)\n",
    "for v in values:\n",
    "    print(\"Value of the attribute: \", v)\n",
    "    no_examples = data['WillWait'][data[attrib]==v].value_counts()\n",
    "    print(no_examples)\n",
    "    nk=0\n",
    "    pk=0\n",
    "    if 'No' in no_examples.keys().tolist():\n",
    "        nk=no_examples['No']\n",
    "    if 'Yes' in no_examples.keys().tolist():\n",
    "        pk=no_examples['Yes']\n",
    "    print(\"pozitive and negative number of examples:\", pk,nk)\n",
    "    remainder+=(pk+nk)/(p+n) * B([pk/(pk+nk), nk/(pk+nk)])\n",
    "infoGain = B([n/(n+p), p/(n+p)])-remainder\n",
    "\n",
    "infoGain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Your turn: Apply DecisionTree on the iris dataset.\n",
    "1. Load iris dataset\n",
    "2. see the content of the loaded data\n",
    "3. Identify the classes (target names) & feature names\n",
    "4. View the first 5 examples\n",
    "5. Apply decision tree on the entire dataset\n",
    "6. View the resulting tree\n",
    "7. Predict the result for the flowers with the following characteristics: 4.7 3.3  1.3  0.2 and 5 1.2  3.3  2.2\n",
    "8. Measure accuracy over the entire dataset (use \"accuracy_score\"from sklearn.metrics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:21.996218400Z"
    }
   },
   "outputs": [],
   "source": [
    "#https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris\n",
    "from sklearn.datasets import load_iris\n",
    "data=load_iris()\n",
    "data #2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:21.996218400Z"
    }
   },
   "outputs": [],
   "source": [
    "#3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.005231400Z"
    }
   },
   "outputs": [],
   "source": [
    "#4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.005231400Z"
    }
   },
   "outputs": [],
   "source": [
    "#4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.005231400Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn import tree #5\n",
    "clf_your = \"todo\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.005231400Z"
    }
   },
   "outputs": [],
   "source": [
    "import graphviz  #6\n",
    "dot_data = tree.export_graphviz(clf_your, out_file = None, feature_names=data.feature_names,  \n",
    "                         filled=True)\n",
    "graph2 = graphviz.Source(dot_data)\n",
    "graph2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.020882500Z"
    }
   },
   "outputs": [],
   "source": [
    "my_test=[] #7\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2025-03-26T12:20:22.020882500Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score #8\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "# 5.3 XOR Decision Tree"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.utils import shuffle\n",
    "# Create the XOR truth table\n",
    "data = {\n",
    "    'X1': [0, 0, 0, 0, 1, 1, 1, 1],\n",
    "    'X2': [0, 0, 1, 1, 0, 0, 1, 1],\n",
    "    'X3': [0, 1, 0, 1, 0, 1, 0, 1],\n",
    "    'Y':  [0, 1, 1, 0, 1, 0, 0, 1]\n",
    "}\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "# 5.4 Learning curve"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "import random\n",
    "# Generate a dataset of 100 random examples\n",
    "random.seed(42)  # for reproducibility\n",
    "num_examples = 100\n",
    "# Define possible values for each column\n",
    "attributes = {\n",
    "    'Alt': ['Yes', 'No'],\n",
    "    'Bar': ['Yes', 'No'],\n",
    "    'Fri': ['Yes', 'No'],\n",
    "    'Hyn': ['Yes', 'No'],\n",
    "    'Pat': ['Some', 'Full', 'None'],\n",
    "    'Price': ['$', '$$', '$$$'],\n",
    "    'Rain': ['Yes', 'No'],\n",
    "    'Res': ['Yes', 'No'],\n",
    "    'Type': ['French', 'Thai', 'Burger', 'Italian'],\n",
    "    'Est': ['0–10', '10–30', '30–60', '>60']\n",
    "}\n",
    "\n",
    "# Generate unique rows\n",
    "rows = []\n",
    "cnt = 0\n",
    "while cnt < num_examples:\n",
    "    row = {col: random.choice(attributes[col]) for col in attributes}\n",
    "    if row not in rows:  # Ensure uniqueness\n",
    "        rows.append(row)\n",
    "        cnt += 1\n",
    "\n",
    "for row in rows:\n",
    "    row['WillWait'] = random.choice(['Yes', 'No'])\n",
    "    \n",
    "    "
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "# 5.5 Overfitting"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "attributes = {\n",
    "    'Alt': ['Yes', 'No'],\n",
    "    'Bar': ['Yes', 'No'],\n",
    "    'Fri': ['Yes', 'No'],\n",
    "    'Hyn': ['Yes', 'No'],\n",
    "    'Pat': ['Some', 'Full', 'None'],\n",
    "    'Price': ['$', '$$', '$$$'],\n",
    "    'Rain': ['Yes', 'No'],\n",
    "    'Res': ['Yes', 'No'],\n",
    "    'Type': ['French', 'Thai', 'Burger', 'Italian'],\n",
    "    'Est': ['0–10', '10–30', '30–60', '>60']\n",
    "}\n",
    "num_examples=900\n",
    "# Generate unique rows\n",
    "rows = []\n",
    "cnt = 0\n",
    "while cnt < num_examples:\n",
    "    row = {col: random.choice(attributes[col]) for col in attributes}\n",
    "    if row not in rows:  # Ensure uniqueness\n",
    "        rows.append(row)\n",
    "        cnt += 1\n",
    "\n",
    "for row in rows:\n",
    "    row['WillWait'] = random.choice(['Yes', 'No'])\n",
    "\n",
    "tree_depths = range(1,21)\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}




lab-05/restaurant.csv
		Alt		Bar		Fri		Hyn		Pat		Price		Rain		Res		Type		Est		WillWait

		Yes		No		No		Yes		Some		$$$		No		Yes		French		0–10		Yes

		Yes		No		No		Yes		Full		$		No		No		Thai		30–60		No

		No		Yes		No		No		Some		$		No		No		Burger		0–10		Yes

		Yes		No		Yes		Yes		Full		$		Yes		No		Thai		10–30		Yes

		Yes		No		Yes		No		Full		$$$		No		Yes		French		>60		No

		No		Yes		No		Yes		Some		$$		Yes		Yes		Italian		0–10		Yes

		No		Yes		No		No		None		$		Yes		No		Burger		0–10		No

		No		No		No		Yes		Some		$$		Yes		Yes		Thai		0–10		Yes

		No		Yes		Yes		No		Full		$		Yes		No		Burger		>60		No

		Yes		Yes		Yes		Yes		Full		$$$		No		Yes		Italian		10–30		No

		No		No		No		No		None		$		No		No		Thai		0–10		No

		Yes		Yes		Yes		Yes		Full		$		No		No		Burger		30–60		Yes

		Yes		No		No		Yes		Some		$$$		Yes		Yes		French		0–10		Yes

		Yes		No		No		Yes		Full		$		Yes		No		Thai		30–60		No

		No		Yes		No		No		Some		$		Yes		No		Burger		0–10		Yes

		Yes		No		Yes		Yes		Full		$		No		No		Thai		10–30		Yes

		Yes		No		Yes		No		Full		$$$		Yes		Yes		French		>60		No

		No		Yes		No		Yes		Some		$$		No		Yes		Italian		0–10		Yes

		No		Yes		No		No		None		$		No		No		Burger		0–10		No

		No		No		No		Yes		Some		$$		No		Yes		Thai		0–10		Yes

		No		Yes		Yes		No		Full		$		No		No		Burger		>60		No

		Yes		Yes		Yes		Yes		Full		$$$		Yes		Yes		Italian		10–30		No

		No		No		No		No		None		$		Yes		No		Thai		0–10		No

		Yes		Yes		Yes		Yes		Full		$		Yes		No		Burger		30–60		Yes

		No		No		No		Yes		Some		$$$		No		Yes		French		0–10		Yes

		No		No		No		Yes		Full		$		No		No		Thai		30–60		No

		Yes		Yes		No		No		Some		$		No		No		Burger		0–10		Yes

		No		No		Yes		Yes		Full		$		Yes		No		Thai		10–30		Yes

		No		No		Yes		No		Full		$$$		No		Yes		French		>60		No

		Yes		Yes		No		Yes		Some		$$		Yes		Yes		Italian		0–10		Yes

		Yes		Yes		No		No		None		$		Yes		No		Burger		0–10		No

		Yes		No		No		Yes		Some		$$		Yes		Yes		Thai		0–10		Yes

		Yes		Yes		Yes		No		Full		$		Yes		No		Burger		>60		No

		No		Yes		Yes		Yes		Full		$$$		No		Yes		Italian		10–30		No

		Yes		No		No		No		None		$		No		No		Thai		0–10		No

		No		Yes		Yes		Yes		Full		$		No		No		Burger		30–60		Yes

		No		No		No		Yes		Some		$$$		Yes		Yes		French		0–10		Yes

		No		No		No		Yes		Full		$		Yes		No		Thai		30–60		No

		Yes		Yes		No		No		Some		$		Yes		No		Burger		0–10		Yes

		No		No		Yes		Yes		Full		$		No		No		Thai		10–30		Yes

		No		No		Yes		No		Full		$$$		Yes		Yes		French		>60		No

		Yes		Yes		No		Yes		Some		$$		No		Yes		Italian		0–10		Yes

		Yes		Yes		No		No		None		$		No		No		Burger		0–10		No

		Yes		No		No		Yes		Some		$$		No		Yes		Thai		0–10		Yes

		Yes		Yes		Yes		No		Full		$		No		No		Burger		>60		No

		No		Yes		Yes		Yes		Full		$$$		Yes		Yes		Italian		10–30		No

		Yes		No		No		No		None		$		Yes		No		Thai		0–10		No

		No		Yes		Yes		Yes		Full		$		Yes		No		Burger		30–60		Yes

		Yes		No		No		Yes		None		$$$		No		Yes		French		0–10		Yes

		Yes		No		No		Yes		None		$		No		No		Thai		30–60		No

		No		Yes		No		No		Some		$		No		No		Burger		0–10		Yes

		Yes		No		Yes		Yes		None		$		Yes		No		Thai		10–30		Yes

		Yes		No		Yes		No		Full		$$$		No		Yes		French		>60		No

		No		Yes		No		Yes		None		$$		Yes		Yes		Italian		0–10		Yes

		No		Yes		No		No		Full		$		Yes		No		Burger		0–10		No

		No		No		No		Yes		None		$$		Yes		Yes		Thai		0–10		Yes

		No		Yes		Yes		No		None		$		Yes		No		Burger		>60		No

		Yes		Yes		Yes		Yes		Full		$$$		No		Yes		Italian		10–30		No

		No		No		No		No		Some		$		No		No		Thai		0–10		No

		Yes		Yes		Yes		Yes		Full		$		No		No		Burger		30–60		Yes

		Yes		No		No		Yes		None		$$$		Yes		Yes		French		0–10		Yes

		Yes		No		No		Yes		None		$		Yes		No		Thai		30–60		No

		No		Yes		No		No		Some		$		Yes		No		Burger		0–10		Yes

		Yes		No		Yes		Yes		None		$		No		No		Thai		10–30		Yes

		Yes		No		Yes		No		Full		$$$		Yes		Yes		French		>60		No

		No		Yes		No		Yes		None		$$		No		Yes		Italian		0–10		Yes

		No		Yes		No		No		Full		$		No		No		Burger		0–10		No

		No		No		No		Yes		None		$$		No		Yes		Thai		0–10		Yes

		No		Yes		Yes		No		None		$		No		No		Burger		>60		No

		Yes		Yes		Yes		Yes		Full		$$$		Yes		Yes		Italian		10–30		No

		No		No		No		No		Some		$		Yes		No		Thai		0–10		No

		Yes		Yes		Yes		Yes		Full		$		Yes		No		Burger		30–60		Yes

		No		No		No		Yes		None		$$$		No		Yes		French		0–10		Yes

		No		No		No		Yes		None		$		No		No		Thai		30–60		No

		Yes		Yes		No		No		Some		$		No		No		Burger		0–10		Yes

		No		No		Yes		Yes		None		$		Yes		No		Thai		10–30		Yes

		No		No		Yes		No		Full		$$$		No		Yes		French		>60		No

		Yes		Yes		No		Yes		None		$$		Yes		Yes		Italian		0–10		Yes

		Yes		Yes		No		No		Full		$		Yes		No		Burger		0–10		No

		Yes		No		No		Yes		None		$$		Yes		Yes		Thai		0–10		Yes

		Yes		Yes		Yes		No		None		$		Yes		No		Burger		>60		No

		No		Yes		Yes		Yes		Full		$$$		No		Yes		Italian		10–30		No

		Yes		No		No		No		Some		$		No		No		Thai		0–10		No

		No		Yes		Yes		Yes		Full		$		No		No		Burger		30–60		Yes

		No		No		No		Yes		None		$$$		Yes		Yes		French		0–10		Yes

		No		No		No		Yes		None		$		Yes		No		Thai		30–60		No

		Yes		Yes		No		No		Some		$		Yes		No		Burger		0–10		Yes

		No		No		Yes		Yes		None		$		No		No		Thai		10–30		Yes

		No		No		Yes		No		Full		$$$		Yes		Yes		French		>60		No

		Yes		Yes		No		Yes		Some		$$		No		Yes		Italian		0–10		Yes

		Yes		Yes		No		No		None		$		No		No		Burger		0–10		No

		Yes		No		No		Yes		Some		$$		No		Yes		Thai		0–10		Yes

		Yes		Yes		Yes		No		Full		$		No		No		Burger		>60		No

		No		Yes		Yes		Yes		Full		$$$		Yes		Yes		Italian		10–30		No

		Yes		No		No		No		None		$		Yes		No		Thai		0–10		No

		No		Yes		Yes		Yes		Full		$		Yes		No		Burger		30–60		Yes

		Yes		Yes		Yes		No		Full		$$		No		No		Burger		>60		No

		No		Yes		Yes		Yes		Full		$		Yes		Yes		Italian		10–30		No

		Yes		No		No		No		None		$$		Yes		No		Thai		0–10		No

		No		Yes		Yes		Yes		Full		$$		Yes		No		Burger		30–60		Yes





reading content from C:\Users\Asus\Desktop\Bee\See\labeling_images.zip


crosses.bmp


diagonal.bmp


disks.bmp


letters.bmp


shapes.bmp


text_binary.bmp


reading content from C:\Users\Asus\Desktop\Bee\See\Laborator 8 FLT (ro).pdf


Laborator 8 

Interpretarea arborilor binari în Haskell/ML 

 

Laboratorul 8 constă în crearea unui analizor lexico-sintactic pentru procesarea arborilor 

binari de căutare în sintaxă Haskell și, comparativ, în sintaxă ML. Partea de ML va apărea pe 

fundal color (albastru), iar pentru implementare vom merge pe una dintre cele două sintaxe. Vom 

avea în vedere citirea arborilor și executarea unor operații pe arbori: insert (inserarea unui nod 

într-un arbore) și count (contorizarea nodurilor, diferite de frunzele vide Lf, dintr-un arbore). 

Exemple de input în Haskell: 

 

Exemple de input în ML: 

 

După cum se poate observa în exemple, sintaxa Haskell a unui arbore binar este 

următoarea:  

Iar sintaxa ML a unui arbore binar este: 

  

Node Lf 2 Lf 
> Node Lf 2 Lf 

Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 
> Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

count (insert 16 (Node (Node Lf 2 Lf) 15 Lf)) 
> 3 

insert (count (Node Lf 17 (Node Lf 24 Lf))) (insert 12 (Node Lf 10 Lf)) 
> Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

Node(2, Lf, Lf) 
> Node(2, Lf, Lf) 

Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 
> Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

count(insert(16, Node(15, Node(2, Lf, Lf), Lf))) 
> 3 

insert(count(Node(17, Lf, Node(24, Lf, Lf))), insert(12, Node(10, Lf, Lf))) 
> Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

Node (Tree Int) Int (Tree Int) 

Node (int, int Tree, int Tree) 

 



Să luăm ca exemplu arborele binar din imaginea următoare: 

 

Reprezentarea arborelui în sintaxă Haskell este următoarea: 

 

Iar reprezentarea în sintaxă ML este: 

 

Pentru a reprezenta în memorie arborii binari de căutare, vom crea o structură cu trei 

câmpuri: unul pentru cheia nodului (de tip int) și două pentru fiii nodului (pointeri la subarborele 

stâng și la subarborele drept).  

 

Pe stiva de valori vor coexista două tipuri: int, pentru numerele citite din input și pentru 

cheile nodurilor, și o structură de tip arbore, pentru a reduce numerele din input la arbori în 

forma potrivită (reducând partea dreaptă a producțiilor la partea stângă). Astfel, yylval va fi un 

union cu două câmpuri: 

 

În ceea ce privește setul de producții, vom avea un set de reguli (expr) care descriu 
inputul. Putem separa instrucțiunile din input în două categorii, în funcție de tipul rezultatului. 
Citirile arborilor și comanda insert vor returna arbori, în vreme ce comanda count returnează un 

Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf) 

Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf)) 

typedef struct _node { 

int key; 

 struct _node *left, *right;  

} node; 

%union { 

 int ival; 

 struct _node *btree; 

} 



număr întreg. Astfel, reies alte două seturi de reguli, unul pentru situațiile din care rezultă un 
arbore (t_expr) și unul pentru cele din care rezultă numere întregi (i_expr). Cel mai important set 
de reguli este cel care descrie construirea unui arbore binar (tree), cu ajutorul celor doi 
constructori de date Haskell/ML pentru arbori binari: constructorul Node cu trei argumente și 
constructorul Lf cu zero argumente. 

 Setul de producții pentru sintaxă Haskell:

 

Setul de producții pentru sintaxă ML: 

 

  

expr : i_expr 

     | t_expr 

     ; 

i_expr : COUNT t_expr 

  |'(' i_expr ')' 

  | NUMBER 

  ; 

t_expr : INSERT i_expr t_expr 

       | '(' t_expr ')' 

       | tree 

       ; 

tree : NODE tree NUMBER tree 

     | '(' tree ')'    

     | LF    

     ; 

expr : i_expr 

     | t_expr 

     ; 

i_expr : COUNT '(' t_expr ')' 

  | NUMBER 

  ; 

t_expr : INSERT '(' i_expr ',' t_expr ')' 

       | tree 

       ; 

tree : NODE '(' NUMBER ',' tree ',' tree ')' 

     | LF    

     ; 



Exerciții propuse: 

1. Implementați o funcție pentru căutarea unui nod într-un arbore.  

Exemple în Haskell: 

find 12 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> true 
find 17 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> false 

Exemple în ML: 

 

2. Implementați o funcție pentru ștergerea unui nod dintr-un arbore. Verificați întâi dacă 

nodul căutat există în arbore.  

Exemplu în Haskell: 

delete 12 (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> Node (Node Lf 2 Lf) 10 Lf 

Exemplu în ML: 

 
 

3. Creați o funcție pentru a verifica dacă un arbore binar este echilibrat.  

Exemple în Haskell: 

balanced (Node (Node Lf 2 Lf) 10 (Node Lf 12 Lf)) 
> true 
balanced (Node (Node Lf 2 Lf) 10 Lf) 
> false 

Exemple în ML: 

 

find(12, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> true 
find(17, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> false 

 

delete(12, Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> Node(10, Node(2, Lf, Lf), Lf) 

balanced(Node(10, Node(2, Lf, Lf), Node(12, Lf, Lf))) 
> true 
balanced(Node(10, Node(2, Lf, Lf), Lf)) 
> false 



reading content from C:\Users\Asus\Desktop\Bee\See\Letter of Intent.pdf


Letter of Intent 

For Participation in the MHP Internship 

I, Braica Patricia Maria, am a third-year student at the Faculty of Automation and Computers, within the 

Technical University of Cluj-Napoca, specializing in Computer Science and Information Technology in 

English. I wish to apply for the MHP internship in Cluj-Napoca. 

I would like to bring to your attention the reasons why I believe I am a strong candidate for this project. 

Firstly, I aim to bring innovation and contribute to improving the results of MHP. I feel well-prepared to 

engage in the complex field of Java programming. My qualifications are supported by the excellent 

results I have achieved in relevant subjects throughout my three years of study. 

Secondly, I want to develop my practical skills in the technical field, particularly in software solutions 

implementation. I believe this project will provide me with the opportunity to learn from professionals 

and apply theoretical knowledge in practice. I am highly motivated by the chance to work in an 

interdisciplinary team and contribute to the development of a real-world project. 

It is essential to mention that I have already worked with this type of technology in Web Development 

during the “Software Engineering” course, where I developed a project on restaurant recommendation 

systems using Google Location and Weather APIs, implemented with Java Spring Boot. 

Additionally, I have completed the "Object-Oriented Programming (OOP) in Java and C++" course, where 

I worked on a mandatory project that strengthened my knowledge of OOP-based application 

development. 

The "SQL Programming" course provided me with fundamental skills in database management, which 

are crucial for any project involving data storage and manipulation. 

Throughout my studies, I have taken relevant courses that have equipped me with essential skills in 

computer science and applied technologies. For example, through the "Fundamental Algorithms and 

Data Structures in C" course, I learned efficient programming techniques for developing high-

performance solutions. 

During the "AI Technologies in Python" course, my teammates and I implemented complex AI solutions 

such as theorem proving and the DPLL algorithm. 

My objectives are to expand my experience in advanced technologies, particularly in web development, 

while remaining open to exploring other IT specializations. Through this project, I wish to gain insight 

into different fields where I can contribute and discover what best suits my skills and interests. My goal 

is to acquire valuable knowledge and experiment with various types of projects to eventually become an 

expert in a specific domain or position, based on the skills and passions I develop along the way. 

If you consider that my motivation and expertise make me a suitable candidate for this project, I am 

available for an interview with the selection committee. Thank you for your time and consideration. 

Sincerely, 

Braica Patricia Maria 



reading content from C:\Users\Asus\Desktop\Bee\See\Letter of IntentEng.docx

Letter of Intent
For Participation in the MHP Internship
I, Braica Patricia Maria, am a third-year student at the Faculty of Automation and Computers, within the Technical University of Cluj-Napoca, specializing in Computer Science and Information Technology in English. I wish to apply for the MHP internship in Cluj-Napoca.
I would like to bring to your attention the reasons why I believe I am a strong candidate for this project.
Firstly, I aim to bring innovation and contribute to improving the results of MHP. I feel well-prepared to engage in the complex field of Java programming. My qualifications are supported by the excellent results I have achieved in relevant subjects throughout my three years of study.
Secondly, I want to develop my practical skills in the technical field, particularly in software solutions implementation. I believe this project will provide me with the opportunity to learn from professionals and apply theoretical knowledge in practice. I am highly motivated by the chance to work in an interdisciplinary team and contribute to the development of a real-world project.
It is essential to mention that I have already worked with this type of technology in Web Development during the “Software Engineering” course, where I developed a project on restaurant recommendation systems using Google Location and Weather APIs, implemented with Java Spring Boot.
Additionally, I have completed the "Object-Oriented Programming (OOP) in Java and C++" course, where I worked on a mandatory project that strengthened my knowledge of OOP-based application development.
The "SQL Programming" course provided me with fundamental skills in database management, which are crucial for any project involving data storage and manipulation.
Throughout my studies, I have taken relevant courses that have equipped me with essential skills in computer science and applied technologies. For example, through the "Fundamental Algorithms and Data Structures in C" course, I learned efficient programming techniques for developing high-performance solutions.
During the "AI Technologies in Python" course, my teammates and I implemented complex AI solutions such as theorem proving and the DPLL algorithm.
My objectives are to expand my experience in advanced technologies, particularly in web development, while remaining open to exploring other IT specializations. Through this project, I wish to gain insight into different fields where I can contribute and discover what best suits my skills and interests. My goal is to acquire valuable knowledge and experiment with various types of projects to eventually become an expert in a specific domain or position, based on the skills and passions I develop along the way.
If you consider that my motivation and expertise make me a suitable candidate for this project, I am available for an interview with the selection committee. Thank you for your time and consideration.
Sincerely,
Braica Patricia Maria

reading content from C:\Users\Asus\Desktop\Bee\See\lisp.l

/* lisp.l - Analizor lexical pentru microinterpretorul Lisp */
%{
#include "y.tab.h"
%}

%%
\s+                 ; /* Ignoră spațiile albe */
\(                  return '(';
\)                  return ')';
CONS                return CONS;
CAR                 return CAR;
CDR                 return CDR;
APPEND              return APPEND;
[0-9]+              { yylval.ival = atoi(yytext); return NUMBER; }
\'\([0-9 ]+\)      { yylval.sval = strdup(yytext); return LIST; }
.                   ;
%%

int yywrap() { return 1; }



reading content from C:\Users\Asus\Desktop\Bee\See\lisp.y

/* lisp.y - Analizor sintactic pentru microinterpretorul Lisp */
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct list {
    int value;
    struct list *next;
} list;

list *cons(int val, list *lst) {
    list *node = (list *)malloc(sizeof(list));
    node->value = val;
    node->next = lst;
    return node;
}

int car(list *lst) { return lst ? lst->value : 0; }
list *cdr(list *lst) { return lst ? lst->next : NULL; }
list *append(list *l1, list *l2) {
    if (!l1) return l2;
    list *head = l1;
    while (l1->next) l1 = l1->next;
    l1->next = l2;
    return head;
}

void print_list(list *lst) {
    printf("(");
    while (lst) {
        printf("%d ", lst->value);
        lst = lst->next;
    }
    printf(")\n");
}
%}

%union {
    int ival;
    list *lst;
}

%token <ival> NUMBER
%token CONS CAR CDR APPEND
%type <lst> form i_form l_form enum

%%
form: i_form  { $$ = $1; print_list($$); }
    | l_form  { $$ = $1; print_list($$); }
    ;

i_form: '(' i_command ')' { $$ = $2; }
      | NUMBER { $$ = cons($1, NULL); }
      ;

l_form: '(' l_command ')' { $$ = $2; }
      | enum ')' { $$ = $1; }
      ;

i_command: CAR l_form { $$ = cons(car($2), NULL); }
         | '+' form i_form { $$ = cons(car($2) + car($3), NULL); }
         ;

l_command: CDR l_form { $$ = cdr($2); }
         | CONS i_form l_form { $$ = cons(car($2), $3); }
         | APPEND l_form l_form { $$ = append($2, $3); }
         ;

enum: NUMBER enum { $$ = cons($1, $2); }
     | NUMBER { $$ = cons($1, NULL); }
     ;

file: file form '\n' | file '\n' | /* empty */ ;
%%

int main() {
    yyparse();
    return 0;
}

void yyerror(const char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}


reading content from C:\Users\Asus\Desktop\Bee\See\MHP Innovation Camp Oferta 2025.odt

Innovation Camp – Software Development Internship Program

Imagine the future. Set it in motion. 

July 14th to August 29th, 2025. 


Tech Details:

Embark on exciting projects where you'll delve into state-of-the-art technologies:
The program has 5 distinct focus areas. You will be assigned to one of them, taking into consideration your personal interest and spark with one of the featured technologies. 

Duration: July 14th to August 29th
Hours: 6 hours/day
Format: A hybrid work environment that fosters collaboration and learning.
Rewards: Enjoy a rewarding internship program that offers valuable insights and experiences.

	JAVA & CLOUD PROJECT



Cloud Development 
	Infrastructure as Code (CDK, Terraform) 

	AWS CLI, IAM, KMS, S3, CloudFront, Lambda, Aurora Postgres, Dynamo DB, EKS, ECS, EC2, WAF, CloudWatch

	Typescript, NodeJS

	Gitlab CI/CD

	Workflow: Agile Scrum, Git



Java 
Backend: Java, Spring (Security, Spring Boot, Hibernate, RESTful Web Services), PostgreSQL
	Frontend: Semantic HTML5, CSS, SCSS, Mobile-first, JavaScript, Typescript, Angular/React, NPM

	Workflow: Agile Scrum, Git

	Cloud: introduction to AWS



	ABAP (ADVANCED BUSINESS APPLICATION PROGRAMMING) PROJECT



	Frontend: Explore SAP HANA Cloud Platform, WEB IDE, and UI5 for cutting-edge user interfaces.

	Backend: Gain expertise in ABAP, SAP NetWeaver Gateway, OData Services, and HANA Database.

	Workflow: Adopt SCRUM practices for efficient project management.







	SAP BUSINESS INTELLIGENCE PROJECT



Backend: Data Modelling in BW/4HANA 
	Data modelling via customized SAP solution 

	Data extraction/manipulation / cleansing / enhancement / preparation for reporting based on customer requirements 

	ABAP (Advanced Business Application Programming) / AMDP (ABAP Managed Database Procedures) – programming languages used in BW/4HANA



Frontend: SAP Analytics Cloud 
	Newest reporting solution developed by SAP

	Data integration from BW/4HANA system

	Development of customized, powerful user-friendly dashboards

	Understanding customer needs to leverage the power of data in SAP Analytics Cloud

	Usage of JavaScript for developing interactive dashboards



	SOFTWARE DEFINED VECHICLE PROJECT


	Java, Gradle, Android Studio 

	Previous SLM (small language model) development or configuration exposure

	C++ & Python 

	Background in electrical or electronics engineering



	DATA, AUTOMATION & CLOUD PROJECT


	Frontend Technologies: Power BI, Tableau, Power Platform

	Backend Technologies: SQL Server, MS SQL, Python, Azure SQL DB, Azure Data Stack, Azure Administration




Application Details:
The application deadline is April 25th, 2025. 
We encourage you to apply sooner rather than later. Once all positions are filled, the selection process will close.

Note: The application system requires you to upload three PDF documents: CV, cover letter, and references. If you don't have the latter two readily available, feel free to upload your CV three times in step 1. Thank you for your understanding in advance.



reading content from C:\Users\Asus\Desktop\Bee\seminarii_PL.pdf




































reading content from C:\Users\Asus\Desktop\Bee\TIC_IX_C12.pdf


  

Microsoft Office Word 
Inserarea si formatarea tabelelor 



Cuprins: 

1. Inserarea unui tabel 

2. Desenarea unui tabel 

3. Lucru în tabel 

4. Operații în tabel 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Inserarea unui tabel 

Crearea unui tabel poate fi efectuata în două moduri 

1. Se poziționeaza cursorul în document, în poziția unde trebuie inserat tabelul și se activeaza 

opțiunea din meniul Insert / Table / Insert Table 

•  In rezultat apare fereastra Insert Table, unde se înscriu  

• numarul de coloane ale tabelului – Number of columns  

• și numarul de rânduri - Number of rows. 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

în caseta Fixed column width (Lăţime 
fixă a coloanei) se stabileşte lăţimea 
tabelului. 
Optiunea Automat permite ca lăţimea 
tabelului să fie egală cu a paginii, 
coloanele având dimensiunile egale. 

 



Crearea unui tabel poate fi efectuata în două moduri 

2. Se pozitioneaza cursorul în document, în poziția unde trebuie inserat tabelul și se 

efectuează un clic pe meniul Insert , opțiunea Table .  

Cu ajutorul mouse-lui se stabilesc dimensiunile tabelului. 

După ce a fost creat tabelul, utilizatorului îi rămâne să introducă datele în tabel.  

Pentru a introduce date într-o celula, trebuie poziționat cursorul contextual în celula 

respectivă.  

 

Pentru trecerea dintr-o celulă în  

alta a tabelului pot fi utilizate  

tastele directionale (4 taste săgeți) 

sau tasta Tab   

sau celula în care se dorește de a  

înscrie date trebuie indicata cu  

ajutorul mouse-ului. 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Inserarea unui tabel 



• Meniul Insert- secțiunea Table - opţiunea Draw Table 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Desenarea unui tabel 



• La activarea butonului Draw Table  cursorul ia forma unui creion cu ajutorul caruia se 

deseneaza tabelul.  

• Butonul Eraser  poate fi utilizat pe post de radiera.  

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Desenarea unui tabel 

Butonul Shading Color   se utilizeaza pentru a 
aplica un fundal de o anumita culoare pentru 
celule sau pentru intregul tabel. 

 
Din lista 
derulanta Line 
weight se 
selecteaza grosimea, 
iar utilizand 
butonul Pen Color – 
culoarea acesteia.  
 

Din lista derulanta Line Style poate 
fi selectat stilul liniilor utilizate in 
desenarea tabelului 

 



Utilizarea stilurilor de tabel 

• Dupa inserarea unui tabel, acesta poate fi formatat utilizând stilurile de tabel astfel: 

 – click în tabelul pe care dorim sa-l formatam; 

 – din fila Design, grupul Table Tools, alegem stilul de tabel dorit Table Styles; 

• Prin  plasarea mouse-ului deasupra fiecarui stil de tabel preformatat, putem examina cum 

se va afisa tabelul. 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Desenarea unui tabel 



Lucru în tabel 

• Dimensiunile liniilor şi coloanelor se pot modifica manual, prin poziţionarea 

cursorului pe linia rândului sau coloanei, iar atunci când acesta se transformă în 

săgeată se trage spre exterior (pentru mărire) sau interior (pentru micşorare). 

• Selectarea tabelului se face prin poziţionarea cursorului mouse-ului în colţul din stânga 

sus şi se face clic pe   

• Selectarea unei linii (coloane) se face prin poziţionarea cursorului în dreptul liniei 

(coloanei), iar când acesta se transformă în săgeată se face clic pe aceasta. 

 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Selectarea se poate face şi din meniul Table Tools – tab Layout - opţiunea Select 

- Table - selectează tabelul 

- Row - selectează linia în care e poziţionat cursorul 

- Column - selectează coloana în care e poziţionat cursorul 

- Cell - selectează celula în care e poziţionat cursorul 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Lucru în tabel 



Operații în tabel 

• Pentru a adăuga rânduri /coloane într-un tabel existent se activeaza meniul Table Tools  

   (click în interiorul tabelului) 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Insert Left – pentru a 
insera o coloana la stanga 
de coloana in care se afla 
cursorul contextual; 
 

Insert Right – pentru 
a insera o coloana la 
dreapta de coloana cu 
cursor; 
 

Insert Above – 
pentru a insera un 
rand inaintea 

randului cu cursor; 
 

Insert Below –
 pentru a insera un 
rand dupa randul cu 
cursor. 

 



Operații în tabel 

• Pentru a efectua operatiunile de stergere se activeaza Table/Delete : 

     

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Delete Table – pentru a sterge intreg 
tabelul, cursorul contextual trebuie 

plasat in tabelul ce urmeaza a fi sters. 
 

Delete Columns – pentru a sterge 
coloanele tabelului. Pentru a sterge o 
singura coloana atunci,trebuie pozitionat 
cursorul contextual in aceasta. Daca, insa 
este necesar de a sterge mai multe 
coloane, atunci este necesar ca acestea sa 
fie selectate. 
 

Delete Rows – pentru a sterge 
randurile tabelului.  

Delete Cells – pentru a 
sterge una sau mai 
multe celule 

 



• Este posibila unirea a doua sau mai multe celule. – MERGE CELLS (îmbinare celule) 

• Se selecteaza celulele care necesita a fi unite si apoi se utilizeaza comanda Table Tools/ 

Layout/ Merge Cells, sau click dreapta pe celulele selectate si opțiunea Merge Cells 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 



• O celula poate fi împărțită în mai multe utilizând comanda Tables Tools/ Layout/Split 

Cells sau click dreapta pe celula selectată și alegere  Split Cells (scindare celule) 

•  In fereastra care apare ca rezultat se indica in cate randuri si coloane trebuie impartita 

celula selectata.  

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 



Impartirea unui tabel in doua tabele se face in felul urmator:  

• se pozitioneaza cursorul in randul de unde trebuie sa inceapa tabelul doi si se activeaza 

comanda Table Tools / Layout/ Split Table. 

 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 



Pentru a fixa dimensiunile coloanelor si randurilor poate fi activat Table Tools /AutoFit : 

 

 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

AutoFit to Contents - 
potrivirea automata la 
continutul celulelor; 
 

AutoFit to Window- 
potrivirea automata 
fata de fereastra;   



Table Tools / Layout / Cell Size / Distribute Rows 

Distribute Rows  – randurile selectate se vor fixa de aceiasi dimensiune.  

 

 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 



Table Tools / Layout / Cell Size / Distribute Rows 

Distribute Columns  – coloanele selectate se vor fixa de aceiasi dimensiune.  

 

 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 



Formatarea datelor tabelului 

• Formatarea datelor unui tabel poate fi efectuata la fel ca si formatarea oricarui text. 

Doar ca in cazul datelor tabelelor mai sunt adaugate cateva optiuni. 

• Pentru alinierea textului intr-o celula  

– Align top left /  Align top center / Align top right 

– Align center left / Align center / Align center right 

– Align bottom left / Align bottom center / Align bottom center  

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Formatarea datelor tabelului 

• In cadrul unei celule a tabelului poate fi modificata directia de orientare a textului.  

• In acest scop poate fi utilizata optiunea Text Direction. In acest caz Word-ul va 

schimba automat directia textului din cea obisnuita in una prestabilita.  

• Daca este necesara alta orientare poate fi pozitionat cursorul pe celula respectiva si 

este necesar de a activa butonul drept al mouse-ului si de a selecta comanda Text 

Direction. In rezultat va fi deschisa fereastra Text Direction – Table Cell de unde 

utilizatorul poate selecta orientarea dorita a textului in cadrul unei celule. 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Formatarea datelor tabelului 

• Se pot seta marginile celulei sau spatiul dintre celule din fereastra Table Options afisata 

cu ajutorul optiunii Cell Margins din sectiunea Alignment din meniul Table Tools 

 

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



• Heading Rows Repeat - permite repetarea capului de tabel pe fiecare pagină nouă 

ocupată de tabel. 

• Această opțiune se aplică pe tabelele care se extind pe mai multe pagini. 

• Pentru a funcționa corect, înainte trebuie să verificăm că opțiunea Text Wrapping este setată pe 

valoarea None în fereastra Table Properties care apare când realizăm click dreapta pe tabel. 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 



Operații în tabel 

 
Convertirea tabelului în text 

În cazul cand se face convertirea de la tabel la text trebuie pozitionat cursorul contextual in 

tabel si de a activa Table Tools / Layout / Data / Convert to Text.  

Ca rezultat apare fereastra Convert Table to Text in care se indica simbolul prin care se va 

face delimitarea datelor care se afla in diferite celule  

 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Operații în tabel 

 Convertirea Textului în tabel 

• Când trebuie de convertit un text în tabel, asupra textului este necesar de a efectua 

unele transformari; între elementele de text care urmeaza a fi incluse in diferite coloane 

un semn delimitator (de exemplu semnul # sau tab), excluzand semnele existente. 

Dupa selectarea textului se activeaza  

Insert /Table /Convert Text to Table  

În fereastra ce se deschide se indica  

numarul de coloane si semnul delimitator 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Opțiunea Sort - se sortează pe coloane datele din tabel, crescător / descrescător, după 

maxim trei coloane 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 



Formula - permite efectuarea unor calcule în tabel – Formula / Data / Table Tools 

• Se poziţionează cursorul în ultima celulă necompletată pe un rând sau coloană.  

• În caseta Formula, este afişată automat funcţia  

 =SUM(left) pentru adunarea elementelor de pe linie, sau 

  =SUM(above) pentru adunarea elementelor de pe coloană.  

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Se vor indica ca argumente ale funcţiei (ceea 
ce este între paranteze) adrese de celule, 
adică A1, B4 (litera coloanei şi numărul liniei) 
sau un domeniu de celule, adică A1:C5. 
 

Dacă dorim altă funcţie, o alegem din 
caseta Paste Function şi o introducem în 
caseta Formula. Alte funcţii sunt: Min, 
Max, Count (numără elementele), 
Average (media aritmetică), etc.  
 

În caseta Number Format se stabileşte 
formatul de afişare a rezultatului. 
 



Table Properties - permite stabilirea proprietăţilor unui tabel 

Se selecteaza tabelul, apoi click dreapta pe el si alegem optiunea Table Properties 

Apare o fereastra cu 4 taburi: Table; Row; Column; Cell; Alt Text 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Lățimea tabelului 

Alinierea tabelului în pagină  
(stânga, centru, dreapta) 

Aranjarea tabelului în pagină în funcție  
de textul cel înconjoară  
(around = text în toate părțile 
 none= text la sfârșitul tabelului) 

Opțiuni pentru chenare 

Setare margini celule si  
spatiul dintre celule 



Table Properties – Borders and shading 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Alegere tip chenar,  
in functie de laturile afisate 

Tipul liniei ce defineste  
laturile chenarului 

Culoarea laturilor  
interioare /exterioare tabelului 

Grosimea laturilor chenarului 



Table Properties – Borders and shading 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Alegere culoare fundal 

Modelul pentru fundal  

Culoarea utilizată în model 

Optiune aplicare pentru tot tabelul 
pentru celule / pragraf / text 



Table Properties - permite stabilirea proprietăţilor unui tabel: 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Specificare inaltime rand 

Permite ca un rand, sa se continue 
 pe pagina urmatoare 

Repetare primul rand (cap de tabel) 
pe toate paginile pe care se afla tabelul 



Table Properties - permite stabilirea proprietăţilor unui tabel: 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Specificare latime coloana 



Table Properties - permite stabilirea proprietăţilor unui tabel: 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 

Operații în tabel 

 

Aliniere pe verticala 
a textului din celule 

Specificare latime celula 

Optiuni- setare margini celule 

Optiuni – incadrare text in celula 



Aplicații 

1.Creati un tabel cu 3 coloane si 4 linii, folosind, pe rand, fiecare modalitate de creare 

oferita de Word. 

2.In primul tabel completati succesiv cu numerele de la 1 la 12  

Adaugati o coloana noua intre prima si a doua coloana, completand-o cu litere de la a la d 

3.Stergeti penultimul rand  

4.Stergeti ultima coloana. 

5. Transformati tabelul in text, celulele fiind separate prin virgula 

6.In al doilea tabel, proiectati un Cap de tabel cu continutul Nr.crt, Nume si prenume, 

Media si completati-l cu date corespunzatoare. 

 7. Sortati tabelul, ordonandu-l dupa Media generala si, in cazul aceleiasi medii, alfabetic 

dupa Nume si prenume. 

8. In al treilea tabel uneste toate celulele de pe primul rand si editeaza textul Prietenii mei. 

9.Scindati fiecare celula de pe prima coloana in doua coloane si un rand, completati 

incepand cu cel de-al 2lea rand cu Prenume, Nume de familie, Nr de telefon, Data nasterii. 

10.Aplicati un chenar verde si linie dubla tabelului. 

  

 
www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



Aplicații 

11. Creati un tabel (3X3) ce are culoare de umplere galben cu model dungi 
verticale rosii 

12. Introduceti text in tabel, caruia sa ii schimbati orientarea pe verticala 

13. Introduceti o imagine intr-o celula de tabel 

 

www.tic.diferite.ro   Tehnologia informației şi a comunicațiilor   tic@diferite.ro 



reading content from C:\Users\Asus\Desktop\Bee\Tools and cables.doc

Lab - Guideline

Criteria to consider when choosing network media (from CISCO CCNA1).

What is the maximum distance that the media can successfully carry a signal?

Into what type of environment will the media be installed?

What is the amount of data and the speed at which it must be transmitted?

What is the cost of the media and installation?

www.submarinecablemap.com
A. FO
· Phenomenon: total internal reflection,
· Optical communication systems use high carrier frequencies (~ 100 THz) in the visible or near-infrared region of the electromagnetic spectrum.
· telecommunication applications: short-haul (intra-city, usually < 50km) and long-haul (inter-city) 

                         


· multimode fiber

· 62.5/125μ or 50/125μ.

· single-mode fiber

· 9/125μ

· optical transmitter

· LED, LASER on different wavelength

· optical receiver

· photo-diodes
PIN photo-diode 
         APD photo-diode 

· transceiver

SFP Media converter

· splices: (loss <= 0.3dB) mechanical       and                  fusion

     

· connectors: 


· repeaters


· patch-panels



· budget of loss of optical link

· Testing

· continuity tester
· visual fault locator (VFL)
· power output

· bit error rate (BER) = average probability 
of incorrect bit identification; values: 10-9 - 10-14
· OTDR Optical Time Domain Reflectometer
· optical amplification for increasing the repeater spacing and of wavelength-division multiplexing (WDM) for increasing the bit rate

· amplifiers spaced at 60-70 km apart
· Capacity: 

· 40 and 100Gb Ethernet

· commercial WDM systems exceeded 1.6 Tb/s. 

· commercial WDM operated by VSNL: 2.56 Tb/s (64 WDM channels at 10 Gb/s over 4 fiber pairs)
· world record: 319 Tbps National Institute of Information and Communications Technology (NICT) in Japan

3.2 A 9/125μ single-mode optical fiber having the length of 2,5km and the loss equal to 0,5dB/km, which connects two DTE equipments is considered. The attenuation introduced by junctions and connectors is equal to 0,5 and 1dB respectively. The error margin taken into consideration is 3dB. The power of average emission of the transmitter is -15dB, the receiver sensitivity at a rate of errors given by BER 10-9 is -25dB and dynamic of the receiver is in the range -10 ÷ -30dB. Calculate the optical power budget.

	Crt. 
	Optical loss or power
	DB 

	1. 
	The km loss in Optical Fibre db/km X _____km fibre
	_____dB 

	2. 
	The loss in Junctions ___dB/junction X _____junctions
	_____dB 

	3. 
	The loss in Connectors __dB/connector X ___ connectors
	_____dB 

	4. 
	Losses on other components
	_____dB 

	5. 
	Margin of error
	_____dB 

	6. 
	Total loss on the Link (1+2+3+4+5)
	_____dB 

	7. 
	The power of average emission of the transmitter
	_____dB 

	8. 
	Average power received by the receiver (7-6) 
	_____dB 

	9. 
	The dynamic of the receiver _____dB at _____dB
	 

	10. 
	Receiver sensitivity at a rate of errors given by BER
	_____dB 

	11. 
	Available Remaining Power
	_____dB 


B. Structured Cabling

Hierarchical Network Design

Three-tier model:

- enterprise networks

- core layer: high-speed backbone layer between dispersed networks


Two-tier model:
- smaller enterprise networks

- core and distribution layers are collapsed into one layer


Cisco Enterprise Architecture

- core layer module->  high-speed interconnectivity between: 

- distribution layer modules

- data center server farms 

- the enterprise edge


Choosing devices


a. Fixed Configuration Switches

b. Modular Configuration Switches

c. Stackable Configuration Switches:  Cisco StackWise technology allows the interconnection of up to nine switches (fault tolerance and bandwidth availability)



Switches:

1. Layer 2 switch

2. Layer 3 switch

1. “form factor” switches 

2. modular switches
1. Switching speed: millions of packets per second

2. Backplane speed: how fast traffic can be transmitted between modules in a switch

3. Buffer size

4. Management and monitoring

http://www.enterprisenetworkingplanet.com/reports/index.php/28911/Enterprise+Ethernet+Switch+Buyers+Guide.htm
Example:

Cisco Enterprise: http://www.cisco.com/c/en/us/products/switches/index.html

